[2024-01-08T18:25:23.447355+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-08T18:25:23.448198+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-08T18:25:23.448232+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-08T18:25:23.448256+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-08T18:25:23.448276+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Console\Helper\HelperSet::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Console\\Helper\\HelperSet::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Helper/HelperSet.php:94)"} []
[2024-01-08T18:25:23.780392+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-08T18:25:23.780493+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-08T18:25:23.781043+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-08T18:25:23.781100+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-08T18:25:25.353110+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-08T18:25:25.353979+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-08T18:25:25.354012+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-08T18:25:25.354047+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-08T18:25:25.354069+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Console\Helper\HelperSet::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Console\\Helper\\HelperSet::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Helper/HelperSet.php:94)"} []
[2024-01-08T18:25:39.414557+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-08T18:25:39.415379+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-08T18:25:39.415410+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-08T18:25:39.415433+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-08T18:25:39.415462+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Console\Helper\HelperSet::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Console\\Helper\\HelperSet::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Helper/HelperSet.php:94)"} []
[2024-01-08T18:25:39.755844+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-08T18:25:39.755929+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-08T18:25:39.756474+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-08T18:25:39.756530+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-08T18:25:41.341718+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-08T18:25:41.342567+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-08T18:25:41.342618+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-08T18:25:41.342641+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-08T18:25:41.342663+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Console\Helper\HelperSet::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Console\\Helper\\HelperSet::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Helper/HelperSet.php:94)"} []
[2024-01-10T13:07:52.957303+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:07:52.957534+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:07:52.957614+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:07:52.957678+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:07:52.972500+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Routing\RouteCollection::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Routing\\RouteCollection::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/routing/RouteCollection.php:59)"} []
[2024-01-10T13:07:52.972632+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Routing\RouteCollection::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Routing\\RouteCollection::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/routing/RouteCollection.php:69)"} []
[2024-01-10T13:07:53.003368+00:00] request.INFO: Matched route "newsletters_prepare". {"route":"newsletters_prepare","route_parameters":{"_route":"newsletters_prepare","_controller":"App\\Controller\\NewslettersController::prepare"},"request_uri":"http://localhost:8001/newsletters/prepare","method":"GET"} []
[2024-01-10T13:07:53.010235+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:07:53.010325+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:07:53.010451+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:07:53.010506+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:07:53.011309+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::offsetExists($option) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::offsetExists($option) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:1149)"} []
[2024-01-10T13:07:53.011417+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::offsetGet($option, bool $triggerDeprecation = true) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::offsetGet($option, bool $triggerDeprecation = true) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:908)"} []
[2024-01-10T13:07:53.011524+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::offsetSet($option, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::offsetSet($option, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:1165)"} []
[2024-01-10T13:07:53.011602+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::offsetUnset($option) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::offsetUnset($option) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:1177)"} []
[2024-01-10T13:07:53.011660+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:1193)"} []
[2024-01-10T13:07:53.011952+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormBuilder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormBuilder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormBuilder.php:218)"} []
[2024-01-10T13:07:53.012034+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormBuilder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormBuilder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormBuilder.php:164)"} []
[2024-01-10T13:07:53.016969+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\ButtonBuilder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\ButtonBuilder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/ButtonBuilder.php:728)"} []
[2024-01-10T13:07:53.017048+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\ButtonBuilder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\ButtonBuilder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/ButtonBuilder.php:718)"} []
[2024-01-10T13:07:53.017142+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:1024)"} []
[2024-01-10T13:07:53.017205+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::offsetExists($name) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::offsetExists($name) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:968)"} []
[2024-01-10T13:07:53.017246+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::offsetGet($name) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::offsetGet($name) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:982)"} []
[2024-01-10T13:07:53.017283+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::offsetSet($name, $child) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::offsetSet($name, $child) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:1000)"} []
[2024-01-10T13:07:53.017316+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::offsetUnset($name) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::offsetUnset($name) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:1014)"} []
[2024-01-10T13:07:53.017347+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:1034)"} []
[2024-01-10T13:07:53.017425+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:104)"} []
[2024-01-10T13:07:53.017463+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:114)"} []
[2024-01-10T13:07:53.017496+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:128)"} []
[2024-01-10T13:07:53.017529+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:151)"} []
[2024-01-10T13:07:53.017560+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:168)"} []
[2024-01-10T13:07:53.017591+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:176)"} []
[2024-01-10T13:07:53.017683+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:443)"} []
[2024-01-10T13:07:53.017723+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::offsetExists($offset) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::offsetExists($offset) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:54)"} []
[2024-01-10T13:07:53.017756+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::offsetGet($offset) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::offsetGet($offset) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:70)"} []
[2024-01-10T13:07:53.017788+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::offsetSet($offset, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::offsetSet($offset, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:87)"} []
[2024-01-10T13:07:53.017820+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::offsetUnset($offset) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::offsetUnset($offset) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:103)"} []
[2024-01-10T13:07:53.017861+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:433)"} []
[2024-01-10T13:07:53.017984+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\InheritDataAwareIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\InheritDataAwareIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/InheritDataAwareIterator.php:41)"} []
[2024-01-10T13:07:53.018023+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\InheritDataAwareIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\InheritDataAwareIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/InheritDataAwareIterator.php:33)"} []
[2024-01-10T13:07:53.018092+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMapIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMapIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMapIterator.php:108)"} []
[2024-01-10T13:07:53.018151+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMapIterator::next() should either be compatible with Iterator::next(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMapIterator::next() should either be compatible with Iterator::next(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMapIterator.php:118)"} []
[2024-01-10T13:07:53.018212+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMapIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMapIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMapIterator.php:136)"} []
[2024-01-10T13:07:53.018272+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMapIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMapIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMapIterator.php:160)"} []
[2024-01-10T13:07:53.018399+00:00] php.INFO: Deprecated: Return type of Symfony\Component\PropertyAccess\PropertyPath::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\PropertyAccess\\PropertyPath::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/property-access/PropertyPath.php:157)"} []
[2024-01-10T13:07:53.018840+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::offsetExists($name) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::offsetExists($name) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:123)"} []
[2024-01-10T13:07:53.018902+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::offsetGet($name) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::offsetGet($name) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:111)"} []
[2024-01-10T13:07:53.018958+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::offsetSet($name, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::offsetSet($name, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:135)"} []
[2024-01-10T13:07:53.019013+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::offsetUnset($name) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::offsetUnset($name) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:147)"} []
[2024-01-10T13:07:53.019066+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:157)"} []
[2024-01-10T13:07:53.019127+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:167)"} []
[2024-01-10T13:07:53.019222+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:200)"} []
[2024-01-10T13:07:53.019280+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:210)"} []
[2024-01-10T13:07:53.019335+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:96)"} []
[2024-01-10T13:07:53.019391+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::next() should either be compatible with Iterator::next(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::next() should either be compatible with Iterator::next(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:104)"} []
[2024-01-10T13:07:53.019445+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:114)"} []
[2024-01-10T13:07:53.019506+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::valid() should either be compatible with Iterator::valid(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::valid() should either be compatible with Iterator::valid(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:124)"} []
[2024-01-10T13:07:53.019561+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:135)"} []
[2024-01-10T13:07:53.019616+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::seek($position) should either be compatible with SeekableIterator::seek(int $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::seek($position) should either be compatible with SeekableIterator::seek(int $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:246)"} []
[2024-01-10T13:07:53.019670+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:96)"} []
[2024-01-10T13:07:53.019724+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::next() should either be compatible with Iterator::next(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::next() should either be compatible with Iterator::next(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:104)"} []
[2024-01-10T13:07:53.019778+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:114)"} []
[2024-01-10T13:07:53.019838+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::valid() should either be compatible with Iterator::valid(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::valid() should either be compatible with Iterator::valid(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:124)"} []
[2024-01-10T13:07:53.019893+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:135)"} []
[2024-01-10T13:07:53.019953+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::offsetExists($position) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::offsetExists($position) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:147)"} []
[2024-01-10T13:07:53.020010+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::offsetGet($position) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::offsetGet($position) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:161)"} []
[2024-01-10T13:07:53.020065+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::offsetSet($position, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::offsetSet($position, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:177)"} []
[2024-01-10T13:07:53.020153+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::offsetUnset($position) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::offsetUnset($position) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:189)"} []
[2024-01-10T13:07:53.020223+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:232)"} []
[2024-01-10T13:07:53.020997+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":null,"driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":null,"driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:07:53.024063+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:07:53.024158+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:07:53.024225+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:07:53.024289+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:07:53.024383+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:07:53.024429+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:07:53.025188+00:00] request.CRITICAL: Uncaught PHP Exception Doctrine\DBAL\Exception\ConnectionException: "An exception occurred in the driver: SQLSTATE[HY000] [1045] Access denied for user 'root'@'localhost' (using password: NO)" at /home/massoud/www/Symfony/Newsletter/vendor/doctrine/dbal/src/Driver/API/MySQL/ExceptionConverter.php line 101 {"exception":"[object] (Doctrine\\DBAL\\Exception\\ConnectionException(code: 1045): An exception occurred in the driver: SQLSTATE[HY000] [1045] Access denied for user 'root'@'localhost' (using password: NO) at /home/massoud/www/Symfony/Newsletter/vendor/doctrine/dbal/src/Driver/API/MySQL/ExceptionConverter.php:101)\n[previous exception] [object] (Doctrine\\DBAL\\Driver\\PDO\\Exception(code: 1045): SQLSTATE[HY000] [1045] Access denied for user 'root'@'localhost' (using password: NO) at /home/massoud/www/Symfony/Newsletter/vendor/doctrine/dbal/src/Driver/PDO/Exception.php:28)\n[previous exception] [object] (PDOException(code: 1045): SQLSTATE[HY000] [1045] Access denied for user 'root'@'localhost' (using password: NO) at /home/massoud/www/Symfony/Newsletter/vendor/doctrine/dbal/src/Driver/PDO/MySQL/Driver.php:33)"} []
[2024-01-10T13:07:53.242687+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:07:53.244316+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":null,"driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":null,"driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:07:53.245596+00:00] app.ERROR: error while trying to collect executed migrations {"exception":"[object] (Doctrine\\DBAL\\Exception\\ConnectionException(code: 1045): An exception occurred in the driver: SQLSTATE[HY000] [1045] Access denied for user 'root'@'localhost' (using password: NO) at /home/massoud/www/Symfony/Newsletter/vendor/doctrine/dbal/src/Driver/API/MySQL/ExceptionConverter.php:101)\n[previous exception] [object] (Doctrine\\DBAL\\Driver\\PDO\\Exception(code: 1045): SQLSTATE[HY000] [1045] Access denied for user 'root'@'localhost' (using password: NO) at /home/massoud/www/Symfony/Newsletter/vendor/doctrine/dbal/src/Driver/PDO/Exception.php:28)\n[previous exception] [object] (PDOException(code: 1045): SQLSTATE[HY000] [1045] Access denied for user 'root'@'localhost' (using password: NO) at /home/massoud/www/Symfony/Newsletter/vendor/doctrine/dbal/src/Driver/PDO/MySQL/Driver.php:33)"} []
[2024-01-10T13:07:53.247602+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":null,"driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":null,"driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:07:53.248171+00:00] app.ERROR: error while trying to collect executed migrations {"exception":"[object] (Doctrine\\DBAL\\Exception\\ConnectionException(code: 1045): An exception occurred in the driver: SQLSTATE[HY000] [1045] Access denied for user 'root'@'localhost' (using password: NO) at /home/massoud/www/Symfony/Newsletter/vendor/doctrine/dbal/src/Driver/API/MySQL/ExceptionConverter.php:101)\n[previous exception] [object] (Doctrine\\DBAL\\Driver\\PDO\\Exception(code: 1045): SQLSTATE[HY000] [1045] Access denied for user 'root'@'localhost' (using password: NO) at /home/massoud/www/Symfony/Newsletter/vendor/doctrine/dbal/src/Driver/PDO/Exception.php:28)\n[previous exception] [object] (PDOException(code: 1045): SQLSTATE[HY000] [1045] Access denied for user 'root'@'localhost' (using password: NO) at /home/massoud/www/Symfony/Newsletter/vendor/doctrine/dbal/src/Driver/PDO/MySQL/Driver.php:33)"} []
[2024-01-10T13:07:53.264118+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:07:53.264277+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:07:53.548081+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:07:53.548247+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:07:53.548324+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:07:53.548394+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:07:53.549216+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"528df9"},"request_uri":"http://localhost:8001/_wdt/528df9","method":"GET"} []
[2024-01-10T13:07:53.550713+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:07:53.550835+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:07:53.550914+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:07:53.550997+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:07:53.551064+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:07:53.551130+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:07:53.552410+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:07:53.552508+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:07:53.552590+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:07:53.552664+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:08:15.492955+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:08:15.494079+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:08:15.494398+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:08:15.494614+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:08:15.498865+00:00] request.INFO: Matched route "newsletters_prepare". {"route":"newsletters_prepare","route_parameters":{"_route":"newsletters_prepare","_controller":"App\\Controller\\NewslettersController::prepare"},"request_uri":"http://localhost:8001/newsletters/prepare","method":"GET"} []
[2024-01-10T13:08:15.509534+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:08:15.510040+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:08:15.510635+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:08:15.510975+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:08:15.512570+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::offsetExists($option) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::offsetExists($option) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:1149)"} []
[2024-01-10T13:08:15.512896+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::offsetGet($option, bool $triggerDeprecation = true) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::offsetGet($option, bool $triggerDeprecation = true) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:908)"} []
[2024-01-10T13:08:15.513255+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::offsetSet($option, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::offsetSet($option, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:1165)"} []
[2024-01-10T13:08:15.513591+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::offsetUnset($option) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::offsetUnset($option) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:1177)"} []
[2024-01-10T13:08:15.513886+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:1193)"} []
[2024-01-10T13:08:15.514953+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormBuilder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormBuilder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormBuilder.php:218)"} []
[2024-01-10T13:08:15.515355+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormBuilder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormBuilder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormBuilder.php:164)"} []
[2024-01-10T13:08:15.529932+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\ButtonBuilder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\ButtonBuilder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/ButtonBuilder.php:728)"} []
[2024-01-10T13:08:15.530328+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\ButtonBuilder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\ButtonBuilder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/ButtonBuilder.php:718)"} []
[2024-01-10T13:08:15.530911+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:1024)"} []
[2024-01-10T13:08:15.531239+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::offsetExists($name) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::offsetExists($name) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:968)"} []
[2024-01-10T13:08:15.531520+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::offsetGet($name) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::offsetGet($name) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:982)"} []
[2024-01-10T13:08:15.531807+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::offsetSet($name, $child) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::offsetSet($name, $child) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:1000)"} []
[2024-01-10T13:08:15.532131+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::offsetUnset($name) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::offsetUnset($name) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:1014)"} []
[2024-01-10T13:08:15.532456+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:1034)"} []
[2024-01-10T13:08:15.532643+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:104)"} []
[2024-01-10T13:08:15.532797+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:114)"} []
[2024-01-10T13:08:15.532901+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:128)"} []
[2024-01-10T13:08:15.532992+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:151)"} []
[2024-01-10T13:08:15.533083+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:168)"} []
[2024-01-10T13:08:15.533204+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:176)"} []
[2024-01-10T13:08:15.533435+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:443)"} []
[2024-01-10T13:08:15.533614+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::offsetExists($offset) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::offsetExists($offset) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:54)"} []
[2024-01-10T13:08:15.533795+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::offsetGet($offset) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::offsetGet($offset) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:70)"} []
[2024-01-10T13:08:15.533942+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::offsetSet($offset, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::offsetSet($offset, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:87)"} []
[2024-01-10T13:08:15.534043+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::offsetUnset($offset) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::offsetUnset($offset) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:103)"} []
[2024-01-10T13:08:15.534154+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:433)"} []
[2024-01-10T13:08:15.534415+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\InheritDataAwareIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\InheritDataAwareIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/InheritDataAwareIterator.php:41)"} []
[2024-01-10T13:08:15.534520+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\InheritDataAwareIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\InheritDataAwareIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/InheritDataAwareIterator.php:33)"} []
[2024-01-10T13:08:15.534657+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMapIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMapIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMapIterator.php:108)"} []
[2024-01-10T13:08:15.534772+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMapIterator::next() should either be compatible with Iterator::next(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMapIterator::next() should either be compatible with Iterator::next(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMapIterator.php:118)"} []
[2024-01-10T13:08:15.534933+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMapIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMapIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMapIterator.php:136)"} []
[2024-01-10T13:08:15.535102+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMapIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMapIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMapIterator.php:160)"} []
[2024-01-10T13:08:15.535391+00:00] php.INFO: Deprecated: Return type of Symfony\Component\PropertyAccess\PropertyPath::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\PropertyAccess\\PropertyPath::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/property-access/PropertyPath.php:157)"} []
[2024-01-10T13:08:15.536735+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::offsetExists($name) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::offsetExists($name) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:123)"} []
[2024-01-10T13:08:15.536984+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::offsetGet($name) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::offsetGet($name) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:111)"} []
[2024-01-10T13:08:15.537193+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::offsetSet($name, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::offsetSet($name, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:135)"} []
[2024-01-10T13:08:15.537409+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::offsetUnset($name) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::offsetUnset($name) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:147)"} []
[2024-01-10T13:08:15.537618+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:157)"} []
[2024-01-10T13:08:15.537807+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:167)"} []
[2024-01-10T13:08:15.538081+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:200)"} []
[2024-01-10T13:08:15.538223+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:210)"} []
[2024-01-10T13:08:15.538321+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:96)"} []
[2024-01-10T13:08:15.538442+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::next() should either be compatible with Iterator::next(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::next() should either be compatible with Iterator::next(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:104)"} []
[2024-01-10T13:08:15.538608+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:114)"} []
[2024-01-10T13:08:15.538765+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::valid() should either be compatible with Iterator::valid(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::valid() should either be compatible with Iterator::valid(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:124)"} []
[2024-01-10T13:08:15.538935+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:135)"} []
[2024-01-10T13:08:15.539105+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::seek($position) should either be compatible with SeekableIterator::seek(int $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::seek($position) should either be compatible with SeekableIterator::seek(int $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:246)"} []
[2024-01-10T13:08:15.539278+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:96)"} []
[2024-01-10T13:08:15.539449+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::next() should either be compatible with Iterator::next(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::next() should either be compatible with Iterator::next(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:104)"} []
[2024-01-10T13:08:15.539603+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:114)"} []
[2024-01-10T13:08:15.539722+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::valid() should either be compatible with Iterator::valid(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::valid() should either be compatible with Iterator::valid(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:124)"} []
[2024-01-10T13:08:15.539858+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:135)"} []
[2024-01-10T13:08:15.540025+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::offsetExists($position) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::offsetExists($position) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:147)"} []
[2024-01-10T13:08:15.540194+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::offsetGet($position) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::offsetGet($position) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:161)"} []
[2024-01-10T13:08:15.540387+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::offsetSet($position, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::offsetSet($position, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:177)"} []
[2024-01-10T13:08:15.540575+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::offsetUnset($position) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::offsetUnset($position) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:189)"} []
[2024-01-10T13:08:15.540730+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:232)"} []
[2024-01-10T13:08:15.542069+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:08:15.543398+00:00] doctrine.DEBUG: Executing query: SELECT c0_.id AS id_0, c0_.name AS name_1 FROM categories c0_ {"sql":"SELECT c0_.id AS id_0, c0_.name AS name_1 FROM categories c0_"} []
[2024-01-10T13:08:15.556977+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:08:15.557136+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:08:15.557273+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:08:15.557433+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:08:15.557569+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:08:15.557702+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:08:15.559017+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:08:15.559973+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:08:15.560580+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:08:15.562959+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:08:15.563404+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:08:15.565846+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:08:15.566231+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:08:15.568043+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:08:15.568474+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:08:15.570792+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:08:15.575717+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:08:15.576137+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:08:15.578173+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:08:15.580345+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:08:15.640832+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:08:15.641012+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:08:15.761624+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:08:15.769208+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:08:15.769503+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:08:15.769673+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:08:15.769836+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:08:15.770528+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"a43b16"},"request_uri":"http://localhost:8001/_wdt/a43b16","method":"GET"} []
[2024-01-10T13:08:15.771708+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:08:15.771983+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:08:15.772199+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:08:15.772419+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:08:15.772698+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:08:15.772879+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:08:15.774338+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:08:15.774584+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:08:15.774788+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:08:15.774962+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:09:15.276727+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:09:15.277758+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:09:15.277927+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:09:15.278092+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:09:15.279714+00:00] request.INFO: Matched route "newsletters_prepare". {"route":"newsletters_prepare","route_parameters":{"_route":"newsletters_prepare","_controller":"App\\Controller\\NewslettersController::prepare"},"request_uri":"http://localhost:8001/newsletters/prepare","method":"GET"} []
[2024-01-10T13:09:15.283202+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:09:15.283343+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:09:15.283479+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:09:15.283551+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:09:15.283917+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::offsetExists($option) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::offsetExists($option) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:1149)"} []
[2024-01-10T13:09:15.283990+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::offsetGet($option, bool $triggerDeprecation = true) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::offsetGet($option, bool $triggerDeprecation = true) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:908)"} []
[2024-01-10T13:09:15.284051+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::offsetSet($option, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::offsetSet($option, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:1165)"} []
[2024-01-10T13:09:15.284119+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::offsetUnset($option) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::offsetUnset($option) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:1177)"} []
[2024-01-10T13:09:15.284176+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:1193)"} []
[2024-01-10T13:09:15.284456+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormBuilder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormBuilder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormBuilder.php:218)"} []
[2024-01-10T13:09:15.284529+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormBuilder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormBuilder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormBuilder.php:164)"} []
[2024-01-10T13:09:15.288812+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\ButtonBuilder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\ButtonBuilder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/ButtonBuilder.php:728)"} []
[2024-01-10T13:09:15.288914+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\ButtonBuilder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\ButtonBuilder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/ButtonBuilder.php:718)"} []
[2024-01-10T13:09:15.289037+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:1024)"} []
[2024-01-10T13:09:15.289093+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::offsetExists($name) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::offsetExists($name) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:968)"} []
[2024-01-10T13:09:15.289139+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::offsetGet($name) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::offsetGet($name) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:982)"} []
[2024-01-10T13:09:15.289182+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::offsetSet($name, $child) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::offsetSet($name, $child) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:1000)"} []
[2024-01-10T13:09:15.289225+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::offsetUnset($name) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::offsetUnset($name) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:1014)"} []
[2024-01-10T13:09:15.289266+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:1034)"} []
[2024-01-10T13:09:15.289343+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:104)"} []
[2024-01-10T13:09:15.289390+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:114)"} []
[2024-01-10T13:09:15.289430+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:128)"} []
[2024-01-10T13:09:15.289471+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:151)"} []
[2024-01-10T13:09:15.289512+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:168)"} []
[2024-01-10T13:09:15.289552+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:176)"} []
[2024-01-10T13:09:15.289652+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:443)"} []
[2024-01-10T13:09:15.289700+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::offsetExists($offset) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::offsetExists($offset) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:54)"} []
[2024-01-10T13:09:15.289743+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::offsetGet($offset) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::offsetGet($offset) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:70)"} []
[2024-01-10T13:09:15.289784+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::offsetSet($offset, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::offsetSet($offset, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:87)"} []
[2024-01-10T13:09:15.289826+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::offsetUnset($offset) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::offsetUnset($offset) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:103)"} []
[2024-01-10T13:09:15.289867+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:433)"} []
[2024-01-10T13:09:15.289994+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\InheritDataAwareIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\InheritDataAwareIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/InheritDataAwareIterator.php:41)"} []
[2024-01-10T13:09:15.290042+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\InheritDataAwareIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\InheritDataAwareIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/InheritDataAwareIterator.php:33)"} []
[2024-01-10T13:09:15.290108+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMapIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMapIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMapIterator.php:108)"} []
[2024-01-10T13:09:15.290153+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMapIterator::next() should either be compatible with Iterator::next(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMapIterator::next() should either be compatible with Iterator::next(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMapIterator.php:118)"} []
[2024-01-10T13:09:15.290194+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMapIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMapIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMapIterator.php:136)"} []
[2024-01-10T13:09:15.290236+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMapIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMapIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMapIterator.php:160)"} []
[2024-01-10T13:09:15.290342+00:00] php.INFO: Deprecated: Return type of Symfony\Component\PropertyAccess\PropertyPath::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\PropertyAccess\\PropertyPath::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/property-access/PropertyPath.php:157)"} []
[2024-01-10T13:09:15.290741+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::offsetExists($name) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::offsetExists($name) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:123)"} []
[2024-01-10T13:09:15.290804+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::offsetGet($name) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::offsetGet($name) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:111)"} []
[2024-01-10T13:09:15.290853+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::offsetSet($name, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::offsetSet($name, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:135)"} []
[2024-01-10T13:09:15.290898+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::offsetUnset($name) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::offsetUnset($name) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:147)"} []
[2024-01-10T13:09:15.290942+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:157)"} []
[2024-01-10T13:09:15.291027+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:167)"} []
[2024-01-10T13:09:15.291193+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:200)"} []
[2024-01-10T13:09:15.291310+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:210)"} []
[2024-01-10T13:09:15.291402+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:96)"} []
[2024-01-10T13:09:15.291510+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::next() should either be compatible with Iterator::next(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::next() should either be compatible with Iterator::next(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:104)"} []
[2024-01-10T13:09:15.291626+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:114)"} []
[2024-01-10T13:09:15.291747+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::valid() should either be compatible with Iterator::valid(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::valid() should either be compatible with Iterator::valid(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:124)"} []
[2024-01-10T13:09:15.291852+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:135)"} []
[2024-01-10T13:09:15.291926+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::seek($position) should either be compatible with SeekableIterator::seek(int $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::seek($position) should either be compatible with SeekableIterator::seek(int $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:246)"} []
[2024-01-10T13:09:15.292000+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:96)"} []
[2024-01-10T13:09:15.292083+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::next() should either be compatible with Iterator::next(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::next() should either be compatible with Iterator::next(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:104)"} []
[2024-01-10T13:09:15.292151+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:114)"} []
[2024-01-10T13:09:15.292232+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::valid() should either be compatible with Iterator::valid(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::valid() should either be compatible with Iterator::valid(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:124)"} []
[2024-01-10T13:09:15.292301+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:135)"} []
[2024-01-10T13:09:15.292415+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::offsetExists($position) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::offsetExists($position) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:147)"} []
[2024-01-10T13:09:15.292491+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::offsetGet($position) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::offsetGet($position) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:161)"} []
[2024-01-10T13:09:15.292564+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::offsetSet($position, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::offsetSet($position, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:177)"} []
[2024-01-10T13:09:15.292637+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::offsetUnset($position) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::offsetUnset($position) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:189)"} []
[2024-01-10T13:09:15.292725+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:232)"} []
[2024-01-10T13:09:15.293825+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:09:15.294832+00:00] doctrine.DEBUG: Executing query: SELECT c0_.id AS id_0, c0_.name AS name_1 FROM categories c0_ {"sql":"SELECT c0_.id AS id_0, c0_.name AS name_1 FROM categories c0_"} []
[2024-01-10T13:09:15.303126+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:09:15.303227+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:09:15.303280+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:09:15.303326+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:09:15.303379+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:09:15.303420+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:09:15.304451+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:09:15.305019+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:09:15.305355+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:09:15.306521+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:09:15.306788+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:09:15.308057+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:09:15.308410+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:09:15.310408+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:09:15.310663+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:09:15.311980+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:09:15.313821+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:09:15.314024+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:09:15.315022+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:09:15.316038+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:09:15.353125+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:09:15.353278+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:09:15.416085+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:09:15.431350+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:09:15.431558+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:09:15.431627+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:09:15.431695+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:09:15.432329+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"8e298a"},"request_uri":"http://localhost:8001/_wdt/8e298a","method":"GET"} []
[2024-01-10T13:09:15.433391+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:09:15.433477+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:09:15.433526+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:09:15.433568+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:09:15.433606+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:09:15.433653+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:09:15.434599+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:09:15.434712+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:09:15.434793+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:09:15.434837+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:09:42.373201+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:09:42.373468+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:09:42.373547+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:09:42.373609+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:09:42.374628+00:00] request.INFO: Matched route "newsletters_prepare". {"route":"newsletters_prepare","route_parameters":{"_route":"newsletters_prepare","_controller":"App\\Controller\\NewslettersController::prepare"},"request_uri":"http://localhost:8001/newsletters/prepare","method":"GET"} []
[2024-01-10T13:09:42.378336+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:09:42.378476+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:09:42.378639+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:09:42.378733+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:09:42.379146+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::offsetExists($option) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::offsetExists($option) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:1149)"} []
[2024-01-10T13:09:42.379222+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::offsetGet($option, bool $triggerDeprecation = true) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::offsetGet($option, bool $triggerDeprecation = true) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:908)"} []
[2024-01-10T13:09:42.379294+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::offsetSet($option, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::offsetSet($option, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:1165)"} []
[2024-01-10T13:09:42.379365+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::offsetUnset($option) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::offsetUnset($option) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:1177)"} []
[2024-01-10T13:09:42.379500+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:1193)"} []
[2024-01-10T13:09:42.379694+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormBuilder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormBuilder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormBuilder.php:218)"} []
[2024-01-10T13:09:42.379751+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormBuilder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormBuilder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormBuilder.php:164)"} []
[2024-01-10T13:09:42.382698+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\ButtonBuilder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\ButtonBuilder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/ButtonBuilder.php:728)"} []
[2024-01-10T13:09:42.382783+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\ButtonBuilder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\ButtonBuilder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/ButtonBuilder.php:718)"} []
[2024-01-10T13:09:42.382879+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:1024)"} []
[2024-01-10T13:09:42.382934+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::offsetExists($name) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::offsetExists($name) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:968)"} []
[2024-01-10T13:09:42.382989+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::offsetGet($name) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::offsetGet($name) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:982)"} []
[2024-01-10T13:09:42.383038+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::offsetSet($name, $child) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::offsetSet($name, $child) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:1000)"} []
[2024-01-10T13:09:42.383075+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::offsetUnset($name) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::offsetUnset($name) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:1014)"} []
[2024-01-10T13:09:42.383122+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:1034)"} []
[2024-01-10T13:09:42.383189+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:104)"} []
[2024-01-10T13:09:42.383266+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:114)"} []
[2024-01-10T13:09:42.383327+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:128)"} []
[2024-01-10T13:09:42.383385+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:151)"} []
[2024-01-10T13:09:42.383447+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:168)"} []
[2024-01-10T13:09:42.383504+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:176)"} []
[2024-01-10T13:09:42.383630+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:443)"} []
[2024-01-10T13:09:42.383709+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::offsetExists($offset) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::offsetExists($offset) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:54)"} []
[2024-01-10T13:09:42.383774+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::offsetGet($offset) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::offsetGet($offset) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:70)"} []
[2024-01-10T13:09:42.383829+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::offsetSet($offset, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::offsetSet($offset, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:87)"} []
[2024-01-10T13:09:42.383884+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::offsetUnset($offset) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::offsetUnset($offset) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:103)"} []
[2024-01-10T13:09:42.383944+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:433)"} []
[2024-01-10T13:09:42.384115+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\InheritDataAwareIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\InheritDataAwareIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/InheritDataAwareIterator.php:41)"} []
[2024-01-10T13:09:42.384193+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\InheritDataAwareIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\InheritDataAwareIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/InheritDataAwareIterator.php:33)"} []
[2024-01-10T13:09:42.384278+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMapIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMapIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMapIterator.php:108)"} []
[2024-01-10T13:09:42.384341+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMapIterator::next() should either be compatible with Iterator::next(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMapIterator::next() should either be compatible with Iterator::next(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMapIterator.php:118)"} []
[2024-01-10T13:09:42.384416+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMapIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMapIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMapIterator.php:136)"} []
[2024-01-10T13:09:42.384476+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMapIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMapIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMapIterator.php:160)"} []
[2024-01-10T13:09:42.384617+00:00] php.INFO: Deprecated: Return type of Symfony\Component\PropertyAccess\PropertyPath::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\PropertyAccess\\PropertyPath::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/property-access/PropertyPath.php:157)"} []
[2024-01-10T13:09:42.385127+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::offsetExists($name) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::offsetExists($name) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:123)"} []
[2024-01-10T13:09:42.385196+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::offsetGet($name) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::offsetGet($name) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:111)"} []
[2024-01-10T13:09:42.385254+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::offsetSet($name, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::offsetSet($name, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:135)"} []
[2024-01-10T13:09:42.385310+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::offsetUnset($name) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::offsetUnset($name) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:147)"} []
[2024-01-10T13:09:42.385366+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:157)"} []
[2024-01-10T13:09:42.385420+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:167)"} []
[2024-01-10T13:09:42.385549+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:200)"} []
[2024-01-10T13:09:42.385634+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:210)"} []
[2024-01-10T13:09:42.385709+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:96)"} []
[2024-01-10T13:09:42.385776+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::next() should either be compatible with Iterator::next(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::next() should either be compatible with Iterator::next(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:104)"} []
[2024-01-10T13:09:42.385847+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:114)"} []
[2024-01-10T13:09:42.385902+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::valid() should either be compatible with Iterator::valid(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::valid() should either be compatible with Iterator::valid(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:124)"} []
[2024-01-10T13:09:42.385976+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:135)"} []
[2024-01-10T13:09:42.386035+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::seek($position) should either be compatible with SeekableIterator::seek(int $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::seek($position) should either be compatible with SeekableIterator::seek(int $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:246)"} []
[2024-01-10T13:09:42.386096+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:96)"} []
[2024-01-10T13:09:42.386153+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::next() should either be compatible with Iterator::next(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::next() should either be compatible with Iterator::next(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:104)"} []
[2024-01-10T13:09:42.386208+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:114)"} []
[2024-01-10T13:09:42.386262+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::valid() should either be compatible with Iterator::valid(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::valid() should either be compatible with Iterator::valid(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:124)"} []
[2024-01-10T13:09:42.386323+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:135)"} []
[2024-01-10T13:09:42.386379+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::offsetExists($position) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::offsetExists($position) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:147)"} []
[2024-01-10T13:09:42.386438+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::offsetGet($position) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::offsetGet($position) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:161)"} []
[2024-01-10T13:09:42.386496+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::offsetSet($position, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::offsetSet($position, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:177)"} []
[2024-01-10T13:09:42.386555+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::offsetUnset($position) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::offsetUnset($position) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:189)"} []
[2024-01-10T13:09:42.386610+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:232)"} []
[2024-01-10T13:09:42.387519+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:09:42.388469+00:00] doctrine.DEBUG: Executing query: SELECT c0_.id AS id_0, c0_.name AS name_1 FROM categories c0_ {"sql":"SELECT c0_.id AS id_0, c0_.name AS name_1 FROM categories c0_"} []
[2024-01-10T13:09:42.401052+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:09:42.401269+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:09:42.401424+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:09:42.401564+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:09:42.401703+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:09:42.401846+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:09:42.403030+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:09:42.403829+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:09:42.404322+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:09:42.405851+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:09:42.406473+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:09:42.408244+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:09:42.408551+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:09:42.409727+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:09:42.410009+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:09:42.411793+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:09:42.414381+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:09:42.414661+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:09:42.415916+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:09:42.416788+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:09:42.453576+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:09:42.453828+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:09:42.518265+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:09:42.522715+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:09:42.522855+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:09:42.522911+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:09:42.522963+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:09:42.523536+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"3135e8"},"request_uri":"http://localhost:8001/_wdt/3135e8","method":"GET"} []
[2024-01-10T13:09:42.524883+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:09:42.525037+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:09:42.525198+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:09:42.525272+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:09:42.525336+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:09:42.525400+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:09:42.526943+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:09:42.527050+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:09:42.527143+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:09:42.527213+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:10:17.034894+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:10:17.035570+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:10:17.035825+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:10:17.036018+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:10:17.039901+00:00] request.INFO: Matched route "newsletters_prepare". {"route":"newsletters_prepare","route_parameters":{"_route":"newsletters_prepare","_controller":"App\\Controller\\NewslettersController::prepare"},"request_uri":"http://localhost:8001/newsletters/prepare","method":"GET"} []
[2024-01-10T13:10:17.049973+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:10:17.050196+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:10:17.050451+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:10:17.050613+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:10:17.051298+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::offsetExists($option) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::offsetExists($option) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:1149)"} []
[2024-01-10T13:10:17.051437+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::offsetGet($option, bool $triggerDeprecation = true) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::offsetGet($option, bool $triggerDeprecation = true) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:908)"} []
[2024-01-10T13:10:17.051555+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::offsetSet($option, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::offsetSet($option, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:1165)"} []
[2024-01-10T13:10:17.051664+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::offsetUnset($option) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::offsetUnset($option) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:1177)"} []
[2024-01-10T13:10:17.051767+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:1193)"} []
[2024-01-10T13:10:17.052103+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormBuilder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormBuilder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormBuilder.php:218)"} []
[2024-01-10T13:10:17.052194+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormBuilder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormBuilder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormBuilder.php:164)"} []
[2024-01-10T13:10:17.058364+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\ButtonBuilder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\ButtonBuilder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/ButtonBuilder.php:728)"} []
[2024-01-10T13:10:17.058519+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\ButtonBuilder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\ButtonBuilder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/ButtonBuilder.php:718)"} []
[2024-01-10T13:10:17.058697+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:1024)"} []
[2024-01-10T13:10:17.058786+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::offsetExists($name) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::offsetExists($name) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:968)"} []
[2024-01-10T13:10:17.058879+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::offsetGet($name) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::offsetGet($name) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:982)"} []
[2024-01-10T13:10:17.058950+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::offsetSet($name, $child) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::offsetSet($name, $child) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:1000)"} []
[2024-01-10T13:10:17.059018+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::offsetUnset($name) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::offsetUnset($name) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:1014)"} []
[2024-01-10T13:10:17.059086+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:1034)"} []
[2024-01-10T13:10:17.059195+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:104)"} []
[2024-01-10T13:10:17.059267+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:114)"} []
[2024-01-10T13:10:17.059346+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:128)"} []
[2024-01-10T13:10:17.059415+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:151)"} []
[2024-01-10T13:10:17.059482+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:168)"} []
[2024-01-10T13:10:17.059547+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:176)"} []
[2024-01-10T13:10:17.059694+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:443)"} []
[2024-01-10T13:10:17.059774+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::offsetExists($offset) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::offsetExists($offset) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:54)"} []
[2024-01-10T13:10:17.059937+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::offsetGet($offset) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::offsetGet($offset) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:70)"} []
[2024-01-10T13:10:17.060053+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::offsetSet($offset, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::offsetSet($offset, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:87)"} []
[2024-01-10T13:10:17.060173+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::offsetUnset($offset) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::offsetUnset($offset) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:103)"} []
[2024-01-10T13:10:17.060288+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:433)"} []
[2024-01-10T13:10:17.060548+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\InheritDataAwareIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\InheritDataAwareIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/InheritDataAwareIterator.php:41)"} []
[2024-01-10T13:10:17.060688+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\InheritDataAwareIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\InheritDataAwareIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/InheritDataAwareIterator.php:33)"} []
[2024-01-10T13:10:17.060840+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMapIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMapIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMapIterator.php:108)"} []
[2024-01-10T13:10:17.060926+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMapIterator::next() should either be compatible with Iterator::next(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMapIterator::next() should either be compatible with Iterator::next(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMapIterator.php:118)"} []
[2024-01-10T13:10:17.060987+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMapIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMapIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMapIterator.php:136)"} []
[2024-01-10T13:10:17.061041+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMapIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMapIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMapIterator.php:160)"} []
[2024-01-10T13:10:17.061200+00:00] php.INFO: Deprecated: Return type of Symfony\Component\PropertyAccess\PropertyPath::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\PropertyAccess\\PropertyPath::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/property-access/PropertyPath.php:157)"} []
[2024-01-10T13:10:17.061841+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::offsetExists($name) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::offsetExists($name) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:123)"} []
[2024-01-10T13:10:17.061931+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::offsetGet($name) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::offsetGet($name) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:111)"} []
[2024-01-10T13:10:17.062011+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::offsetSet($name, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::offsetSet($name, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:135)"} []
[2024-01-10T13:10:17.062088+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::offsetUnset($name) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::offsetUnset($name) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:147)"} []
[2024-01-10T13:10:17.062158+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:157)"} []
[2024-01-10T13:10:17.062228+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:167)"} []
[2024-01-10T13:10:17.062391+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:200)"} []
[2024-01-10T13:10:17.062488+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:210)"} []
[2024-01-10T13:10:17.062588+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:96)"} []
[2024-01-10T13:10:17.062678+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::next() should either be compatible with Iterator::next(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::next() should either be compatible with Iterator::next(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:104)"} []
[2024-01-10T13:10:17.062775+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:114)"} []
[2024-01-10T13:10:17.062875+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::valid() should either be compatible with Iterator::valid(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::valid() should either be compatible with Iterator::valid(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:124)"} []
[2024-01-10T13:10:17.062972+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:135)"} []
[2024-01-10T13:10:17.063080+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::seek($position) should either be compatible with SeekableIterator::seek(int $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::seek($position) should either be compatible with SeekableIterator::seek(int $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:246)"} []
[2024-01-10T13:10:17.063181+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:96)"} []
[2024-01-10T13:10:17.063280+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::next() should either be compatible with Iterator::next(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::next() should either be compatible with Iterator::next(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:104)"} []
[2024-01-10T13:10:17.063379+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:114)"} []
[2024-01-10T13:10:17.063474+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::valid() should either be compatible with Iterator::valid(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::valid() should either be compatible with Iterator::valid(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:124)"} []
[2024-01-10T13:10:17.063564+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:135)"} []
[2024-01-10T13:10:17.063663+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::offsetExists($position) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::offsetExists($position) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:147)"} []
[2024-01-10T13:10:17.063755+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::offsetGet($position) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::offsetGet($position) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:161)"} []
[2024-01-10T13:10:17.063844+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::offsetSet($position, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::offsetSet($position, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:177)"} []
[2024-01-10T13:10:17.063935+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::offsetUnset($position) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::offsetUnset($position) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:189)"} []
[2024-01-10T13:10:17.064024+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:232)"} []
[2024-01-10T13:10:17.064979+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:10:17.066024+00:00] doctrine.DEBUG: Executing query: SELECT c0_.id AS id_0, c0_.name AS name_1 FROM categories c0_ {"sql":"SELECT c0_.id AS id_0, c0_.name AS name_1 FROM categories c0_"} []
[2024-01-10T13:10:17.080749+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:10:17.080867+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:10:17.080958+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:10:17.081043+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:10:17.081122+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:10:17.081214+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:10:17.082349+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:10:17.083077+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:10:17.083484+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:10:17.084646+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:10:17.084866+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:10:17.086136+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:10:17.086389+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:10:17.088338+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:10:17.088628+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:10:17.090703+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:10:17.093645+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:10:17.094017+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:10:17.095425+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:10:17.096608+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:10:17.137962+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:10:17.140845+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:10:17.218323+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:10:17.222918+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:10:17.223420+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:10:17.223728+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:10:17.223908+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:10:17.224632+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"f459fb"},"request_uri":"http://localhost:8001/_wdt/f459fb","method":"GET"} []
[2024-01-10T13:10:17.225678+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:10:17.225784+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:10:17.225859+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:10:17.225934+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:10:17.226007+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:10:17.226077+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:10:17.227197+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:10:17.227293+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:10:17.227374+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:10:17.227446+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:11:19.148534+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:11:19.148837+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:11:19.148976+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:11:19.149073+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:11:19.150330+00:00] request.INFO: Matched route "newsletters_prepare". {"route":"newsletters_prepare","route_parameters":{"_route":"newsletters_prepare","_controller":"App\\Controller\\NewslettersController::prepare"},"request_uri":"http://localhost:8001/newsletters/prepare","method":"GET"} []
[2024-01-10T13:11:19.154422+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:11:19.154607+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:11:19.154820+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:11:19.155307+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:11:19.156460+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::offsetExists($option) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::offsetExists($option) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:1149)"} []
[2024-01-10T13:11:19.156598+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::offsetGet($option, bool $triggerDeprecation = true) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::offsetGet($option, bool $triggerDeprecation = true) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:908)"} []
[2024-01-10T13:11:19.156707+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::offsetSet($option, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::offsetSet($option, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:1165)"} []
[2024-01-10T13:11:19.156818+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::offsetUnset($option) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::offsetUnset($option) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:1177)"} []
[2024-01-10T13:11:19.156922+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:1193)"} []
[2024-01-10T13:11:19.157284+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormBuilder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormBuilder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormBuilder.php:218)"} []
[2024-01-10T13:11:19.157378+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormBuilder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormBuilder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormBuilder.php:164)"} []
[2024-01-10T13:11:19.161361+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\ButtonBuilder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\ButtonBuilder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/ButtonBuilder.php:728)"} []
[2024-01-10T13:11:19.161483+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\ButtonBuilder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\ButtonBuilder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/ButtonBuilder.php:718)"} []
[2024-01-10T13:11:19.161644+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:1024)"} []
[2024-01-10T13:11:19.161722+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::offsetExists($name) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::offsetExists($name) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:968)"} []
[2024-01-10T13:11:19.161809+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::offsetGet($name) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::offsetGet($name) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:982)"} []
[2024-01-10T13:11:19.161877+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::offsetSet($name, $child) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::offsetSet($name, $child) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:1000)"} []
[2024-01-10T13:11:19.161943+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::offsetUnset($name) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::offsetUnset($name) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:1014)"} []
[2024-01-10T13:11:19.162008+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:1034)"} []
[2024-01-10T13:11:19.162108+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:104)"} []
[2024-01-10T13:11:19.162181+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:114)"} []
[2024-01-10T13:11:19.162248+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:128)"} []
[2024-01-10T13:11:19.162326+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:151)"} []
[2024-01-10T13:11:19.162394+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:168)"} []
[2024-01-10T13:11:19.162460+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:176)"} []
[2024-01-10T13:11:19.162593+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:443)"} []
[2024-01-10T13:11:19.162666+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::offsetExists($offset) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::offsetExists($offset) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:54)"} []
[2024-01-10T13:11:19.162745+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::offsetGet($offset) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::offsetGet($offset) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:70)"} []
[2024-01-10T13:11:19.162815+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::offsetSet($offset, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::offsetSet($offset, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:87)"} []
[2024-01-10T13:11:19.162884+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::offsetUnset($offset) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::offsetUnset($offset) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:103)"} []
[2024-01-10T13:11:19.162950+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:433)"} []
[2024-01-10T13:11:19.163119+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\InheritDataAwareIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\InheritDataAwareIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/InheritDataAwareIterator.php:41)"} []
[2024-01-10T13:11:19.163193+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\InheritDataAwareIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\InheritDataAwareIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/InheritDataAwareIterator.php:33)"} []
[2024-01-10T13:11:19.163298+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMapIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMapIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMapIterator.php:108)"} []
[2024-01-10T13:11:19.163372+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMapIterator::next() should either be compatible with Iterator::next(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMapIterator::next() should either be compatible with Iterator::next(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMapIterator.php:118)"} []
[2024-01-10T13:11:19.163443+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMapIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMapIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMapIterator.php:136)"} []
[2024-01-10T13:11:19.163511+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMapIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMapIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMapIterator.php:160)"} []
[2024-01-10T13:11:19.163655+00:00] php.INFO: Deprecated: Return type of Symfony\Component\PropertyAccess\PropertyPath::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\PropertyAccess\\PropertyPath::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/property-access/PropertyPath.php:157)"} []
[2024-01-10T13:11:19.164213+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::offsetExists($name) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::offsetExists($name) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:123)"} []
[2024-01-10T13:11:19.164328+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::offsetGet($name) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::offsetGet($name) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:111)"} []
[2024-01-10T13:11:19.164432+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::offsetSet($name, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::offsetSet($name, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:135)"} []
[2024-01-10T13:11:19.164520+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::offsetUnset($name) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::offsetUnset($name) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:147)"} []
[2024-01-10T13:11:19.164595+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:157)"} []
[2024-01-10T13:11:19.164693+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:167)"} []
[2024-01-10T13:11:19.164940+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:200)"} []
[2024-01-10T13:11:19.165080+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:210)"} []
[2024-01-10T13:11:19.165254+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:96)"} []
[2024-01-10T13:11:19.165402+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::next() should either be compatible with Iterator::next(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::next() should either be compatible with Iterator::next(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:104)"} []
[2024-01-10T13:11:19.165556+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:114)"} []
[2024-01-10T13:11:19.165687+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::valid() should either be compatible with Iterator::valid(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::valid() should either be compatible with Iterator::valid(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:124)"} []
[2024-01-10T13:11:19.165800+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:135)"} []
[2024-01-10T13:11:19.165882+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::seek($position) should either be compatible with SeekableIterator::seek(int $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::seek($position) should either be compatible with SeekableIterator::seek(int $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:246)"} []
[2024-01-10T13:11:19.165973+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:96)"} []
[2024-01-10T13:11:19.166050+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::next() should either be compatible with Iterator::next(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::next() should either be compatible with Iterator::next(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:104)"} []
[2024-01-10T13:11:19.166128+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:114)"} []
[2024-01-10T13:11:19.166202+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::valid() should either be compatible with Iterator::valid(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::valid() should either be compatible with Iterator::valid(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:124)"} []
[2024-01-10T13:11:19.166274+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:135)"} []
[2024-01-10T13:11:19.166344+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::offsetExists($position) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::offsetExists($position) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:147)"} []
[2024-01-10T13:11:19.166433+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::offsetGet($position) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::offsetGet($position) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:161)"} []
[2024-01-10T13:11:19.166509+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::offsetSet($position, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::offsetSet($position, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:177)"} []
[2024-01-10T13:11:19.166588+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::offsetUnset($position) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::offsetUnset($position) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:189)"} []
[2024-01-10T13:11:19.166663+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:232)"} []
[2024-01-10T13:11:19.167574+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:11:19.168459+00:00] doctrine.DEBUG: Executing query: SELECT c0_.id AS id_0, c0_.name AS name_1 FROM categories c0_ {"sql":"SELECT c0_.id AS id_0, c0_.name AS name_1 FROM categories c0_"} []
[2024-01-10T13:11:19.180775+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:11:19.180902+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:11:19.180991+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:11:19.181074+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:11:19.181151+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:11:19.181229+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:11:19.182408+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:11:19.183167+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:11:19.183578+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:11:19.185077+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:11:19.185429+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:11:19.189827+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:11:19.190207+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:11:19.191736+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:11:19.191991+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:11:19.193449+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:11:19.195301+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:11:19.195534+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:11:19.196616+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:11:19.197468+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:11:19.235174+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:11:19.235414+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:11:19.292854+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:11:19.313318+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:11:19.313645+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:11:19.313870+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:11:19.314048+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:11:19.314821+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"488ab8"},"request_uri":"http://localhost:8001/_wdt/488ab8","method":"GET"} []
[2024-01-10T13:11:19.316121+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:11:19.316416+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:11:19.316662+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:11:19.316858+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:11:19.317031+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:11:19.317173+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:11:19.318888+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:11:19.319147+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:11:19.319356+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:11:19.319545+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:14:13.285645+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:14:13.286259+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:14:13.286464+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:14:13.286668+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:14:13.289247+00:00] request.INFO: Matched route "newsletters_prepare". {"route":"newsletters_prepare","route_parameters":{"_route":"newsletters_prepare","_controller":"App\\Controller\\NewslettersController::prepare"},"request_uri":"http://localhost:8001/newsletters/prepare","method":"GET"} []
[2024-01-10T13:14:13.295361+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:14:13.295547+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:14:13.295822+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:14:13.295991+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:14:13.296752+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::offsetExists($option) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::offsetExists($option) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:1149)"} []
[2024-01-10T13:14:13.296942+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::offsetGet($option, bool $triggerDeprecation = true) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::offsetGet($option, bool $triggerDeprecation = true) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:908)"} []
[2024-01-10T13:14:13.297083+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::offsetSet($option, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::offsetSet($option, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:1165)"} []
[2024-01-10T13:14:13.297224+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::offsetUnset($option) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::offsetUnset($option) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:1177)"} []
[2024-01-10T13:14:13.297353+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:1193)"} []
[2024-01-10T13:14:13.297918+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormBuilder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormBuilder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormBuilder.php:218)"} []
[2024-01-10T13:14:13.298094+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormBuilder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormBuilder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormBuilder.php:164)"} []
[2024-01-10T13:14:13.303588+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\ButtonBuilder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\ButtonBuilder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/ButtonBuilder.php:728)"} []
[2024-01-10T13:14:13.303735+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\ButtonBuilder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\ButtonBuilder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/ButtonBuilder.php:718)"} []
[2024-01-10T13:14:13.303930+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:1024)"} []
[2024-01-10T13:14:13.304052+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::offsetExists($name) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::offsetExists($name) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:968)"} []
[2024-01-10T13:14:13.304144+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::offsetGet($name) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::offsetGet($name) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:982)"} []
[2024-01-10T13:14:13.304262+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::offsetSet($name, $child) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::offsetSet($name, $child) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:1000)"} []
[2024-01-10T13:14:13.304372+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::offsetUnset($name) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::offsetUnset($name) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:1014)"} []
[2024-01-10T13:14:13.304481+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:1034)"} []
[2024-01-10T13:14:13.304618+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:104)"} []
[2024-01-10T13:14:13.304720+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:114)"} []
[2024-01-10T13:14:13.304809+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:128)"} []
[2024-01-10T13:14:13.304923+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:151)"} []
[2024-01-10T13:14:13.305019+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:168)"} []
[2024-01-10T13:14:13.305119+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:176)"} []
[2024-01-10T13:14:13.305303+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:443)"} []
[2024-01-10T13:14:13.305400+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::offsetExists($offset) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::offsetExists($offset) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:54)"} []
[2024-01-10T13:14:13.305490+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::offsetGet($offset) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::offsetGet($offset) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:70)"} []
[2024-01-10T13:14:13.305603+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::offsetSet($offset, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::offsetSet($offset, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:87)"} []
[2024-01-10T13:14:13.305695+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::offsetUnset($offset) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::offsetUnset($offset) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:103)"} []
[2024-01-10T13:14:13.305796+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:433)"} []
[2024-01-10T13:14:13.306037+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\InheritDataAwareIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\InheritDataAwareIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/InheritDataAwareIterator.php:41)"} []
[2024-01-10T13:14:13.306134+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\InheritDataAwareIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\InheritDataAwareIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/InheritDataAwareIterator.php:33)"} []
[2024-01-10T13:14:13.306259+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMapIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMapIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMapIterator.php:108)"} []
[2024-01-10T13:14:13.306377+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMapIterator::next() should either be compatible with Iterator::next(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMapIterator::next() should either be compatible with Iterator::next(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMapIterator.php:118)"} []
[2024-01-10T13:14:13.306475+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMapIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMapIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMapIterator.php:136)"} []
[2024-01-10T13:14:13.306573+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMapIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMapIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMapIterator.php:160)"} []
[2024-01-10T13:14:13.306770+00:00] php.INFO: Deprecated: Return type of Symfony\Component\PropertyAccess\PropertyPath::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\PropertyAccess\\PropertyPath::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/property-access/PropertyPath.php:157)"} []
[2024-01-10T13:14:13.307333+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::offsetExists($name) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::offsetExists($name) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:123)"} []
[2024-01-10T13:14:13.307429+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::offsetGet($name) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::offsetGet($name) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:111)"} []
[2024-01-10T13:14:13.307542+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::offsetSet($name, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::offsetSet($name, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:135)"} []
[2024-01-10T13:14:13.307646+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::offsetUnset($name) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::offsetUnset($name) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:147)"} []
[2024-01-10T13:14:13.307737+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:157)"} []
[2024-01-10T13:14:13.307835+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:167)"} []
[2024-01-10T13:14:13.308006+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:200)"} []
[2024-01-10T13:14:13.308108+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:210)"} []
[2024-01-10T13:14:13.308220+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:96)"} []
[2024-01-10T13:14:13.308322+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::next() should either be compatible with Iterator::next(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::next() should either be compatible with Iterator::next(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:104)"} []
[2024-01-10T13:14:13.308435+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:114)"} []
[2024-01-10T13:14:13.308537+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::valid() should either be compatible with Iterator::valid(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::valid() should either be compatible with Iterator::valid(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:124)"} []
[2024-01-10T13:14:13.308627+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:135)"} []
[2024-01-10T13:14:13.308716+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::seek($position) should either be compatible with SeekableIterator::seek(int $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::seek($position) should either be compatible with SeekableIterator::seek(int $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:246)"} []
[2024-01-10T13:14:13.308823+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:96)"} []
[2024-01-10T13:14:13.308916+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::next() should either be compatible with Iterator::next(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::next() should either be compatible with Iterator::next(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:104)"} []
[2024-01-10T13:14:13.309005+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:114)"} []
[2024-01-10T13:14:13.309094+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::valid() should either be compatible with Iterator::valid(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::valid() should either be compatible with Iterator::valid(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:124)"} []
[2024-01-10T13:14:13.309183+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:135)"} []
[2024-01-10T13:14:13.309274+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::offsetExists($position) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::offsetExists($position) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:147)"} []
[2024-01-10T13:14:13.309364+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::offsetGet($position) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::offsetGet($position) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:161)"} []
[2024-01-10T13:14:13.309471+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::offsetSet($position, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::offsetSet($position, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:177)"} []
[2024-01-10T13:14:13.309562+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::offsetUnset($position) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::offsetUnset($position) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:189)"} []
[2024-01-10T13:14:13.309656+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:232)"} []
[2024-01-10T13:14:13.310433+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:14:13.311285+00:00] doctrine.DEBUG: Executing query: SELECT c0_.id AS id_0, c0_.name AS name_1 FROM categories c0_ {"sql":"SELECT c0_.id AS id_0, c0_.name AS name_1 FROM categories c0_"} []
[2024-01-10T13:14:13.324598+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:14:13.324730+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:14:13.324815+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:14:13.324882+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:14:13.324942+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:14:13.325010+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:14:13.326587+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:14:13.327358+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:14:13.327832+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:14:13.329332+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:14:13.331970+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:14:13.333752+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:14:13.334127+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:14:13.335796+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:14:13.336110+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:14:13.338323+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:14:13.341735+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:14:13.342195+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:14:13.344286+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:14:13.346048+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:14:13.393712+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:14:13.393830+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:14:13.448849+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:14:13.454173+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:14:13.454484+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:14:13.454574+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:14:13.454636+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:14:13.455366+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"c4ec3d"},"request_uri":"http://localhost:8001/_wdt/c4ec3d","method":"GET"} []
[2024-01-10T13:14:13.457132+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:14:13.457493+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:14:13.457853+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:14:13.458054+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:14:13.458222+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:14:13.458382+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:14:13.459756+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:14:13.459860+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:14:13.459960+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:14:13.460032+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:14:33.000641+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:14:33.000852+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:14:33.000919+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:14:33.000973+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:14:33.001885+00:00] request.INFO: Matched route "newsletters_prepare". {"route":"newsletters_prepare","route_parameters":{"_route":"newsletters_prepare","_controller":"App\\Controller\\NewslettersController::prepare"},"request_uri":"http://localhost:8001/newsletters/prepare","method":"POST"} []
[2024-01-10T13:14:33.002729+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:14:33.002853+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:14:33.002993+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:14:33.003190+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:14:33.003468+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:14:33.005678+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::offsetExists($option) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::offsetExists($option) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:1149)"} []
[2024-01-10T13:14:33.005765+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::offsetGet($option, bool $triggerDeprecation = true) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::offsetGet($option, bool $triggerDeprecation = true) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:908)"} []
[2024-01-10T13:14:33.005811+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::offsetSet($option, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::offsetSet($option, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:1165)"} []
[2024-01-10T13:14:33.005850+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::offsetUnset($option) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::offsetUnset($option) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:1177)"} []
[2024-01-10T13:14:33.005886+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:1193)"} []
[2024-01-10T13:14:33.006053+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormBuilder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormBuilder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormBuilder.php:218)"} []
[2024-01-10T13:14:33.006096+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormBuilder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormBuilder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormBuilder.php:164)"} []
[2024-01-10T13:14:33.008732+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\ButtonBuilder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\ButtonBuilder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/ButtonBuilder.php:728)"} []
[2024-01-10T13:14:33.008796+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\ButtonBuilder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\ButtonBuilder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/ButtonBuilder.php:718)"} []
[2024-01-10T13:14:33.008880+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:1024)"} []
[2024-01-10T13:14:33.008921+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::offsetExists($name) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::offsetExists($name) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:968)"} []
[2024-01-10T13:14:33.008956+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::offsetGet($name) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::offsetGet($name) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:982)"} []
[2024-01-10T13:14:33.008988+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::offsetSet($name, $child) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::offsetSet($name, $child) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:1000)"} []
[2024-01-10T13:14:33.009029+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::offsetUnset($name) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::offsetUnset($name) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:1014)"} []
[2024-01-10T13:14:33.009061+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:1034)"} []
[2024-01-10T13:14:33.009112+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:104)"} []
[2024-01-10T13:14:33.009145+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:114)"} []
[2024-01-10T13:14:33.009177+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:128)"} []
[2024-01-10T13:14:33.009209+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:151)"} []
[2024-01-10T13:14:33.009246+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:168)"} []
[2024-01-10T13:14:33.009277+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:176)"} []
[2024-01-10T13:14:33.009346+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:443)"} []
[2024-01-10T13:14:33.009381+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::offsetExists($offset) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::offsetExists($offset) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:54)"} []
[2024-01-10T13:14:33.009415+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::offsetGet($offset) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::offsetGet($offset) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:70)"} []
[2024-01-10T13:14:33.009447+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::offsetSet($offset, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::offsetSet($offset, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:87)"} []
[2024-01-10T13:14:33.009486+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::offsetUnset($offset) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::offsetUnset($offset) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:103)"} []
[2024-01-10T13:14:33.009517+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:433)"} []
[2024-01-10T13:14:33.009608+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\InheritDataAwareIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\InheritDataAwareIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/InheritDataAwareIterator.php:41)"} []
[2024-01-10T13:14:33.009644+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\InheritDataAwareIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\InheritDataAwareIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/InheritDataAwareIterator.php:33)"} []
[2024-01-10T13:14:33.009693+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMapIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMapIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMapIterator.php:108)"} []
[2024-01-10T13:14:33.009727+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMapIterator::next() should either be compatible with Iterator::next(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMapIterator::next() should either be compatible with Iterator::next(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMapIterator.php:118)"} []
[2024-01-10T13:14:33.009764+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMapIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMapIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMapIterator.php:136)"} []
[2024-01-10T13:14:33.009797+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMapIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMapIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMapIterator.php:160)"} []
[2024-01-10T13:14:33.009873+00:00] php.INFO: Deprecated: Return type of Symfony\Component\PropertyAccess\PropertyPath::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\PropertyAccess\\PropertyPath::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/property-access/PropertyPath.php:157)"} []
[2024-01-10T13:14:33.010996+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:14:33.011931+00:00] doctrine.DEBUG: Executing query: SELECT c0_.id AS id_0, c0_.name AS name_1 FROM categories c0_ {"sql":"SELECT c0_.id AS id_0, c0_.name AS name_1 FROM categories c0_"} []
[2024-01-10T13:14:33.017900+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Validator\ConstraintViolationList::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Validator\\ConstraintViolationList::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/validator/ConstraintViolationList.php:113)"} []
[2024-01-10T13:14:33.018002+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Validator\ConstraintViolationList::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Validator\\ConstraintViolationList::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/validator/ConstraintViolationList.php:121)"} []
[2024-01-10T13:14:33.018086+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Validator\ConstraintViolationList::offsetExists($offset) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Validator\\ConstraintViolationList::offsetExists($offset) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/validator/ConstraintViolationList.php:129)"} []
[2024-01-10T13:14:33.018143+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Validator\ConstraintViolationList::offsetGet($offset) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Validator\\ConstraintViolationList::offsetGet($offset) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/validator/ConstraintViolationList.php:139)"} []
[2024-01-10T13:14:33.018185+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Validator\ConstraintViolationList::offsetSet($offset, $violation) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Validator\\ConstraintViolationList::offsetSet($offset, $violation) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/validator/ConstraintViolationList.php:149)"} []
[2024-01-10T13:14:33.018224+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Validator\ConstraintViolationList::offsetUnset($offset) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Validator\\ConstraintViolationList::offsetUnset($offset) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/validator/ConstraintViolationList.php:163)"} []
[2024-01-10T13:14:33.021041+00:00] php.INFO: Deprecated: Creation of dynamic property Symfony\Component\Form\Extension\Validator\Constraints\Form::$groups is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: Creation of dynamic property Symfony\\Component\\Form\\Extension\\Validator\\Constraints\\Form::$groups is deprecated at /home/massoud/www/Symfony/Newsletter/vendor/symfony/validator/Constraint.php:189)"} []
[2024-01-10T13:14:33.064317+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:200)"} []
[2024-01-10T13:14:33.064421+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:210)"} []
[2024-01-10T13:14:33.064471+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:96)"} []
[2024-01-10T13:14:33.064511+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::next() should either be compatible with Iterator::next(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::next() should either be compatible with Iterator::next(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:104)"} []
[2024-01-10T13:14:33.064547+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:114)"} []
[2024-01-10T13:14:33.064582+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::valid() should either be compatible with Iterator::valid(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::valid() should either be compatible with Iterator::valid(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:124)"} []
[2024-01-10T13:14:33.064616+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:135)"} []
[2024-01-10T13:14:33.064659+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::seek($position) should either be compatible with SeekableIterator::seek(int $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::seek($position) should either be compatible with SeekableIterator::seek(int $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:246)"} []
[2024-01-10T13:14:33.064721+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:96)"} []
[2024-01-10T13:14:33.064759+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::next() should either be compatible with Iterator::next(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::next() should either be compatible with Iterator::next(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:104)"} []
[2024-01-10T13:14:33.064792+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:114)"} []
[2024-01-10T13:14:33.064826+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::valid() should either be compatible with Iterator::valid(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::valid() should either be compatible with Iterator::valid(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:124)"} []
[2024-01-10T13:14:33.064859+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:135)"} []
[2024-01-10T13:14:33.064898+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::offsetExists($position) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::offsetExists($position) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:147)"} []
[2024-01-10T13:14:33.064932+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::offsetGet($position) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::offsetGet($position) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:161)"} []
[2024-01-10T13:14:33.064968+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::offsetSet($position, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::offsetSet($position, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:177)"} []
[2024-01-10T13:14:33.065001+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::offsetUnset($position) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::offsetUnset($position) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:189)"} []
[2024-01-10T13:14:33.065034+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:232)"} []
[2024-01-10T13:14:33.065195+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:14:33.072918+00:00] doctrine.DEBUG: Executing statement: INSERT INTO newsletters (name, content, created_at, is_sent, categories_id) VALUES (?, ?, ?, ?, ?) (parameters: array{"1":"cool","2":"<p><br>&nbsp;</p><p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Omnis provident obcaecati deserunt recusandae ipsa vitae enim debitis cum. Fuga tempore consequuntur dolorum aspernatur quidem autem nostrum aperiam explicabo neque itaque!</p>","3":"2024-01-10 13:14:33","4":0,"5":2}, types: array{"1":2,"2":2,"3":2,"4":5,"5":1}) {"sql":"INSERT INTO newsletters (name, content, created_at, is_sent, categories_id) VALUES (?, ?, ?, ?, ?)","params":{"1":"cool","2":"<p><br>&nbsp;</p><p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Omnis provident obcaecati deserunt recusandae ipsa vitae enim debitis cum. Fuga tempore consequuntur dolorum aspernatur quidem autem nostrum aperiam explicabo neque itaque!</p>","3":"2024-01-10 13:14:33","4":0,"5":2},"types":{"1":2,"2":2,"3":2,"4":5,"5":1}} []
[2024-01-10T13:14:33.073450+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:14:33.117853+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:14:33.118253+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:14:33.118531+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:14:33.118761+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:14:33.118993+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:14:33.119265+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:14:33.127168+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:14:33.127683+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:14:33.130083+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:14:33.130513+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:14:33.133394+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:14:33.133788+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:14:33.135830+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:14:33.136209+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:14:33.138607+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:14:33.142007+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:14:33.142504+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:14:33.144326+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:14:33.145383+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:14:33.178002+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:14:33.178142+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:14:33.233033+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:14:33.236126+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:14:33.236231+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:14:33.236269+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:14:33.236298+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:14:33.236668+00:00] request.INFO: Matched route "newsletters_list". {"route":"newsletters_list","route_parameters":{"_route":"newsletters_list","_controller":"App\\Controller\\NewslettersController::list"},"request_uri":"http://localhost:8001/newsletters/list","method":"GET"} []
[2024-01-10T13:14:33.241491+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:14:33.242220+00:00] doctrine.DEBUG: Executing query: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0"} []
[2024-01-10T13:14:33.247137+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:14:33.247871+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:14:33.249366+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:14:33.249485+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:14:33.249555+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:14:33.249629+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:14:33.249690+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:14:33.249750+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:14:33.250291+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:14:33.250363+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:14:33.250435+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:14:33.250503+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:14:33.250828+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:14:33.251197+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:14:33.251423+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:14:33.252339+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:14:33.252753+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:14:33.253767+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:14:33.254060+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:14:33.255041+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:14:33.255268+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:14:33.256341+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:14:33.257916+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:14:33.258111+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:14:33.259142+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:14:33.259975+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:14:33.274804+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:14:33.274921+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:14:33.298019+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:14:33.328400+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:14:33.328607+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:14:33.328673+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:14:33.328727+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:14:33.330213+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"7dc304"},"request_uri":"http://localhost:8001/_wdt/7dc304","method":"GET"} []
[2024-01-10T13:14:33.331357+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:14:33.331494+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:14:33.331581+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:14:33.331659+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:14:33.331734+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:14:33.331806+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:14:33.333095+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:14:33.333200+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:14:33.333278+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:14:33.333356+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:20:31.838325+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:20:31.838987+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:20:31.839295+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:20:31.839518+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:20:31.842495+00:00] request.INFO: Matched route "newsletters_send". {"route":"newsletters_send","route_parameters":{"_route":"newsletters_send","_controller":"App\\Controller\\NewslettersController::send","id":"1"},"request_uri":"http://localhost:8001/newsletters/send/1","method":"GET"} []
[2024-01-10T13:20:31.859701+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:20:31.863129+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ? (parameters: array{"1":"1"}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ?","params":{"1":"1"},"types":{"1":1}} []
[2024-01-10T13:20:31.873764+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:20:31.876943+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:20:31.911827+00:00] messenger.INFO: Sending message App\Message\SendNewsletterMessage with async sender using Symfony\Component\Messenger\Bridge\Doctrine\Transport\DoctrineTransport {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage","alias":"async","sender":"Symfony\\Component\\Messenger\\Bridge\\Doctrine\\Transport\\DoctrineTransport"} []
[2024-01-10T13:20:31.934748+00:00] doctrine.DEBUG: Executing statement: INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?) (parameters: array{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:1:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"default","4":"2024-01-10 13:20:31","5":"2024-01-10 13:20:31"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?)","params":{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:1:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"default","4":"2024-01-10 13:20:31","5":"2024-01-10 13:20:31"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2024-01-10T13:20:31.939681+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:20:31.940858+00:00] doctrine.DEBUG: Executing statement: SELECT c.TABLE_NAME,       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony"}, types: array{"1":2,"2":2}) {"sql":"SELECT c.TABLE_NAME,       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony"},"types":{"1":2,"2":2}} []
[2024-01-10T13:20:31.948998+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME,        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME,        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:20:31.952089+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT k.TABLE_NAME,            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT DISTINCT k.TABLE_NAME,            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:20:31.955031+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:20:31.961844+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:20:31.962249+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:20:31.963909+00:00] doctrine.DEBUG: Executing statement: CREATE TABLE messenger_messages (id BIGINT AUTO_INCREMENT NOT NULL, body LONGTEXT NOT NULL, headers LONGTEXT NOT NULL, queue_name VARCHAR(190) NOT NULL, created_at DATETIME NOT NULL, available_at DATETIME NOT NULL, delivered_at DATETIME DEFAULT NULL, INDEX IDX_75EA56E0FB7336F0 (queue_name), INDEX IDX_75EA56E0E3BD61CE (available_at), INDEX IDX_75EA56E016BA31DB (delivered_at), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB {"sql":"CREATE TABLE messenger_messages (id BIGINT AUTO_INCREMENT NOT NULL, body LONGTEXT NOT NULL, headers LONGTEXT NOT NULL, queue_name VARCHAR(190) NOT NULL, created_at DATETIME NOT NULL, available_at DATETIME NOT NULL, delivered_at DATETIME DEFAULT NULL, INDEX IDX_75EA56E0FB7336F0 (queue_name), INDEX IDX_75EA56E0E3BD61CE (available_at), INDEX IDX_75EA56E016BA31DB (delivered_at), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB"} []
[2024-01-10T13:20:32.015458+00:00] doctrine.DEBUG: Executing statement: INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?) (parameters: array{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:1:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"default","4":"2024-01-10 13:20:31","5":"2024-01-10 13:20:31"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?)","params":{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:1:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"default","4":"2024-01-10 13:20:31","5":"2024-01-10 13:20:31"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2024-01-10T13:20:32.030241+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:20:32.030648+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:20:32.030906+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:20:32.031235+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:20:32.031493+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:20:32.032082+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:20:32.036077+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:20:32.036480+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:20:32.037279+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:20:32.037970+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:20:32.039669+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:20:32.041749+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:20:32.042555+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:20:32.046220+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:20:32.047130+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:20:32.052600+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:20:32.053517+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:20:32.057915+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:20:32.058611+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:20:32.063745+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:20:32.073816+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:20:32.074637+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:20:32.080027+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:20:32.083671+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:20:32.129440+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:20:32.129753+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:20:32.172302+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:20:32.176654+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:20:32.176786+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:20:32.176832+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:20:32.176866+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:20:32.177328+00:00] request.INFO: Matched route "newsletters_list". {"route":"newsletters_list","route_parameters":{"_route":"newsletters_list","_controller":"App\\Controller\\NewslettersController::list"},"request_uri":"http://localhost:8001/newsletters/list","method":"GET"} []
[2024-01-10T13:20:32.179272+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:20:32.180008+00:00] doctrine.DEBUG: Executing query: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0"} []
[2024-01-10T13:20:32.182439+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:20:32.183263+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:20:32.184624+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:20:32.184704+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:20:32.184754+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:20:32.184806+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:20:32.184845+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:20:32.184882+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:20:32.185288+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:20:32.185344+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:20:32.185394+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:20:32.185440+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:20:32.185714+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:20:32.186041+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:20:32.186279+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:20:32.187755+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:20:32.188017+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:20:32.189167+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:20:32.189422+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:20:32.190876+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:20:32.191076+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:20:32.192427+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:20:32.194051+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:20:32.194249+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:20:32.195240+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:20:32.195883+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:20:32.211045+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:20:32.211149+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:20:32.233841+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:20:32.257178+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:20:32.257508+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:20:32.257705+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:20:32.257895+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:20:32.258882+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"57259e"},"request_uri":"http://localhost:8001/_wdt/57259e","method":"GET"} []
[2024-01-10T13:20:32.260108+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:20:32.260340+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:20:32.260574+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:20:32.260758+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:20:32.260942+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:20:32.261142+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:20:32.262937+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:20:32.263195+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:20:32.263422+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:20:32.263618+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:21:14.740692+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:21:14.741708+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:21:14.742101+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:21:14.742370+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:21:14.745744+00:00] request.INFO: Matched route "newsletters_send". {"route":"newsletters_send","route_parameters":{"_route":"newsletters_send","_controller":"App\\Controller\\NewslettersController::send","id":"1"},"request_uri":"http://localhost:8001/newsletters/send/1","method":"GET"} []
[2024-01-10T13:21:14.778473+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:21:14.781279+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ? (parameters: array{"1":"1"}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ?","params":{"1":"1"},"types":{"1":1}} []
[2024-01-10T13:21:14.787400+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:21:14.788929+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:21:14.792027+00:00] messenger.INFO: Sending message App\Message\SendNewsletterMessage with async sender using Symfony\Component\Messenger\Bridge\Doctrine\Transport\DoctrineTransport {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage","alias":"async","sender":"Symfony\\Component\\Messenger\\Bridge\\Doctrine\\Transport\\DoctrineTransport"} []
[2024-01-10T13:21:14.792420+00:00] doctrine.DEBUG: Executing statement: INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?) (parameters: array{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:1:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"default","4":"2024-01-10 13:21:14","5":"2024-01-10 13:21:14"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?)","params":{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:1:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"default","4":"2024-01-10 13:21:14","5":"2024-01-10 13:21:14"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2024-01-10T13:21:14.799676+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:21:14.799839+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:21:14.799972+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:21:14.800059+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:21:14.800140+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:21:14.800262+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:21:14.802436+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:21:14.802572+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:21:14.802767+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:21:14.802879+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:21:14.803734+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:21:14.805064+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:21:14.805402+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:21:14.807506+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:21:14.807776+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:21:14.809542+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:21:14.809830+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:21:14.812398+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:21:14.812773+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:21:14.815322+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:21:14.818002+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:21:14.818366+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:21:14.820547+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:21:14.822054+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:21:14.836842+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:21:14.836946+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:21:14.851484+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:21:14.854343+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:21:14.854449+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:21:14.854486+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:21:14.854515+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:21:14.854902+00:00] request.INFO: Matched route "newsletters_list". {"route":"newsletters_list","route_parameters":{"_route":"newsletters_list","_controller":"App\\Controller\\NewslettersController::list"},"request_uri":"http://localhost:8001/newsletters/list","method":"GET"} []
[2024-01-10T13:21:14.856668+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:21:14.857614+00:00] doctrine.DEBUG: Executing query: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0"} []
[2024-01-10T13:21:14.859644+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:21:14.860509+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:21:14.861940+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:21:14.862015+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:21:14.862073+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:21:14.862114+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:21:14.862152+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:21:14.862202+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:21:14.862718+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:21:14.862799+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:21:14.862889+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:21:14.862963+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:21:14.863353+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:21:14.863807+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:21:14.864085+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:21:14.865498+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:21:14.865695+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:21:14.867009+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:21:14.867191+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:21:14.868627+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:21:14.868850+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:21:14.870570+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:21:14.873127+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:21:14.873416+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:21:14.874515+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:21:14.875359+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:21:14.890169+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:21:14.890302+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:21:14.914693+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:21:14.936564+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:21:14.936786+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:21:14.936852+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:21:14.936905+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:21:14.937579+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"bb0ce6"},"request_uri":"http://localhost:8001/_wdt/bb0ce6","method":"GET"} []
[2024-01-10T13:21:14.938717+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:21:14.939479+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:21:14.939823+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:21:14.939967+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:21:14.940043+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:21:14.940128+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:21:14.942072+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:21:14.942194+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:21:14.942302+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:21:14.942401+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:21:15.629339+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:21:15.630202+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:21:15.630683+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:21:15.631156+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:21:15.633763+00:00] request.INFO: Matched route "newsletters_send". {"route":"newsletters_send","route_parameters":{"_route":"newsletters_send","_controller":"App\\Controller\\NewslettersController::send","id":"1"},"request_uri":"http://localhost:8001/newsletters/send/1","method":"GET"} []
[2024-01-10T13:21:15.643689+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:21:15.647001+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ? (parameters: array{"1":"1"}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ?","params":{"1":"1"},"types":{"1":1}} []
[2024-01-10T13:21:15.657268+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:21:15.661262+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:21:15.666691+00:00] messenger.INFO: Sending message App\Message\SendNewsletterMessage with async sender using Symfony\Component\Messenger\Bridge\Doctrine\Transport\DoctrineTransport {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage","alias":"async","sender":"Symfony\\Component\\Messenger\\Bridge\\Doctrine\\Transport\\DoctrineTransport"} []
[2024-01-10T13:21:15.668279+00:00] doctrine.DEBUG: Executing statement: INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?) (parameters: array{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:1:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"default","4":"2024-01-10 13:21:15","5":"2024-01-10 13:21:15"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?)","params":{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:1:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"default","4":"2024-01-10 13:21:15","5":"2024-01-10 13:21:15"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2024-01-10T13:21:15.683100+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:21:15.684263+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:21:15.685399+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:21:15.685908+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:21:15.686334+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:21:15.686751+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:21:15.690543+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:21:15.691065+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:21:15.691587+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:21:15.691992+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:21:15.693498+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:21:15.695822+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:21:15.697378+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:21:15.704568+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:21:15.706319+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:21:15.714605+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:21:15.715464+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:21:15.720286+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:21:15.720978+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:21:15.723901+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:21:15.729836+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:21:15.731304+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:21:15.733961+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:21:15.735452+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:21:15.751924+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:21:15.752044+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:21:15.775454+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:21:15.778456+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:21:15.778580+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:21:15.778632+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:21:15.778689+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:21:15.779250+00:00] request.INFO: Matched route "newsletters_list". {"route":"newsletters_list","route_parameters":{"_route":"newsletters_list","_controller":"App\\Controller\\NewslettersController::list"},"request_uri":"http://localhost:8001/newsletters/list","method":"GET"} []
[2024-01-10T13:21:15.782448+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:21:15.783225+00:00] doctrine.DEBUG: Executing query: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0"} []
[2024-01-10T13:21:15.785323+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:21:15.786065+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:21:15.787844+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:21:15.787940+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:21:15.788025+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:21:15.788097+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:21:15.788161+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:21:15.788227+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:21:15.788821+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:21:15.788915+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:21:15.789000+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:21:15.789073+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:21:15.789407+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:21:15.789816+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:21:15.790094+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:21:15.791693+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:21:15.791932+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:21:15.793417+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:21:15.793737+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:21:15.795089+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:21:15.795316+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:21:15.797080+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:21:15.800003+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:21:15.800220+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:21:15.801607+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:21:15.802478+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:21:15.817830+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:21:15.817953+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:21:15.840290+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:21:15.856903+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:21:15.857073+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:21:15.857136+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:21:15.857210+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:21:15.857838+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"2ce152"},"request_uri":"http://localhost:8001/_wdt/2ce152","method":"GET"} []
[2024-01-10T13:21:15.858783+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:21:15.858902+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:21:15.858986+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:21:15.859059+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:21:15.859128+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:21:15.859205+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:21:15.860589+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:21:15.860745+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:21:15.860855+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:21:15.860934+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:21:17.474284+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:21:17.474961+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:21:17.475177+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:21:17.475340+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:21:17.478816+00:00] request.INFO: Matched route "newsletters_list". {"route":"newsletters_list","route_parameters":{"_route":"newsletters_list","_controller":"App\\Controller\\NewslettersController::list"},"request_uri":"http://localhost:8001/newsletters/list","method":"GET"} []
[2024-01-10T13:21:17.503718+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:21:17.507630+00:00] doctrine.DEBUG: Executing query: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0"} []
[2024-01-10T13:21:17.518924+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:21:17.521578+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:21:17.525447+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:21:17.525621+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:21:17.525771+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:21:17.525923+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:21:17.526062+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:21:17.526225+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:21:17.527379+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:21:17.527532+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:21:17.527788+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:21:17.527914+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:21:17.528638+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:21:17.529793+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:21:17.530308+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:21:17.532969+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:21:17.533425+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:21:17.535512+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:21:17.535879+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:21:17.537845+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:21:17.538226+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:21:17.541149+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:21:17.544713+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:21:17.545121+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:21:17.547608+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:21:17.549783+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:21:17.573112+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:21:17.573274+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:21:17.600251+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:21:17.615057+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:21:17.615237+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:21:17.615299+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:21:17.615347+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:21:17.615944+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"9298df"},"request_uri":"http://localhost:8001/_wdt/9298df","method":"GET"} []
[2024-01-10T13:21:17.617036+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:21:17.617154+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:21:17.617249+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:21:17.617321+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:21:17.617394+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:21:17.617463+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:21:17.618823+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:21:17.618940+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:21:17.619041+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:21:17.619113+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:23:41.122967+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:23:41.123084+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:23:41.123132+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:23:41.123174+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:23:41.123219+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:23:41.123258+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:23:41.123296+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:23:41.123332+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:23:41.124209+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Routing\RouteCollection::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Routing\\RouteCollection::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/routing/RouteCollection.php:59)"} []
[2024-01-10T13:23:41.124293+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Routing\RouteCollection::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Routing\\RouteCollection::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/routing/RouteCollection.php:69)"} []
[2024-01-10T13:23:41.134639+00:00] request.INFO: Matched route "newsletters_send". {"route":"newsletters_send","route_parameters":{"_route":"newsletters_send","_controller":"App\\Controller\\NewslettersController::send","id":"1"},"request_uri":"http://localhost:8001/newsletters/send/1","method":"GET"} []
[2024-01-10T13:23:41.137991+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:23:41.138910+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ? (parameters: array{"1":"1"}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ?","params":{"1":"1"},"types":{"1":1}} []
[2024-01-10T13:23:41.141926+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:23:41.142744+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:23:41.144624+00:00] messenger.INFO: Sending message App\Message\SendNewsletterMessage with async sender using Symfony\Component\Messenger\Bridge\Doctrine\Transport\DoctrineTransport {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage","alias":"async","sender":"Symfony\\Component\\Messenger\\Bridge\\Doctrine\\Transport\\DoctrineTransport"} []
[2024-01-10T13:23:41.144808+00:00] doctrine.DEBUG: Executing statement: INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?) (parameters: array{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:1:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"default","4":"2024-01-10 13:23:41","5":"2024-01-10 13:23:41"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?)","params":{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:1:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"default","4":"2024-01-10 13:23:41","5":"2024-01-10 13:23:41"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2024-01-10T13:23:41.151609+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:23:41.151710+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:23:41.151780+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:23:41.151842+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:23:41.151920+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:23:41.151987+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:23:41.153305+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:23:41.154230+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:23:41.154515+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:23:41.155777+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:23:41.155980+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:23:41.157297+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:23:41.157510+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:23:41.158818+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:23:41.158990+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:23:41.160402+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:23:41.162742+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:23:41.162969+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:23:41.164131+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:23:41.165165+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:23:41.198922+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:23:41.205320+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:23:41.205426+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:23:41.205462+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:23:41.205489+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:23:41.206030+00:00] request.INFO: Matched route "newsletters_list". {"route":"newsletters_list","route_parameters":{"_route":"newsletters_list","_controller":"App\\Controller\\NewslettersController::list"},"request_uri":"http://localhost:8001/newsletters/list","method":"GET"} []
[2024-01-10T13:23:41.211427+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:23:41.212043+00:00] doctrine.DEBUG: Executing query: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0"} []
[2024-01-10T13:23:41.214151+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:23:41.214999+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:23:41.216558+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:23:41.216666+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:23:41.216739+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:23:41.216806+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:23:41.216883+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:23:41.216949+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:23:41.217735+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:23:41.217812+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:23:41.217886+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:23:41.217947+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:23:41.218268+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:23:41.218948+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:23:41.219178+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:23:41.220481+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:23:41.220644+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:23:41.221477+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:23:41.221646+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:23:41.222508+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:23:41.222693+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:23:41.224143+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:23:41.226339+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:23:41.226553+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:23:41.227757+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:23:41.228587+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:23:41.243559+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:23:41.243663+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:23:41.301364+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:23:41.325683+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:23:41.325843+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:23:41.325895+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:23:41.325936+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:23:41.326823+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"afd8ed"},"request_uri":"http://localhost:8001/_wdt/afd8ed","method":"GET"} []
[2024-01-10T13:23:41.337664+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:23:41.337787+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:23:41.337856+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:23:41.337913+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:23:41.337966+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:23:41.338019+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:23:41.340066+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:23:41.340189+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:23:41.340261+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:23:41.340314+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:23:44.049392+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:23:44.049537+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:23:44.049595+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:23:44.049657+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:23:44.050786+00:00] request.INFO: Matched route "newsletters_list". {"route":"newsletters_list","route_parameters":{"_route":"newsletters_list","_controller":"App\\Controller\\NewslettersController::list"},"request_uri":"http://localhost:8001/newsletters/list","method":"GET"} []
[2024-01-10T13:23:44.060091+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:23:44.061040+00:00] doctrine.DEBUG: Executing query: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0"} []
[2024-01-10T13:23:44.063066+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:23:44.063862+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:23:44.065549+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:23:44.065634+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:23:44.065682+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:23:44.065724+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:23:44.065762+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:23:44.065799+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:23:44.066787+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:23:44.066857+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:23:44.066941+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:23:44.066984+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:23:44.067265+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:23:44.068273+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:23:44.068579+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:23:44.069520+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:23:44.069711+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:23:44.070710+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:23:44.070895+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:23:44.071834+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:23:44.072025+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:23:44.073224+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:23:44.076130+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:23:44.076389+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:23:44.077871+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:23:44.078919+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:23:44.093279+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:23:44.093412+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:23:44.118933+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:23:44.137119+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:23:44.137401+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:23:44.137548+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:23:44.137698+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:23:44.138503+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"c05147"},"request_uri":"http://localhost:8001/_wdt/c05147","method":"GET"} []
[2024-01-10T13:23:44.140457+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:23:44.140720+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:23:44.140913+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:23:44.141068+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:23:44.141220+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:23:44.141350+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:23:44.142913+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:23:44.143152+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:23:44.143380+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:23:44.143545+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:24:13.992516+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:24:13.993563+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:24:13.993875+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:24:13.994119+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:24:13.998313+00:00] request.INFO: Matched route "newsletters_send". {"route":"newsletters_send","route_parameters":{"_route":"newsletters_send","_controller":"App\\Controller\\NewslettersController::send","id":"1"},"request_uri":"http://localhost:8001/newsletters/send/1","method":"GET"} []
[2024-01-10T13:24:14.018847+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:24:14.020967+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ? (parameters: array{"1":"1"}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ?","params":{"1":"1"},"types":{"1":1}} []
[2024-01-10T13:24:14.026443+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:24:14.027908+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:24:14.031148+00:00] messenger.INFO: Sending message App\Message\SendNewsletterMessage with async sender using Symfony\Component\Messenger\Bridge\Doctrine\Transport\DoctrineTransport {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage","alias":"async","sender":"Symfony\\Component\\Messenger\\Bridge\\Doctrine\\Transport\\DoctrineTransport"} []
[2024-01-10T13:24:14.031445+00:00] doctrine.DEBUG: Executing statement: INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?) (parameters: array{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:1:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"default","4":"2024-01-10 13:24:14","5":"2024-01-10 13:24:14"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?)","params":{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:1:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"default","4":"2024-01-10 13:24:14","5":"2024-01-10 13:24:14"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2024-01-10T13:24:14.037406+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:24:14.037590+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:24:14.037714+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:24:14.037836+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:24:14.037941+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:24:14.038051+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:24:14.039307+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:24:14.039468+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:24:14.039690+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:24:14.039824+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:24:14.040607+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:24:14.041883+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:24:14.042322+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:24:14.044273+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:24:14.044635+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:24:14.046291+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:24:14.046655+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:24:14.048243+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:24:14.048568+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:24:14.050541+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:24:14.054342+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:24:14.054684+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:24:14.056774+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:24:14.058477+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:24:14.078062+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:24:14.078202+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:24:14.097616+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:24:14.101607+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:24:14.101730+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:24:14.101803+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:24:14.101854+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:24:14.102359+00:00] request.INFO: Matched route "newsletters_list". {"route":"newsletters_list","route_parameters":{"_route":"newsletters_list","_controller":"App\\Controller\\NewslettersController::list"},"request_uri":"http://localhost:8001/newsletters/list","method":"GET"} []
[2024-01-10T13:24:14.104310+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:24:14.105062+00:00] doctrine.DEBUG: Executing query: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0"} []
[2024-01-10T13:24:14.107367+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:24:14.108178+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:24:14.109587+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:24:14.109739+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:24:14.109806+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:24:14.109878+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:24:14.109936+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:24:14.109993+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:24:14.110558+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:24:14.110620+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:24:14.110669+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:24:14.110707+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:24:14.111013+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:24:14.111334+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:24:14.111637+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:24:14.112717+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:24:14.113025+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:24:14.113997+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:24:14.114307+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:24:14.115269+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:24:14.115464+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:24:14.116980+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:24:14.119574+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:24:14.119873+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:24:14.120936+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:24:14.121714+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:24:14.136629+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:24:14.136741+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:24:14.158583+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:24:14.176435+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:24:14.176604+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:24:14.176677+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:24:14.176725+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:24:14.177323+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"9d14ed"},"request_uri":"http://localhost:8001/_wdt/9d14ed","method":"GET"} []
[2024-01-10T13:24:14.178825+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:24:14.178947+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:24:14.179058+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:24:14.179162+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:24:14.179265+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:24:14.179341+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:24:14.180820+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:24:14.180951+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:24:14.181037+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:24:14.181130+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:24:50.850428+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:24:50.850611+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:24:50.850658+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:24:50.850694+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:24:50.850728+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:24:50.850772+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:24:50.850806+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:24:50.850837+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:24:50.851777+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Routing\RouteCollection::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Routing\\RouteCollection::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/routing/RouteCollection.php:59)"} []
[2024-01-10T13:24:50.851858+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Routing\RouteCollection::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Routing\\RouteCollection::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/routing/RouteCollection.php:69)"} []
[2024-01-10T13:24:50.863156+00:00] request.INFO: Matched route "newsletters_send". {"route":"newsletters_send","route_parameters":{"_route":"newsletters_send","_controller":"App\\Controller\\NewslettersController::send","id":"1"},"request_uri":"http://localhost:8001/newsletters/send/1","method":"GET"} []
[2024-01-10T13:24:50.867356+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:24:50.868330+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ? (parameters: array{"1":"1"}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ?","params":{"1":"1"},"types":{"1":1}} []
[2024-01-10T13:24:50.872243+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:24:50.873181+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:24:50.875070+00:00] messenger.INFO: Sending message App\Message\SendNewsletterMessage with async sender using Symfony\Component\Messenger\Bridge\Doctrine\Transport\DoctrineTransport {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage","alias":"async","sender":"Symfony\\Component\\Messenger\\Bridge\\Doctrine\\Transport\\DoctrineTransport"} []
[2024-01-10T13:24:50.875295+00:00] doctrine.DEBUG: Executing statement: INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?) (parameters: array{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:1:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"default","4":"2024-01-10 13:24:50","5":"2024-01-10 13:24:50"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?)","params":{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:1:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"default","4":"2024-01-10 13:24:50","5":"2024-01-10 13:24:50"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2024-01-10T13:24:50.881562+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:24:50.881657+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:24:50.881731+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:24:50.881789+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:24:50.881856+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:24:50.881936+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:24:50.883526+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:24:50.884602+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:24:50.884890+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:24:50.886136+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:24:50.886391+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:24:50.887523+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:24:50.887753+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:24:50.888705+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:24:50.888890+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:24:50.889995+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:24:50.891697+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:24:50.891903+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:24:50.893115+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:24:50.894490+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:24:50.933276+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:24:50.943057+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:24:50.943192+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:24:50.943238+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:24:50.943274+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:24:50.944207+00:00] request.INFO: Matched route "newsletters_list". {"route":"newsletters_list","route_parameters":{"_route":"newsletters_list","_controller":"App\\Controller\\NewslettersController::list"},"request_uri":"http://localhost:8001/newsletters/list","method":"GET"} []
[2024-01-10T13:24:50.949634+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:24:50.950390+00:00] doctrine.DEBUG: Executing query: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0"} []
[2024-01-10T13:24:50.952747+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:24:50.954088+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:24:50.955822+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:24:50.955909+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:24:50.955970+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:24:50.956028+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:24:50.956080+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:24:50.956130+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:24:50.956925+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:24:50.957002+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:24:50.957075+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:24:50.957132+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:24:50.957440+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:24:50.958131+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:24:50.958393+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:24:50.959291+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:24:50.959509+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:24:50.960419+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:24:50.960669+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:24:50.961554+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:24:50.961757+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:24:50.962809+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:24:50.964440+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:24:50.964670+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:24:50.965652+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:24:50.966431+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:24:50.979653+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:24:50.979755+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:24:51.000247+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:24:51.044331+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:24:51.044562+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:24:51.044627+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:24:51.044689+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:24:51.054466+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"b43d27"},"request_uri":"http://localhost:8001/_wdt/b43d27","method":"GET"} []
[2024-01-10T13:24:51.058411+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:24:51.058540+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:24:51.058621+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:24:51.058707+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:24:51.058759+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:24:51.058800+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:24:51.061248+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:24:51.061350+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:24:51.061520+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:24:51.062002+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:25:09.320870+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:25:09.321668+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:25:09.321703+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:25:09.321728+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:25:09.321751+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Console\Helper\HelperSet::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Console\\Helper\\HelperSet::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Helper/HelperSet.php:94)"} []
[2024-01-10T13:25:09.340826+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:25:09.342950+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:09.349331+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:09","2":"2024-01-10 13:25:09","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:09","2":"2024-01-10 13:25:09","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:09.351107+00:00] doctrine.DEBUG: Executing statement: UPDATE messenger_messages SET delivered_at = ? WHERE id = ? (parameters: array{"1":"2024-01-10 13:25:09","2":1}, types: array{"1":2,"2":2}) {"sql":"UPDATE messenger_messages SET delivered_at = ? WHERE id = ?","params":{"1":"2024-01-10 13:25:09","2":1},"types":{"1":2,"2":2}} []
[2024-01-10T13:25:09.351757+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:09.360158+00:00] messenger.INFO: Received message App\Message\SendNewsletterMessage {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage"} []
[2024-01-10T13:25:09.402824+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:25:09.412604+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ? (parameters: array{"1":1}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ?","params":{"1":1},"types":{"1":1}} []
[2024-01-10T13:25:12.452767+00:00] app.DEBUG: Email transport "Symfony\Component\Mailer\Transport\Smtp\SmtpTransport" starting [] []
[2024-01-10T13:25:12.566416+00:00] app.DEBUG: Email transport "Symfony\Component\Mailer\Transport\Smtp\SmtpTransport" started [] []
[2024-01-10T13:25:12.614183+00:00] messenger.INFO: Message Symfony\Component\Mailer\Messenger\SendEmailMessage handled by Symfony\Component\Mailer\Messenger\MessageHandler::__invoke {"message":{"Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage":[]},"class":"Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage","handler":"Symfony\\Component\\Mailer\\Messenger\\MessageHandler::__invoke"} []
[2024-01-10T13:25:12.614417+00:00] messenger.INFO: Message App\Message\SendNewsletterMessage handled by App\MessageHandler\SendNewsletterMessageHandler::__invoke {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage","handler":"App\\MessageHandler\\SendNewsletterMessageHandler::__invoke"} []
[2024-01-10T13:25:12.615100+00:00] messenger.INFO: App\Message\SendNewsletterMessage was handled successfully (acknowledging to transport). {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage"} []
[2024-01-10T13:25:12.615225+00:00] doctrine.DEBUG: Executing statement: DELETE FROM messenger_messages WHERE id = ? (parameters: array{"1":"1"}, types: array{"1":2}) {"sql":"DELETE FROM messenger_messages WHERE id = ?","params":{"1":"1"},"types":{"1":2}} []
[2024-01-10T13:25:12.623396+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:12.623737+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:12","2":"2024-01-10 13:25:12","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:12","2":"2024-01-10 13:25:12","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:12.624611+00:00] doctrine.DEBUG: Executing statement: UPDATE messenger_messages SET delivered_at = ? WHERE id = ? (parameters: array{"1":"2024-01-10 13:25:12","2":2}, types: array{"1":2,"2":2}) {"sql":"UPDATE messenger_messages SET delivered_at = ? WHERE id = ?","params":{"1":"2024-01-10 13:25:12","2":2},"types":{"1":2,"2":2}} []
[2024-01-10T13:25:12.625116+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:12.630723+00:00] messenger.INFO: Received message App\Message\SendNewsletterMessage {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage"} []
[2024-01-10T13:25:12.631115+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:25:12.631810+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ? (parameters: array{"1":1}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ?","params":{"1":1},"types":{"1":1}} []
[2024-01-10T13:25:15.685993+00:00] messenger.INFO: Message Symfony\Component\Mailer\Messenger\SendEmailMessage handled by Symfony\Component\Mailer\Messenger\MessageHandler::__invoke {"message":{"Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage":[]},"class":"Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage","handler":"Symfony\\Component\\Mailer\\Messenger\\MessageHandler::__invoke"} []
[2024-01-10T13:25:15.686192+00:00] messenger.INFO: Message App\Message\SendNewsletterMessage handled by App\MessageHandler\SendNewsletterMessageHandler::__invoke {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage","handler":"App\\MessageHandler\\SendNewsletterMessageHandler::__invoke"} []
[2024-01-10T13:25:15.686385+00:00] messenger.INFO: App\Message\SendNewsletterMessage was handled successfully (acknowledging to transport). {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage"} []
[2024-01-10T13:25:15.686487+00:00] doctrine.DEBUG: Executing statement: DELETE FROM messenger_messages WHERE id = ? (parameters: array{"1":"2"}, types: array{"1":2}) {"sql":"DELETE FROM messenger_messages WHERE id = ?","params":{"1":"2"},"types":{"1":2}} []
[2024-01-10T13:25:15.692650+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:15.693147+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:15","2":"2024-01-10 13:25:15","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:15","2":"2024-01-10 13:25:15","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:15.694068+00:00] doctrine.DEBUG: Executing statement: UPDATE messenger_messages SET delivered_at = ? WHERE id = ? (parameters: array{"1":"2024-01-10 13:25:15","2":3}, types: array{"1":2,"2":2}) {"sql":"UPDATE messenger_messages SET delivered_at = ? WHERE id = ?","params":{"1":"2024-01-10 13:25:15","2":3},"types":{"1":2,"2":2}} []
[2024-01-10T13:25:15.694928+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:15.698003+00:00] messenger.INFO: Received message App\Message\SendNewsletterMessage {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage"} []
[2024-01-10T13:25:15.698234+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:25:15.699635+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ? (parameters: array{"1":1}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ?","params":{"1":1},"types":{"1":1}} []
[2024-01-10T13:25:18.754621+00:00] messenger.INFO: Message Symfony\Component\Mailer\Messenger\SendEmailMessage handled by Symfony\Component\Mailer\Messenger\MessageHandler::__invoke {"message":{"Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage":[]},"class":"Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage","handler":"Symfony\\Component\\Mailer\\Messenger\\MessageHandler::__invoke"} []
[2024-01-10T13:25:18.755063+00:00] messenger.INFO: Message App\Message\SendNewsletterMessage handled by App\MessageHandler\SendNewsletterMessageHandler::__invoke {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage","handler":"App\\MessageHandler\\SendNewsletterMessageHandler::__invoke"} []
[2024-01-10T13:25:18.755584+00:00] messenger.INFO: App\Message\SendNewsletterMessage was handled successfully (acknowledging to transport). {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage"} []
[2024-01-10T13:25:18.755911+00:00] doctrine.DEBUG: Executing statement: DELETE FROM messenger_messages WHERE id = ? (parameters: array{"1":"3"}, types: array{"1":2}) {"sql":"DELETE FROM messenger_messages WHERE id = ?","params":{"1":"3"},"types":{"1":2}} []
[2024-01-10T13:25:18.765597+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:18.767437+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:18","2":"2024-01-10 13:25:18","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:18","2":"2024-01-10 13:25:18","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:18.771124+00:00] doctrine.DEBUG: Executing statement: UPDATE messenger_messages SET delivered_at = ? WHERE id = ? (parameters: array{"1":"2024-01-10 13:25:18","2":4}, types: array{"1":2,"2":2}) {"sql":"UPDATE messenger_messages SET delivered_at = ? WHERE id = ?","params":{"1":"2024-01-10 13:25:18","2":4},"types":{"1":2,"2":2}} []
[2024-01-10T13:25:18.772988+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:18.779167+00:00] messenger.INFO: Received message App\Message\SendNewsletterMessage {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage"} []
[2024-01-10T13:25:18.780869+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:25:18.782688+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ? (parameters: array{"1":1}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ?","params":{"1":1},"types":{"1":1}} []
[2024-01-10T13:25:21.838244+00:00] messenger.INFO: Message Symfony\Component\Mailer\Messenger\SendEmailMessage handled by Symfony\Component\Mailer\Messenger\MessageHandler::__invoke {"message":{"Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage":[]},"class":"Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage","handler":"Symfony\\Component\\Mailer\\Messenger\\MessageHandler::__invoke"} []
[2024-01-10T13:25:21.838824+00:00] messenger.INFO: Message App\Message\SendNewsletterMessage handled by App\MessageHandler\SendNewsletterMessageHandler::__invoke {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage","handler":"App\\MessageHandler\\SendNewsletterMessageHandler::__invoke"} []
[2024-01-10T13:25:21.839487+00:00] messenger.INFO: App\Message\SendNewsletterMessage was handled successfully (acknowledging to transport). {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage"} []
[2024-01-10T13:25:21.839894+00:00] doctrine.DEBUG: Executing statement: DELETE FROM messenger_messages WHERE id = ? (parameters: array{"1":"4"}, types: array{"1":2}) {"sql":"DELETE FROM messenger_messages WHERE id = ?","params":{"1":"4"},"types":{"1":2}} []
[2024-01-10T13:25:21.848832+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:21.850079+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:21","2":"2024-01-10 13:25:21","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:21","2":"2024-01-10 13:25:21","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:21.852601+00:00] doctrine.DEBUG: Executing statement: UPDATE messenger_messages SET delivered_at = ? WHERE id = ? (parameters: array{"1":"2024-01-10 13:25:21","2":5}, types: array{"1":2,"2":2}) {"sql":"UPDATE messenger_messages SET delivered_at = ? WHERE id = ?","params":{"1":"2024-01-10 13:25:21","2":5},"types":{"1":2,"2":2}} []
[2024-01-10T13:25:21.855006+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:21.874226+00:00] messenger.INFO: Received message App\Message\SendNewsletterMessage {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage"} []
[2024-01-10T13:25:21.875107+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:25:21.877146+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ? (parameters: array{"1":1}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ?","params":{"1":1},"types":{"1":1}} []
[2024-01-10T13:25:24.976882+00:00] messenger.INFO: Message Symfony\Component\Mailer\Messenger\SendEmailMessage handled by Symfony\Component\Mailer\Messenger\MessageHandler::__invoke {"message":{"Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage":[]},"class":"Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage","handler":"Symfony\\Component\\Mailer\\Messenger\\MessageHandler::__invoke"} []
[2024-01-10T13:25:24.977098+00:00] messenger.INFO: Message App\Message\SendNewsletterMessage handled by App\MessageHandler\SendNewsletterMessageHandler::__invoke {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage","handler":"App\\MessageHandler\\SendNewsletterMessageHandler::__invoke"} []
[2024-01-10T13:25:24.977339+00:00] messenger.INFO: App\Message\SendNewsletterMessage was handled successfully (acknowledging to transport). {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage"} []
[2024-01-10T13:25:24.977480+00:00] doctrine.DEBUG: Executing statement: DELETE FROM messenger_messages WHERE id = ? (parameters: array{"1":"5"}, types: array{"1":2}) {"sql":"DELETE FROM messenger_messages WHERE id = ?","params":{"1":"5"},"types":{"1":2}} []
[2024-01-10T13:25:24.983827+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:24.984273+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:24","2":"2024-01-10 13:25:24","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:24","2":"2024-01-10 13:25:24","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:24.985111+00:00] doctrine.DEBUG: Executing statement: UPDATE messenger_messages SET delivered_at = ? WHERE id = ? (parameters: array{"1":"2024-01-10 13:25:24","2":6}, types: array{"1":2,"2":2}) {"sql":"UPDATE messenger_messages SET delivered_at = ? WHERE id = ?","params":{"1":"2024-01-10 13:25:24","2":6},"types":{"1":2,"2":2}} []
[2024-01-10T13:25:24.985821+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:24.989288+00:00] messenger.INFO: Received message App\Message\SendNewsletterMessage {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage"} []
[2024-01-10T13:25:24.989483+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:25:24.989936+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ? (parameters: array{"1":1}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ?","params":{"1":1},"types":{"1":1}} []
[2024-01-10T13:25:28.046515+00:00] messenger.INFO: Message Symfony\Component\Mailer\Messenger\SendEmailMessage handled by Symfony\Component\Mailer\Messenger\MessageHandler::__invoke {"message":{"Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage":[]},"class":"Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage","handler":"Symfony\\Component\\Mailer\\Messenger\\MessageHandler::__invoke"} []
[2024-01-10T13:25:28.046976+00:00] messenger.INFO: Message App\Message\SendNewsletterMessage handled by App\MessageHandler\SendNewsletterMessageHandler::__invoke {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage","handler":"App\\MessageHandler\\SendNewsletterMessageHandler::__invoke"} []
[2024-01-10T13:25:28.047637+00:00] messenger.INFO: App\Message\SendNewsletterMessage was handled successfully (acknowledging to transport). {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage"} []
[2024-01-10T13:25:28.048016+00:00] doctrine.DEBUG: Executing statement: DELETE FROM messenger_messages WHERE id = ? (parameters: array{"1":"6"}, types: array{"1":2}) {"sql":"DELETE FROM messenger_messages WHERE id = ?","params":{"1":"6"},"types":{"1":2}} []
[2024-01-10T13:25:28.056950+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:28.058787+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:28","2":"2024-01-10 13:25:28","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:28","2":"2024-01-10 13:25:28","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:28.061126+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:29.062917+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:29.064431+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:29","2":"2024-01-10 13:25:29","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:29","2":"2024-01-10 13:25:29","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:29.066129+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:30.067403+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:30.068457+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:30","2":"2024-01-10 13:25:30","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:30","2":"2024-01-10 13:25:30","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:30.070075+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:31.071298+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:31.072667+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:31","2":"2024-01-10 13:25:31","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:31","2":"2024-01-10 13:25:31","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:31.074691+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:32.076256+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:32.077703+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:32","2":"2024-01-10 13:25:32","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:32","2":"2024-01-10 13:25:32","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:32.079543+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:33.081159+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:33.082454+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:33","2":"2024-01-10 13:25:33","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:33","2":"2024-01-10 13:25:33","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:33.083971+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:34.085158+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:34.086176+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:34","2":"2024-01-10 13:25:34","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:34","2":"2024-01-10 13:25:34","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:34.087658+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:35.088835+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:35.089889+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:35","2":"2024-01-10 13:25:35","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:35","2":"2024-01-10 13:25:35","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:35.091739+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:36.093093+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:36.094084+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:36","2":"2024-01-10 13:25:36","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:36","2":"2024-01-10 13:25:36","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:36.095764+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:37.097096+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:37.098491+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:37","2":"2024-01-10 13:25:37","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:37","2":"2024-01-10 13:25:37","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:37.100913+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:38.102468+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:38.103749+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:38","2":"2024-01-10 13:25:38","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:38","2":"2024-01-10 13:25:38","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:38.105677+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:39.106983+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:39.108604+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:39","2":"2024-01-10 13:25:39","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:39","2":"2024-01-10 13:25:39","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:39.110521+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:40.112189+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:40.113075+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:40","2":"2024-01-10 13:25:40","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:40","2":"2024-01-10 13:25:40","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:40.114444+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:41.115574+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:41.116529+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:41","2":"2024-01-10 13:25:41","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:41","2":"2024-01-10 13:25:41","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:41.117823+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:42.118797+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:42.119672+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:42","2":"2024-01-10 13:25:42","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:42","2":"2024-01-10 13:25:42","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:42.121286+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:43.122522+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:43.123589+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:43","2":"2024-01-10 13:25:43","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:43","2":"2024-01-10 13:25:43","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:43.125255+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:44.126298+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:44.127118+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:44","2":"2024-01-10 13:25:44","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:44","2":"2024-01-10 13:25:44","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:44.128511+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:45.129557+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:45.130143+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:45","2":"2024-01-10 13:25:45","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:45","2":"2024-01-10 13:25:45","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:45.130799+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:46.131362+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:46.131937+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:46","2":"2024-01-10 13:25:46","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:46","2":"2024-01-10 13:25:46","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:46.132955+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:47.133777+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:47.135774+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:47","2":"2024-01-10 13:25:47","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:47","2":"2024-01-10 13:25:47","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:47.139211+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:48.141465+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:48.142873+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:48","2":"2024-01-10 13:25:48","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:48","2":"2024-01-10 13:25:48","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:48.144997+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:49.146331+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:49.146865+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:49","2":"2024-01-10 13:25:49","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:49","2":"2024-01-10 13:25:49","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:49.147620+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:50.148222+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:50.149161+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:50","2":"2024-01-10 13:25:50","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:50","2":"2024-01-10 13:25:50","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:50.150346+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:51.151330+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:51.152015+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:51","2":"2024-01-10 13:25:51","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:51","2":"2024-01-10 13:25:51","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:51.153107+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:52.154429+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:52.156585+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:52","2":"2024-01-10 13:25:52","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:52","2":"2024-01-10 13:25:52","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:52.159289+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:53.161276+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:53.161604+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:53","2":"2024-01-10 13:25:53","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:53","2":"2024-01-10 13:25:53","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:53.162087+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:54.162559+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:54.165265+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:54","2":"2024-01-10 13:25:54","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:54","2":"2024-01-10 13:25:54","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:54.168144+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:55.170572+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:55.172124+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:55","2":"2024-01-10 13:25:55","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:55","2":"2024-01-10 13:25:55","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:55.174177+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:56.175445+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:56.175972+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:56","2":"2024-01-10 13:25:56","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:56","2":"2024-01-10 13:25:56","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:56.176821+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:57.177539+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:57.178707+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:57","2":"2024-01-10 13:25:57","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:57","2":"2024-01-10 13:25:57","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:57.180783+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:58.182143+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:58.182473+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:58","2":"2024-01-10 13:25:58","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:58","2":"2024-01-10 13:25:58","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:58.182921+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:59.183392+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:59.184691+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:59","2":"2024-01-10 13:25:59","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:59","2":"2024-01-10 13:25:59","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:59.187152+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:00.189225+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:00.190576+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:00","2":"2024-01-10 13:26:00","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:00","2":"2024-01-10 13:26:00","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:00.193140+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:01.196522+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:01.197998+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:01","2":"2024-01-10 13:26:01","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:01","2":"2024-01-10 13:26:01","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:01.200261+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:02.201956+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:02.203782+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:02","2":"2024-01-10 13:26:02","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:02","2":"2024-01-10 13:26:02","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:02.206851+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:03.208951+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:03.210871+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:03","2":"2024-01-10 13:26:03","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:03","2":"2024-01-10 13:26:03","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:03.212875+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:04.214305+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:04.216315+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:04","2":"2024-01-10 13:26:04","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:04","2":"2024-01-10 13:26:04","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:04.218736+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:05.220731+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:05.222316+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:05","2":"2024-01-10 13:26:05","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:05","2":"2024-01-10 13:26:05","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:05.224306+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:06.226388+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:06.227228+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:06","2":"2024-01-10 13:26:06","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:06","2":"2024-01-10 13:26:06","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:06.228432+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:07.229261+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:07.229630+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:07","2":"2024-01-10 13:26:07","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:07","2":"2024-01-10 13:26:07","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:07.230172+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:07.442657+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:26:07.442773+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:26:07.442822+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:26:07.442863+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:26:07.442902+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:26:07.442940+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:26:07.442986+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:26:07.443024+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:26:07.443841+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Routing\RouteCollection::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Routing\\RouteCollection::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/routing/RouteCollection.php:59)"} []
[2024-01-10T13:26:07.443913+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Routing\RouteCollection::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Routing\\RouteCollection::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/routing/RouteCollection.php:69)"} []
[2024-01-10T13:26:07.455769+00:00] request.INFO: Matched route "newsletters_list". {"route":"newsletters_list","route_parameters":{"_route":"newsletters_list","_controller":"App\\Controller\\NewslettersController::list"},"request_uri":"http://localhost:8001/newsletters/list","method":"GET"} []
[2024-01-10T13:26:07.459404+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:26:07.460413+00:00] doctrine.DEBUG: Executing query: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0"} []
[2024-01-10T13:26:07.463031+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:26:07.463950+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:26:07.466244+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:26:07.466315+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:26:07.466361+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:26:07.466402+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:26:07.466447+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:26:07.466484+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:26:07.467423+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:26:07.468568+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:26:07.468867+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:26:07.470724+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:26:07.470974+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:26:07.472449+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:26:07.472640+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:26:07.474049+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:26:07.474250+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:26:07.475491+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:07.477262+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:26:07.477463+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:26:07.478468+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:26:07.479934+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:26:07.526704+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:26:07.568088+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:26:07.568247+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:26:07.568307+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:26:07.569984+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:26:07.571279+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"703d10"},"request_uri":"http://localhost:8001/_wdt/703d10","method":"GET"} []
[2024-01-10T13:26:07.574166+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:26:07.574281+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:26:07.574370+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:26:07.574439+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:26:07.574513+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:26:07.574601+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:26:07.577020+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:26:07.577162+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:26:07.577276+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:26:07.577369+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:26:08.230632+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:08.231634+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:08","2":"2024-01-10 13:26:08","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:08","2":"2024-01-10 13:26:08","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:08.233199+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:08.497324+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:26:08.497466+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:26:08.497531+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:26:08.497582+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:26:08.498295+00:00] request.INFO: Matched route "newsletters_send". {"route":"newsletters_send","route_parameters":{"_route":"newsletters_send","_controller":"App\\Controller\\NewslettersController::send","id":"1"},"request_uri":"http://localhost:8001/newsletters/send/1","method":"GET"} []
[2024-01-10T13:26:08.502047+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:26:08.502722+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ? (parameters: array{"1":"1"}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ?","params":{"1":"1"},"types":{"1":1}} []
[2024-01-10T13:26:08.505643+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:26:08.506552+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:26:08.508161+00:00] messenger.INFO: Sending message App\Message\SendNewsletterMessage with async sender using Symfony\Component\Messenger\Bridge\Doctrine\Transport\DoctrineTransport {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage","alias":"async","sender":"Symfony\\Component\\Messenger\\Bridge\\Doctrine\\Transport\\DoctrineTransport"} []
[2024-01-10T13:26:08.508392+00:00] doctrine.DEBUG: Executing statement: INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?) (parameters: array{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:1:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"default","4":"2024-01-10 13:26:08","5":"2024-01-10 13:26:08"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?)","params":{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:1:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"default","4":"2024-01-10 13:26:08","5":"2024-01-10 13:26:08"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2024-01-10T13:26:08.514916+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:26:08.514996+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:26:08.515080+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:26:08.515156+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:26:08.515225+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:26:08.515291+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:26:08.516350+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:26:08.516436+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:26:08.516502+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:26:08.516582+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:26:08.516948+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:26:08.517853+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:26:08.518186+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:26:08.519461+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:26:08.519749+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:26:08.521243+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:26:08.521533+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:26:08.522795+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:26:08.523012+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:26:08.524680+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:08.526612+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:26:08.526914+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:26:08.527945+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:26:08.528671+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:26:08.539775+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:26:08.539871+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:26:08.552926+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:26:08.561816+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:26:08.562009+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:26:08.562066+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:26:08.562113+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:26:08.563043+00:00] request.INFO: Matched route "newsletters_list". {"route":"newsletters_list","route_parameters":{"_route":"newsletters_list","_controller":"App\\Controller\\NewslettersController::list"},"request_uri":"http://localhost:8001/newsletters/list","method":"GET"} []
[2024-01-10T13:26:08.569472+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:26:08.574497+00:00] doctrine.DEBUG: Executing query: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0"} []
[2024-01-10T13:26:08.577153+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:26:08.579032+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:26:08.581315+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:26:08.581560+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:26:08.581749+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:26:08.581919+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:26:08.582076+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:26:08.582233+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:26:08.583302+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:26:08.583540+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:26:08.583723+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:26:08.583905+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:26:08.584447+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:26:08.585485+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:26:08.585999+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:26:08.587390+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:26:08.587645+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:26:08.589632+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:26:08.589934+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:26:08.591481+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:26:08.591784+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:26:08.593628+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:08.596221+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:26:08.596461+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:26:08.597606+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:26:08.598818+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:26:08.615073+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:26:08.615196+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:26:08.635655+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:26:08.680162+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:26:08.680456+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:26:08.680617+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:26:08.680754+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:26:08.681980+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"266fd3"},"request_uri":"http://localhost:8001/_wdt/266fd3","method":"GET"} []
[2024-01-10T13:26:08.683788+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:26:08.683888+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:26:08.683966+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:26:08.684047+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:26:08.684123+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:26:08.684198+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:26:08.686889+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:26:08.687154+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:26:08.687387+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:26:08.687590+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:26:09.234347+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:09.235131+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:09","2":"2024-01-10 13:26:09","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:09","2":"2024-01-10 13:26:09","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:09.236512+00:00] doctrine.DEBUG: Executing statement: UPDATE messenger_messages SET delivered_at = ? WHERE id = ? (parameters: array{"1":"2024-01-10 13:26:09","2":7}, types: array{"1":2,"2":2}) {"sql":"UPDATE messenger_messages SET delivered_at = ? WHERE id = ?","params":{"1":"2024-01-10 13:26:09","2":7},"types":{"1":2,"2":2}} []
[2024-01-10T13:26:09.237590+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:09.246857+00:00] messenger.INFO: Received message App\Message\SendNewsletterMessage {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage"} []
[2024-01-10T13:26:09.247238+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:26:09.248627+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ? (parameters: array{"1":1}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ?","params":{"1":1},"types":{"1":1}} []
[2024-01-10T13:26:12.302704+00:00] messenger.INFO: Message Symfony\Component\Mailer\Messenger\SendEmailMessage handled by Symfony\Component\Mailer\Messenger\MessageHandler::__invoke {"message":{"Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage":[]},"class":"Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage","handler":"Symfony\\Component\\Mailer\\Messenger\\MessageHandler::__invoke"} []
[2024-01-10T13:26:12.303295+00:00] messenger.INFO: Message App\Message\SendNewsletterMessage handled by App\MessageHandler\SendNewsletterMessageHandler::__invoke {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage","handler":"App\\MessageHandler\\SendNewsletterMessageHandler::__invoke"} []
[2024-01-10T13:26:12.304002+00:00] messenger.INFO: App\Message\SendNewsletterMessage was handled successfully (acknowledging to transport). {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage"} []
[2024-01-10T13:26:12.304342+00:00] doctrine.DEBUG: Executing statement: DELETE FROM messenger_messages WHERE id = ? (parameters: array{"1":"7"}, types: array{"1":2}) {"sql":"DELETE FROM messenger_messages WHERE id = ?","params":{"1":"7"},"types":{"1":2}} []
[2024-01-10T13:26:12.313069+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:12.319205+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:12","2":"2024-01-10 13:26:12","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:12","2":"2024-01-10 13:26:12","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:12.322705+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:13.326529+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:13.328044+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:13","2":"2024-01-10 13:26:13","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:13","2":"2024-01-10 13:26:13","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:13.330509+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:14.332608+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:14.333890+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:14","2":"2024-01-10 13:26:14","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:14","2":"2024-01-10 13:26:14","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:14.336056+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:15.337572+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:15.338676+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:15","2":"2024-01-10 13:26:15","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:15","2":"2024-01-10 13:26:15","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:15.340754+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:16.341864+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:16.342964+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:16","2":"2024-01-10 13:26:16","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:16","2":"2024-01-10 13:26:16","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:16.344529+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:17.345533+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:17.346262+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:17","2":"2024-01-10 13:26:17","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:17","2":"2024-01-10 13:26:17","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:17.347341+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:18.348633+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:18.349829+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:18","2":"2024-01-10 13:26:18","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:18","2":"2024-01-10 13:26:18","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:18.351618+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:19.353017+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:19.354356+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:19","2":"2024-01-10 13:26:19","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:19","2":"2024-01-10 13:26:19","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:19.356478+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:19.902808+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:26:19.903068+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:26:19.903155+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:26:19.903227+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:26:19.904831+00:00] request.INFO: Matched route "newsletters_send". {"route":"newsletters_send","route_parameters":{"_route":"newsletters_send","_controller":"App\\Controller\\NewslettersController::send","id":"1"},"request_uri":"http://localhost:8001/newsletters/send/1","method":"GET"} []
[2024-01-10T13:26:19.915360+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:26:19.916293+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ? (parameters: array{"1":"1"}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ?","params":{"1":"1"},"types":{"1":1}} []
[2024-01-10T13:26:19.920183+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:26:19.921349+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:26:19.924131+00:00] messenger.INFO: Sending message App\Message\SendNewsletterMessage with async sender using Symfony\Component\Messenger\Bridge\Doctrine\Transport\DoctrineTransport {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage","alias":"async","sender":"Symfony\\Component\\Messenger\\Bridge\\Doctrine\\Transport\\DoctrineTransport"} []
[2024-01-10T13:26:19.924333+00:00] doctrine.DEBUG: Executing statement: INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?) (parameters: array{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:1:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"default","4":"2024-01-10 13:26:19","5":"2024-01-10 13:26:19"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?)","params":{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:1:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"default","4":"2024-01-10 13:26:19","5":"2024-01-10 13:26:19"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2024-01-10T13:26:19.929569+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:26:19.929655+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:26:19.929725+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:26:19.929796+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:26:19.929891+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:26:19.929988+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:26:19.931682+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:26:19.931762+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:26:19.931886+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:26:19.931947+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:26:19.932338+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:26:19.933452+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:26:19.933750+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:26:19.935137+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:26:19.935406+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:26:19.936582+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:26:19.936860+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:26:19.937874+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:26:19.938152+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:26:19.939376+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:19.941390+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:26:19.941647+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:26:19.943135+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:26:19.943874+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:26:19.954594+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:26:19.954675+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:26:19.969641+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:26:19.972458+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:26:19.972563+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:26:19.972601+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:26:19.972629+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:26:19.973014+00:00] request.INFO: Matched route "newsletters_list". {"route":"newsletters_list","route_parameters":{"_route":"newsletters_list","_controller":"App\\Controller\\NewslettersController::list"},"request_uri":"http://localhost:8001/newsletters/list","method":"GET"} []
[2024-01-10T13:26:19.974949+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:26:19.975631+00:00] doctrine.DEBUG: Executing query: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0"} []
[2024-01-10T13:26:19.977722+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:26:19.978589+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:26:19.979990+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:26:19.980079+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:26:19.980147+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:26:19.980216+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:26:19.980283+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:26:19.980371+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:26:19.980918+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:26:19.980993+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:26:19.981066+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:26:19.981127+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:26:19.981443+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:26:19.981828+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:26:19.982065+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:26:19.983332+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:26:19.983593+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:26:19.985194+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:26:19.985447+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:26:19.986857+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:26:19.987034+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:26:19.988642+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:19.990331+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:26:19.990548+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:26:19.992074+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:26:19.993183+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:26:20.007537+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:26:20.007649+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:26:20.028287+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:26:20.049078+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:26:20.049237+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:26:20.049298+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:26:20.049349+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:26:20.050190+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"7df937"},"request_uri":"http://localhost:8001/_wdt/7df937","method":"GET"} []
[2024-01-10T13:26:20.051936+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:26:20.052063+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:26:20.052166+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:26:20.052239+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:26:20.052312+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:26:20.052401+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:26:20.054343+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:26:20.054452+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:26:20.054544+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:26:20.054604+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:26:20.358051+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:20.359240+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:20","2":"2024-01-10 13:26:20","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:20","2":"2024-01-10 13:26:20","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:20.361504+00:00] doctrine.DEBUG: Executing statement: UPDATE messenger_messages SET delivered_at = ? WHERE id = ? (parameters: array{"1":"2024-01-10 13:26:20","2":8}, types: array{"1":2,"2":2}) {"sql":"UPDATE messenger_messages SET delivered_at = ? WHERE id = ?","params":{"1":"2024-01-10 13:26:20","2":8},"types":{"1":2,"2":2}} []
[2024-01-10T13:26:20.363149+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:20.371336+00:00] messenger.INFO: Received message App\Message\SendNewsletterMessage {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage"} []
[2024-01-10T13:26:20.372248+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:26:20.374360+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ? (parameters: array{"1":1}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ?","params":{"1":1},"types":{"1":1}} []
[2024-01-10T13:26:23.433370+00:00] messenger.INFO: Message Symfony\Component\Mailer\Messenger\SendEmailMessage handled by Symfony\Component\Mailer\Messenger\MessageHandler::__invoke {"message":{"Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage":[]},"class":"Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage","handler":"Symfony\\Component\\Mailer\\Messenger\\MessageHandler::__invoke"} []
[2024-01-10T13:26:23.434430+00:00] messenger.INFO: Message App\Message\SendNewsletterMessage handled by App\MessageHandler\SendNewsletterMessageHandler::__invoke {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage","handler":"App\\MessageHandler\\SendNewsletterMessageHandler::__invoke"} []
[2024-01-10T13:26:23.436497+00:00] messenger.INFO: App\Message\SendNewsletterMessage was handled successfully (acknowledging to transport). {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage"} []
[2024-01-10T13:26:23.437220+00:00] doctrine.DEBUG: Executing statement: DELETE FROM messenger_messages WHERE id = ? (parameters: array{"1":"8"}, types: array{"1":2}) {"sql":"DELETE FROM messenger_messages WHERE id = ?","params":{"1":"8"},"types":{"1":2}} []
[2024-01-10T13:26:23.446619+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:23.447826+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:23","2":"2024-01-10 13:26:23","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:23","2":"2024-01-10 13:26:23","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:23.451395+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:24.452812+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:24.454104+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:24","2":"2024-01-10 13:26:24","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:24","2":"2024-01-10 13:26:24","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:24.455960+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:25.457107+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:25.457604+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:25","2":"2024-01-10 13:26:25","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:25","2":"2024-01-10 13:26:25","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:25.458457+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:26.459226+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:26.460435+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:26","2":"2024-01-10 13:26:26","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:26","2":"2024-01-10 13:26:26","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:26.462290+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:27.463607+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:27.464485+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:27","2":"2024-01-10 13:26:27","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:27","2":"2024-01-10 13:26:27","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:27.465839+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:28.466935+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:28.468240+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:28","2":"2024-01-10 13:26:28","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:28","2":"2024-01-10 13:26:28","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:28.470318+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:29.471446+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:29.471796+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:29","2":"2024-01-10 13:26:29","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:29","2":"2024-01-10 13:26:29","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:29.472316+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:30.472791+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:30.473187+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:30","2":"2024-01-10 13:26:30","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:30","2":"2024-01-10 13:26:30","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:30.473836+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:31.474499+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:31.475618+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:31","2":"2024-01-10 13:26:31","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:31","2":"2024-01-10 13:26:31","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:31.477374+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:32.479112+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:32.480433+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:32","2":"2024-01-10 13:26:32","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:32","2":"2024-01-10 13:26:32","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:32.482399+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:33.483823+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:33.484275+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:33","2":"2024-01-10 13:26:33","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:33","2":"2024-01-10 13:26:33","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:33.485044+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:34.485695+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:34.487114+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:34","2":"2024-01-10 13:26:34","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:34","2":"2024-01-10 13:26:34","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:34.489182+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:35.490670+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:35.491104+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:35","2":"2024-01-10 13:26:35","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:35","2":"2024-01-10 13:26:35","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:35.491636+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:36.492105+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:36.493568+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:36","2":"2024-01-10 13:26:36","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:36","2":"2024-01-10 13:26:36","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:36.495509+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:37.496885+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:37.497962+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:37","2":"2024-01-10 13:26:37","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:37","2":"2024-01-10 13:26:37","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:37.499407+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:38.500627+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:38.501749+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:38","2":"2024-01-10 13:26:38","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:38","2":"2024-01-10 13:26:38","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:38.503290+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:39.504522+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:39.505355+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:39","2":"2024-01-10 13:26:39","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:39","2":"2024-01-10 13:26:39","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:39.506704+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:40.508288+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:40.509611+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:40","2":"2024-01-10 13:26:40","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:40","2":"2024-01-10 13:26:40","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:40.510965+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:41.511938+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:41.512762+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:41","2":"2024-01-10 13:26:41","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:41","2":"2024-01-10 13:26:41","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:41.513896+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:42.514790+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:42.515879+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:42","2":"2024-01-10 13:26:42","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:42","2":"2024-01-10 13:26:42","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:42.517895+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:43.519524+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:43.520779+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:43","2":"2024-01-10 13:26:43","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:43","2":"2024-01-10 13:26:43","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:43.522586+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:44.524039+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:44.525103+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:44","2":"2024-01-10 13:26:44","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:44","2":"2024-01-10 13:26:44","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:44.526690+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:45.527997+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:45.528977+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:45","2":"2024-01-10 13:26:45","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:45","2":"2024-01-10 13:26:45","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:45.530259+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:46.531313+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:46.531663+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:46","2":"2024-01-10 13:26:46","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:46","2":"2024-01-10 13:26:46","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:46.532204+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:47.532713+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:47.533743+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:47","2":"2024-01-10 13:26:47","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:47","2":"2024-01-10 13:26:47","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:47.535349+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:48.536604+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:48.536924+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:48","2":"2024-01-10 13:26:48","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:48","2":"2024-01-10 13:26:48","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:48.537361+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:49.537846+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:49.538618+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:49","2":"2024-01-10 13:26:49","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:49","2":"2024-01-10 13:26:49","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:49.539859+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:50.540944+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:50.542009+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:50","2":"2024-01-10 13:26:50","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:50","2":"2024-01-10 13:26:50","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:50.543520+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:51.544846+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:51.547209+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:51","2":"2024-01-10 13:26:51","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:51","2":"2024-01-10 13:26:51","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:51.550141+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:52.551913+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:52.552982+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:52","2":"2024-01-10 13:26:52","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:52","2":"2024-01-10 13:26:52","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:52.554489+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:53.555784+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:53.556882+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:53","2":"2024-01-10 13:26:53","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:53","2":"2024-01-10 13:26:53","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:53.558414+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:54.559807+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:54.561253+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:54","2":"2024-01-10 13:26:54","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:54","2":"2024-01-10 13:26:54","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:54.563446+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:55.565351+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:55.567006+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:55","2":"2024-01-10 13:26:55","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:55","2":"2024-01-10 13:26:55","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:55.569319+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:56.570778+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:56.571916+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:56","2":"2024-01-10 13:26:56","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:56","2":"2024-01-10 13:26:56","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:56.573393+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:57.574584+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:57.576203+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:57","2":"2024-01-10 13:26:57","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:57","2":"2024-01-10 13:26:57","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:57.578448+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:58.580852+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:58.582138+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:58","2":"2024-01-10 13:26:58","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:58","2":"2024-01-10 13:26:58","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:58.583645+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:59.584764+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:59.585126+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:59","2":"2024-01-10 13:26:59","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:59","2":"2024-01-10 13:26:59","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:59.585714+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:00.586286+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:00.587313+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:00","2":"2024-01-10 13:27:00","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:00","2":"2024-01-10 13:27:00","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:00.588981+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:01.590252+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:01.591174+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:01","2":"2024-01-10 13:27:01","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:01","2":"2024-01-10 13:27:01","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:01.592675+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:02.593896+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:02.595592+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:02","2":"2024-01-10 13:27:02","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:02","2":"2024-01-10 13:27:02","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:02.597989+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:03.599971+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:03.601041+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:03","2":"2024-01-10 13:27:03","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:03","2":"2024-01-10 13:27:03","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:03.602620+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:04.603949+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:04.605282+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:04","2":"2024-01-10 13:27:04","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:04","2":"2024-01-10 13:27:04","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:04.607213+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:05.608649+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:05.609619+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:05","2":"2024-01-10 13:27:05","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:05","2":"2024-01-10 13:27:05","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:05.611200+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:06.612504+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:06.613651+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:06","2":"2024-01-10 13:27:06","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:06","2":"2024-01-10 13:27:06","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:06.615336+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:07.617034+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:07.618456+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:07","2":"2024-01-10 13:27:07","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:07","2":"2024-01-10 13:27:07","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:07.620903+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:08.622746+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:08.623603+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:08","2":"2024-01-10 13:27:08","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:08","2":"2024-01-10 13:27:08","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:08.624898+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:09.625941+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:09.627009+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:09","2":"2024-01-10 13:27:09","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:09","2":"2024-01-10 13:27:09","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:09.628626+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:10.629783+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:10.630317+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:10","2":"2024-01-10 13:27:10","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:10","2":"2024-01-10 13:27:10","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:10.631181+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:11.632008+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:11.633272+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:11","2":"2024-01-10 13:27:11","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:11","2":"2024-01-10 13:27:11","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:11.635019+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:12.636516+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:12.637766+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:12","2":"2024-01-10 13:27:12","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:12","2":"2024-01-10 13:27:12","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:12.639718+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:13.641172+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:13.642022+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:13","2":"2024-01-10 13:27:13","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:13","2":"2024-01-10 13:27:13","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:13.643238+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:14.644197+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:14.645319+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:14","2":"2024-01-10 13:27:14","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:14","2":"2024-01-10 13:27:14","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:14.647393+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:15.648872+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:15.650368+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:15","2":"2024-01-10 13:27:15","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:15","2":"2024-01-10 13:27:15","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:15.653300+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:16.654785+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:16.655641+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:16","2":"2024-01-10 13:27:16","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:16","2":"2024-01-10 13:27:16","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:16.656991+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:17.658106+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:17.658730+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:17","2":"2024-01-10 13:27:17","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:17","2":"2024-01-10 13:27:17","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:17.659726+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:18.660668+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:18.661878+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:18","2":"2024-01-10 13:27:18","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:18","2":"2024-01-10 13:27:18","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:18.663774+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:19.665265+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:19.666335+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:19","2":"2024-01-10 13:27:19","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:19","2":"2024-01-10 13:27:19","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:19.667959+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:20.669486+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:20.670089+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:20","2":"2024-01-10 13:27:20","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:20","2":"2024-01-10 13:27:20","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:20.671288+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:21.672259+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:21.672733+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:21","2":"2024-01-10 13:27:21","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:21","2":"2024-01-10 13:27:21","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:21.673194+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:22.673647+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:22.674284+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:22","2":"2024-01-10 13:27:22","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:22","2":"2024-01-10 13:27:22","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:22.675309+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:23.676323+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:23.677571+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:23","2":"2024-01-10 13:27:23","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:23","2":"2024-01-10 13:27:23","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:23.679320+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:24.680391+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:24.680784+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:24","2":"2024-01-10 13:27:24","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:24","2":"2024-01-10 13:27:24","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:24.681436+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:25.682030+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:25.682927+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:25","2":"2024-01-10 13:27:25","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:25","2":"2024-01-10 13:27:25","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:25.684312+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:26.685518+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:26.686393+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:26","2":"2024-01-10 13:27:26","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:26","2":"2024-01-10 13:27:26","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:26.687622+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:27.688662+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:27.690345+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:27","2":"2024-01-10 13:27:27","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:27","2":"2024-01-10 13:27:27","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:27.692597+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:28.694278+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:28.694648+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:28","2":"2024-01-10 13:27:28","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:28","2":"2024-01-10 13:27:28","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:28.695098+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:29.695710+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:29.695992+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:29","2":"2024-01-10 13:27:29","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:29","2":"2024-01-10 13:27:29","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:29.696544+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:30.697118+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:30.699722+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:30","2":"2024-01-10 13:27:30","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:30","2":"2024-01-10 13:27:30","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:30.703039+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:31.704944+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:31.705563+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:31","2":"2024-01-10 13:27:31","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:31","2":"2024-01-10 13:27:31","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:31.706221+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:32.706739+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:32.707198+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:32","2":"2024-01-10 13:27:32","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:32","2":"2024-01-10 13:27:32","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:32.707841+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:33.708424+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:33.709490+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:33","2":"2024-01-10 13:27:33","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:33","2":"2024-01-10 13:27:33","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:33.710951+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:34.712094+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:34.712456+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:34","2":"2024-01-10 13:27:34","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:34","2":"2024-01-10 13:27:34","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:34.712919+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:35.713471+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:35.714700+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:35","2":"2024-01-10 13:27:35","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:35","2":"2024-01-10 13:27:35","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:35.716646+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:36.718089+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:36.720251+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:36","2":"2024-01-10 13:27:36","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:36","2":"2024-01-10 13:27:36","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:36.722235+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:37.723686+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:37.724808+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:37","2":"2024-01-10 13:27:37","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:37","2":"2024-01-10 13:27:37","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:37.726445+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:38.727648+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:38.728659+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:38","2":"2024-01-10 13:27:38","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:38","2":"2024-01-10 13:27:38","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:38.730274+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:39.731729+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:39.733191+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:39","2":"2024-01-10 13:27:39","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:39","2":"2024-01-10 13:27:39","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:39.734955+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:40.736314+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:40.737826+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:40","2":"2024-01-10 13:27:40","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:40","2":"2024-01-10 13:27:40","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:40.739671+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:41.741001+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:41.741354+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:41","2":"2024-01-10 13:27:41","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:41","2":"2024-01-10 13:27:41","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:41.741822+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:42.742206+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:42.742921+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:42","2":"2024-01-10 13:27:42","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:42","2":"2024-01-10 13:27:42","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:42.743791+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:43.744591+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:43.746469+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:43","2":"2024-01-10 13:27:43","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:43","2":"2024-01-10 13:27:43","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:43.749050+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:44.751339+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:44.752761+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:44","2":"2024-01-10 13:27:44","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:44","2":"2024-01-10 13:27:44","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:44.754709+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:45.756256+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:45.756624+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:45","2":"2024-01-10 13:27:45","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:45","2":"2024-01-10 13:27:45","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:45.758429+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:46.759015+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:46.759883+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:46","2":"2024-01-10 13:27:46","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:46","2":"2024-01-10 13:27:46","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:46.761340+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:47.762381+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:47.763997+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:47","2":"2024-01-10 13:27:47","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:47","2":"2024-01-10 13:27:47","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:47.766236+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:48.768254+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:48.768865+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:48","2":"2024-01-10 13:27:48","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:48","2":"2024-01-10 13:27:48","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:48.769486+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:49.770049+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:49.770581+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:49","2":"2024-01-10 13:27:49","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:49","2":"2024-01-10 13:27:49","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:49.771439+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:50.772104+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:50.773185+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:50","2":"2024-01-10 13:27:50","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:50","2":"2024-01-10 13:27:50","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:50.774583+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:51.776473+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:51.778025+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:51","2":"2024-01-10 13:27:51","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:51","2":"2024-01-10 13:27:51","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:51.779217+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:52.780121+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:52.780804+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:52","2":"2024-01-10 13:27:52","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:52","2":"2024-01-10 13:27:52","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:52.781823+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:53.782862+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:53.784429+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:53","2":"2024-01-10 13:27:53","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:53","2":"2024-01-10 13:27:53","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:53.786878+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:54.788679+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:54.790098+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:54","2":"2024-01-10 13:27:54","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:54","2":"2024-01-10 13:27:54","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:54.792117+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:55.794181+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:55.795724+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:55","2":"2024-01-10 13:27:55","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:55","2":"2024-01-10 13:27:55","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:55.797631+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:56.798961+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:56.800345+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:56","2":"2024-01-10 13:27:56","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:56","2":"2024-01-10 13:27:56","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:56.802880+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:57.804648+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:57.805653+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:57","2":"2024-01-10 13:27:57","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:57","2":"2024-01-10 13:27:57","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:57.807406+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:58.808960+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:58.810277+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:58","2":"2024-01-10 13:27:58","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:58","2":"2024-01-10 13:27:58","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:58.811435+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:59.812388+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:59.813156+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:59","2":"2024-01-10 13:27:59","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:59","2":"2024-01-10 13:27:59","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:59.814415+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:00.815436+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:00.816655+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:00","2":"2024-01-10 13:28:00","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:00","2":"2024-01-10 13:28:00","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:00.818344+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:01.819807+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:01.820788+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:01","2":"2024-01-10 13:28:01","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:01","2":"2024-01-10 13:28:01","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:01.822380+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:02.823646+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:02.824836+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:02","2":"2024-01-10 13:28:02","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:02","2":"2024-01-10 13:28:02","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:02.826722+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:03.828266+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:03.829168+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:03","2":"2024-01-10 13:28:03","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:03","2":"2024-01-10 13:28:03","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:03.830473+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:04.831376+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:04.832056+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:04","2":"2024-01-10 13:28:04","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:04","2":"2024-01-10 13:28:04","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:04.833384+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:05.834226+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:05.835515+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:05","2":"2024-01-10 13:28:05","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:05","2":"2024-01-10 13:28:05","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:05.837189+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:06.838214+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:06.838597+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:06","2":"2024-01-10 13:28:06","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:06","2":"2024-01-10 13:28:06","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:06.839317+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:07.839954+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:07.840957+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:07","2":"2024-01-10 13:28:07","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:07","2":"2024-01-10 13:28:07","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:07.842461+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:08.843366+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:08.844557+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:08","2":"2024-01-10 13:28:08","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:08","2":"2024-01-10 13:28:08","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:08.846247+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:09.847526+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:09.849075+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:09","2":"2024-01-10 13:28:09","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:09","2":"2024-01-10 13:28:09","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:09.852270+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:10.854722+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:10.855045+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:10","2":"2024-01-10 13:28:10","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:10","2":"2024-01-10 13:28:10","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:10.855455+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:11.855956+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:11.857843+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:11","2":"2024-01-10 13:28:11","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:11","2":"2024-01-10 13:28:11","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:11.860089+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:12.861534+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:12.863002+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:12","2":"2024-01-10 13:28:12","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:12","2":"2024-01-10 13:28:12","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:12.865626+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:13.867490+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:13.869235+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:13","2":"2024-01-10 13:28:13","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:13","2":"2024-01-10 13:28:13","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:13.871789+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:14.873576+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:14.875196+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:14","2":"2024-01-10 13:28:14","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:14","2":"2024-01-10 13:28:14","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:14.878482+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:15.881501+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:15.882581+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:15","2":"2024-01-10 13:28:15","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:15","2":"2024-01-10 13:28:15","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:15.884199+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:16.885723+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:16.886653+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:16","2":"2024-01-10 13:28:16","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:16","2":"2024-01-10 13:28:16","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:16.888018+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:17.889260+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:17.890263+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:17","2":"2024-01-10 13:28:17","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:17","2":"2024-01-10 13:28:17","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:17.891915+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:18.893273+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:18.894385+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:18","2":"2024-01-10 13:28:18","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:18","2":"2024-01-10 13:28:18","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:18.896226+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:19.897671+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:19.899090+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:19","2":"2024-01-10 13:28:19","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:19","2":"2024-01-10 13:28:19","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:19.901064+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:20.902606+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:20.903877+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:20","2":"2024-01-10 13:28:20","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:20","2":"2024-01-10 13:28:20","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:20.905887+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:21.907225+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:21.908212+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:21","2":"2024-01-10 13:28:21","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:21","2":"2024-01-10 13:28:21","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:21.909828+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:22.911043+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:22.911848+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:22","2":"2024-01-10 13:28:22","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:22","2":"2024-01-10 13:28:22","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:22.913112+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:23.914069+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:23.914975+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:23","2":"2024-01-10 13:28:23","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:23","2":"2024-01-10 13:28:23","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:23.916620+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:24.917754+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:24.918778+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:24","2":"2024-01-10 13:28:24","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:24","2":"2024-01-10 13:28:24","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:24.920424+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:25.921687+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:25.922626+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:25","2":"2024-01-10 13:28:25","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:25","2":"2024-01-10 13:28:25","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:25.924084+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:26.925240+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:26.926890+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:26","2":"2024-01-10 13:28:26","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:26","2":"2024-01-10 13:28:26","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:26.929404+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:27.932578+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:27.934039+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:27","2":"2024-01-10 13:28:27","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:27","2":"2024-01-10 13:28:27","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:27.936296+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:28.938002+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:28.939035+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:28","2":"2024-01-10 13:28:28","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:28","2":"2024-01-10 13:28:28","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:28.940529+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:29.941561+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:29.941964+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:29","2":"2024-01-10 13:28:29","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:29","2":"2024-01-10 13:28:29","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:29.942527+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:30.943024+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:30.943994+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:30","2":"2024-01-10 13:28:30","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:30","2":"2024-01-10 13:28:30","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:30.945430+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:31.946677+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:31.948003+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:31","2":"2024-01-10 13:28:31","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:31","2":"2024-01-10 13:28:31","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:31.949975+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:32.951684+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:32.953266+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:32","2":"2024-01-10 13:28:32","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:32","2":"2024-01-10 13:28:32","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:32.955919+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:33.957718+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:33.959026+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:33","2":"2024-01-10 13:28:33","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:33","2":"2024-01-10 13:28:33","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:33.961039+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:34.962697+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:34.963091+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:34","2":"2024-01-10 13:28:34","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:34","2":"2024-01-10 13:28:34","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:34.963587+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:35.964033+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:35.965320+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:35","2":"2024-01-10 13:28:35","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:35","2":"2024-01-10 13:28:35","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:35.967027+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:36.968355+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:36.969228+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:36","2":"2024-01-10 13:28:36","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:36","2":"2024-01-10 13:28:36","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:36.969893+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:37.970462+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:37.971471+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:37","2":"2024-01-10 13:28:37","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:37","2":"2024-01-10 13:28:37","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:37.972985+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:38.974062+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:38.975201+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:38","2":"2024-01-10 13:28:38","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:38","2":"2024-01-10 13:28:38","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:38.976853+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:39.978102+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:39.978978+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:39","2":"2024-01-10 13:28:39","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:39","2":"2024-01-10 13:28:39","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:39.980532+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:40.981888+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:40.982932+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:40","2":"2024-01-10 13:28:40","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:40","2":"2024-01-10 13:28:40","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:40.984520+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:41.986401+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:41.987593+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:41","2":"2024-01-10 13:28:41","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:41","2":"2024-01-10 13:28:41","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:41.989489+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:42.990819+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:42.991897+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:42","2":"2024-01-10 13:28:42","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:42","2":"2024-01-10 13:28:42","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:42.993343+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:43.994362+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:43.995275+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:43","2":"2024-01-10 13:28:43","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:43","2":"2024-01-10 13:28:43","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:43.996582+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:44.997615+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:44.999298+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:44","2":"2024-01-10 13:28:44","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:44","2":"2024-01-10 13:28:44","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:45.001315+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:46.002643+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:46.002997+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:46","2":"2024-01-10 13:28:46","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:46","2":"2024-01-10 13:28:46","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:46.003509+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:47.003833+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:47.004167+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:47","2":"2024-01-10 13:28:47","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:47","2":"2024-01-10 13:28:47","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:47.004708+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:48.005078+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:48.005625+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:48","2":"2024-01-10 13:28:48","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:48","2":"2024-01-10 13:28:48","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:48.006305+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:49.006939+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:49.008254+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:49","2":"2024-01-10 13:28:49","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:49","2":"2024-01-10 13:28:49","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:49.010800+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:50.012922+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:50.014011+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:50","2":"2024-01-10 13:28:50","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:50","2":"2024-01-10 13:28:50","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:50.015562+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:51.016914+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:51.018380+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:51","2":"2024-01-10 13:28:51","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:51","2":"2024-01-10 13:28:51","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:51.020304+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:52.021738+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:52.023166+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:52","2":"2024-01-10 13:28:52","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:52","2":"2024-01-10 13:28:52","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:52.025261+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:53.027068+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:53.028635+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:53","2":"2024-01-10 13:28:53","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:53","2":"2024-01-10 13:28:53","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:53.030147+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:54.031331+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:54.032262+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:54","2":"2024-01-10 13:28:54","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:54","2":"2024-01-10 13:28:54","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:54.033945+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:55.035120+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:55.036168+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:55","2":"2024-01-10 13:28:55","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:55","2":"2024-01-10 13:28:55","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:55.037802+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:56.038950+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:56.039995+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:56","2":"2024-01-10 13:28:56","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:56","2":"2024-01-10 13:28:56","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:56.041696+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:57.043411+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:57.045478+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:57","2":"2024-01-10 13:28:57","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:57","2":"2024-01-10 13:28:57","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:57.047318+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:58.048618+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:58.049507+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:58","2":"2024-01-10 13:28:58","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:58","2":"2024-01-10 13:28:58","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:58.050906+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:59.052224+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:59.053303+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:59","2":"2024-01-10 13:28:59","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:59","2":"2024-01-10 13:28:59","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:59.054908+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:00.056042+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:00.056407+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:00","2":"2024-01-10 13:29:00","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:00","2":"2024-01-10 13:29:00","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:00.056853+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:01.057363+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:01.058838+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:01","2":"2024-01-10 13:29:01","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:01","2":"2024-01-10 13:29:01","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:01.062014+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:02.064350+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:02.066068+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:02","2":"2024-01-10 13:29:02","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:02","2":"2024-01-10 13:29:02","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:02.068606+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:03.070191+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:03.071320+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:03","2":"2024-01-10 13:29:03","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:03","2":"2024-01-10 13:29:03","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:03.073057+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:04.074301+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:04.075784+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:04","2":"2024-01-10 13:29:04","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:04","2":"2024-01-10 13:29:04","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:04.078334+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:05.079957+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:05.080308+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:05","2":"2024-01-10 13:29:05","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:05","2":"2024-01-10 13:29:05","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:05.080856+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:06.081257+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:06.081974+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:06","2":"2024-01-10 13:29:06","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:06","2":"2024-01-10 13:29:06","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:06.082725+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:07.083474+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:07.084844+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:07","2":"2024-01-10 13:29:07","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:07","2":"2024-01-10 13:29:07","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:07.086811+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:08.088237+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:08.088593+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:08","2":"2024-01-10 13:29:08","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:08","2":"2024-01-10 13:29:08","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:08.089139+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:09.089691+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:09.090640+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:09","2":"2024-01-10 13:29:09","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:09","2":"2024-01-10 13:29:09","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:09.092239+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:10.093312+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:10.093625+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:10","2":"2024-01-10 13:29:10","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:10","2":"2024-01-10 13:29:10","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:10.094091+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:11.094631+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:11.096196+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:11","2":"2024-01-10 13:29:11","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:11","2":"2024-01-10 13:29:11","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:11.098595+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:12.100732+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:12.101619+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:12","2":"2024-01-10 13:29:12","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:12","2":"2024-01-10 13:29:12","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:12.103109+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:13.104417+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:13.106464+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:13","2":"2024-01-10 13:29:13","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:13","2":"2024-01-10 13:29:13","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:13.108698+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:14.110822+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:14.114130+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:14","2":"2024-01-10 13:29:14","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:14","2":"2024-01-10 13:29:14","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:14.118409+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:15.121623+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:15.122743+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:15","2":"2024-01-10 13:29:15","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:15","2":"2024-01-10 13:29:15","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:15.124430+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:16.125647+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:16.126364+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:16","2":"2024-01-10 13:29:16","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:16","2":"2024-01-10 13:29:16","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:16.127485+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:17.128300+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:17.129827+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:17","2":"2024-01-10 13:29:17","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:17","2":"2024-01-10 13:29:17","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:17.132209+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:18.133933+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:18.134847+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:18","2":"2024-01-10 13:29:18","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:18","2":"2024-01-10 13:29:18","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:18.136513+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:19.137787+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:19.138995+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:19","2":"2024-01-10 13:29:19","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:19","2":"2024-01-10 13:29:19","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:19.141250+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:20.142717+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:20.143932+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:20","2":"2024-01-10 13:29:20","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:20","2":"2024-01-10 13:29:20","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:20.145911+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:21.147597+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:21.149034+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:21","2":"2024-01-10 13:29:21","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:21","2":"2024-01-10 13:29:21","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:21.151180+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:22.152722+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:22.154308+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:22","2":"2024-01-10 13:29:22","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:22","2":"2024-01-10 13:29:22","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:22.156269+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:23.157700+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:23.158249+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:23","2":"2024-01-10 13:29:23","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:23","2":"2024-01-10 13:29:23","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:23.158863+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:24.159634+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:24.160771+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:24","2":"2024-01-10 13:29:24","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:24","2":"2024-01-10 13:29:24","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:24.162943+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:25.164770+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:25.166129+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:25","2":"2024-01-10 13:29:25","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:25","2":"2024-01-10 13:29:25","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:25.167486+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:26.168490+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:26.169319+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:26","2":"2024-01-10 13:29:26","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:26","2":"2024-01-10 13:29:26","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:26.170506+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:27.171691+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:27.172917+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:27","2":"2024-01-10 13:29:27","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:27","2":"2024-01-10 13:29:27","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:27.175307+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:28.176783+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:28.178568+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:28","2":"2024-01-10 13:29:28","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:28","2":"2024-01-10 13:29:28","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:28.180134+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:29.181417+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:29.182748+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:29","2":"2024-01-10 13:29:29","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:29","2":"2024-01-10 13:29:29","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:29.184787+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:30.186631+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:30.187948+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:30","2":"2024-01-10 13:29:30","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:30","2":"2024-01-10 13:29:30","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:30.189838+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:31.191219+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:31.191690+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:31","2":"2024-01-10 13:29:31","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:31","2":"2024-01-10 13:29:31","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:31.192283+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:32.192859+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:32.193770+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:32","2":"2024-01-10 13:29:32","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:32","2":"2024-01-10 13:29:32","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:32.195171+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:33.196469+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:33.197793+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:33","2":"2024-01-10 13:29:33","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:33","2":"2024-01-10 13:29:33","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:33.200113+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:34.201528+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:34.203066+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:34","2":"2024-01-10 13:29:34","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:34","2":"2024-01-10 13:29:34","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:34.205540+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:35.207183+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:35.207610+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:35","2":"2024-01-10 13:29:35","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:35","2":"2024-01-10 13:29:35","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:35.208225+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:36.208819+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:36.210925+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:36","2":"2024-01-10 13:29:36","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:36","2":"2024-01-10 13:29:36","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:36.215026+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:37.218267+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:37.219791+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:37","2":"2024-01-10 13:29:37","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:37","2":"2024-01-10 13:29:37","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:37.222319+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:37.835550+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:29:37.836416+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:29:37.836746+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:29:37.836948+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:29:37.840076+00:00] request.INFO: Matched route "newsletters_send". {"route":"newsletters_send","route_parameters":{"_route":"newsletters_send","_controller":"App\\Controller\\NewslettersController::send","id":"1"},"request_uri":"http://localhost:8001/newsletters/send/1","method":"GET"} []
[2024-01-10T13:29:37.856178+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:29:37.858201+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ? (parameters: array{"1":"1"}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ?","params":{"1":"1"},"types":{"1":1}} []
[2024-01-10T13:29:37.863058+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:29:37.864544+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:29:37.867008+00:00] messenger.INFO: Sending message App\Message\SendNewsletterMessage with async sender using Symfony\Component\Messenger\Bridge\Doctrine\Transport\DoctrineTransport {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage","alias":"async","sender":"Symfony\\Component\\Messenger\\Bridge\\Doctrine\\Transport\\DoctrineTransport"} []
[2024-01-10T13:29:37.867428+00:00] doctrine.DEBUG: Executing statement: INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?) (parameters: array{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:1:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"default","4":"2024-01-10 13:29:37","5":"2024-01-10 13:29:37"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?)","params":{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:1:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"default","4":"2024-01-10 13:29:37","5":"2024-01-10 13:29:37"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2024-01-10T13:29:37.876283+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:29:37.876578+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:29:37.876904+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:29:37.877077+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:29:37.877236+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:29:37.877400+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:29:37.879489+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:29:37.879654+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:29:37.879853+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:29:37.879948+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:29:37.880726+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:29:37.882235+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:29:37.882765+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:29:37.885304+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:29:37.885691+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:29:37.887773+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:29:37.888131+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:29:37.890123+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:29:37.890728+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:29:37.894937+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:37.901597+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:29:37.902241+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:29:37.904324+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:29:37.905695+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:29:37.924341+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:29:37.924467+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:29:37.941614+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:29:37.945890+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:29:37.946032+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:29:37.946094+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:29:37.946133+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:29:37.946615+00:00] request.INFO: Matched route "newsletters_list". {"route":"newsletters_list","route_parameters":{"_route":"newsletters_list","_controller":"App\\Controller\\NewslettersController::list"},"request_uri":"http://localhost:8001/newsletters/list","method":"GET"} []
[2024-01-10T13:29:37.949065+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:29:37.949893+00:00] doctrine.DEBUG: Executing query: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0"} []
[2024-01-10T13:29:37.952865+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:29:37.953828+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:29:37.955346+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:29:37.955453+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:29:37.955518+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:29:37.955571+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:29:37.955639+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:29:37.955705+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:29:37.956396+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:29:37.956484+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:29:37.956551+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:29:37.956601+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:29:37.956936+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:29:37.957322+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:29:37.957642+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:29:37.959781+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:29:37.960053+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:29:37.962054+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:29:37.962408+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:29:37.964481+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:29:37.964828+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:29:37.966258+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:37.968917+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:29:37.969237+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:29:37.971181+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:29:37.971993+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:29:37.993700+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:29:37.994033+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:29:38.023482+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:29:38.043982+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:29:38.044193+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:29:38.044295+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:29:38.044366+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:29:38.045036+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"f73001"},"request_uri":"http://localhost:8001/_wdt/f73001","method":"GET"} []
[2024-01-10T13:29:38.046341+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:29:38.046474+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:29:38.046578+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:29:38.046673+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:29:38.046786+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:29:38.046880+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:29:38.048429+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:29:38.048534+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:29:38.048620+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:29:38.049394+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:29:38.226340+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:38.227613+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:38","2":"2024-01-10 13:29:38","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:38","2":"2024-01-10 13:29:38","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:38.230145+00:00] doctrine.DEBUG: Executing statement: UPDATE messenger_messages SET delivered_at = ? WHERE id = ? (parameters: array{"1":"2024-01-10 13:29:38","2":9}, types: array{"1":2,"2":2}) {"sql":"UPDATE messenger_messages SET delivered_at = ? WHERE id = ?","params":{"1":"2024-01-10 13:29:38","2":9},"types":{"1":2,"2":2}} []
[2024-01-10T13:29:38.232124+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:38.242226+00:00] messenger.INFO: Received message App\Message\SendNewsletterMessage {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage"} []
[2024-01-10T13:29:38.244754+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:29:38.248153+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ? (parameters: array{"1":1}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ?","params":{"1":1},"types":{"1":1}} []
[2024-01-10T13:29:41.260510+00:00] app.DEBUG: Email transport "Symfony\Component\Mailer\Transport\Smtp\SmtpTransport" stopping [] []
[2024-01-10T13:29:41.261437+00:00] app.DEBUG: Email transport "Symfony\Component\Mailer\Transport\Smtp\SmtpTransport" stopped [] []
[2024-01-10T13:29:41.261803+00:00] app.DEBUG: Email transport "Symfony\Component\Mailer\Transport\Smtp\SmtpTransport" starting [] []
[2024-01-10T13:29:41.375817+00:00] app.DEBUG: Email transport "Symfony\Component\Mailer\Transport\Smtp\SmtpTransport" started [] []
[2024-01-10T13:29:41.431149+00:00] messenger.INFO: Message Symfony\Component\Mailer\Messenger\SendEmailMessage handled by Symfony\Component\Mailer\Messenger\MessageHandler::__invoke {"message":{"Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage":[]},"class":"Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage","handler":"Symfony\\Component\\Mailer\\Messenger\\MessageHandler::__invoke"} []
[2024-01-10T13:29:41.431818+00:00] messenger.INFO: Message App\Message\SendNewsletterMessage handled by App\MessageHandler\SendNewsletterMessageHandler::__invoke {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage","handler":"App\\MessageHandler\\SendNewsletterMessageHandler::__invoke"} []
[2024-01-10T13:29:41.432913+00:00] messenger.INFO: App\Message\SendNewsletterMessage was handled successfully (acknowledging to transport). {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage"} []
[2024-01-10T13:29:41.433408+00:00] doctrine.DEBUG: Executing statement: DELETE FROM messenger_messages WHERE id = ? (parameters: array{"1":"9"}, types: array{"1":2}) {"sql":"DELETE FROM messenger_messages WHERE id = ?","params":{"1":"9"},"types":{"1":2}} []
[2024-01-10T13:29:41.443523+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:41.445053+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:41","2":"2024-01-10 13:29:41","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:41","2":"2024-01-10 13:29:41","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:41.447592+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:42.449569+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:42.450785+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:42","2":"2024-01-10 13:29:42","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:42","2":"2024-01-10 13:29:42","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:42.452985+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:43.455028+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:43.456476+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:43","2":"2024-01-10 13:29:43","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:43","2":"2024-01-10 13:29:43","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:43.458356+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:44.460098+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:44.460986+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:44","2":"2024-01-10 13:29:44","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:44","2":"2024-01-10 13:29:44","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:44.462482+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:45.463860+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:45.465093+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:45","2":"2024-01-10 13:29:45","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:45","2":"2024-01-10 13:29:45","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:45.467021+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:46.468448+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:46.469590+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:46","2":"2024-01-10 13:29:46","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:46","2":"2024-01-10 13:29:46","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:46.471342+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:47.472808+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:47.474335+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:47","2":"2024-01-10 13:29:47","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:47","2":"2024-01-10 13:29:47","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:47.476886+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:48.478596+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:48.480144+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:48","2":"2024-01-10 13:29:48","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:48","2":"2024-01-10 13:29:48","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:48.482568+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:49.484331+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:49.486174+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:49","2":"2024-01-10 13:29:49","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:49","2":"2024-01-10 13:29:49","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:49.487802+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:50.488979+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:50.490019+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:50","2":"2024-01-10 13:29:50","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:50","2":"2024-01-10 13:29:50","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:50.491494+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:51.492330+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:51.493455+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:51","2":"2024-01-10 13:29:51","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:51","2":"2024-01-10 13:29:51","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:51.495035+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:52.496255+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:52.497266+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:52","2":"2024-01-10 13:29:52","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:52","2":"2024-01-10 13:29:52","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:52.498687+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:53.499768+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:53.500737+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:53","2":"2024-01-10 13:29:53","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:53","2":"2024-01-10 13:29:53","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:53.502462+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:54.504012+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:54.505975+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:54","2":"2024-01-10 13:29:54","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:54","2":"2024-01-10 13:29:54","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:54.508011+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:55.509502+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:55.509962+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:55","2":"2024-01-10 13:29:55","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:55","2":"2024-01-10 13:29:55","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:55.510664+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:56.511313+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:56.512390+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:56","2":"2024-01-10 13:29:56","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:56","2":"2024-01-10 13:29:56","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:56.513874+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:57.515232+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:57.516768+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:57","2":"2024-01-10 13:29:57","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:57","2":"2024-01-10 13:29:57","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:57.518573+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:58.520156+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:58.521575+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:58","2":"2024-01-10 13:29:58","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:58","2":"2024-01-10 13:29:58","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:58.523521+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:59.524957+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:59.526245+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:59","2":"2024-01-10 13:29:59","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:59","2":"2024-01-10 13:29:59","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:59.528023+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:00.529423+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:00.530237+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:00","2":"2024-01-10 13:30:00","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:00","2":"2024-01-10 13:30:00","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:00.531474+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:01.532559+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:01.534152+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:01","2":"2024-01-10 13:30:01","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:01","2":"2024-01-10 13:30:01","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:01.536237+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:02.538906+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:02.540432+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:02","2":"2024-01-10 13:30:02","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:02","2":"2024-01-10 13:30:02","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:02.542454+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:03.544410+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:03.545563+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:03","2":"2024-01-10 13:30:03","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:03","2":"2024-01-10 13:30:03","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:03.547225+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:04.548770+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:04.550135+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:04","2":"2024-01-10 13:30:04","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:04","2":"2024-01-10 13:30:04","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:04.552152+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:05.553631+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:05.554618+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:05","2":"2024-01-10 13:30:05","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:05","2":"2024-01-10 13:30:05","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:05.556424+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:06.557594+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:06.558479+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:06","2":"2024-01-10 13:30:06","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:06","2":"2024-01-10 13:30:06","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:06.559949+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:07.560970+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:07.562219+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:07","2":"2024-01-10 13:30:07","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:07","2":"2024-01-10 13:30:07","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:07.564559+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:08.565952+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:08.566999+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:08","2":"2024-01-10 13:30:08","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:08","2":"2024-01-10 13:30:08","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:08.568654+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:09.569795+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:09.571255+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:09","2":"2024-01-10 13:30:09","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:09","2":"2024-01-10 13:30:09","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:09.574150+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:10.575850+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:10.576604+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:10","2":"2024-01-10 13:30:10","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:10","2":"2024-01-10 13:30:10","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:10.577397+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:11.578129+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:11.580347+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:11","2":"2024-01-10 13:30:11","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:11","2":"2024-01-10 13:30:11","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:11.582686+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:12.584668+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:12.587893+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:12","2":"2024-01-10 13:30:12","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:12","2":"2024-01-10 13:30:12","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:12.590853+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:13.592714+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:13.593784+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:13","2":"2024-01-10 13:30:13","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:13","2":"2024-01-10 13:30:13","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:13.595337+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:14.596527+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:14.598129+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:14","2":"2024-01-10 13:30:14","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:14","2":"2024-01-10 13:30:14","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:14.600316+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:15.601960+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:15.602889+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:15","2":"2024-01-10 13:30:15","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:15","2":"2024-01-10 13:30:15","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:15.604546+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:16.605870+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:16.606983+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:16","2":"2024-01-10 13:30:16","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:16","2":"2024-01-10 13:30:16","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:16.608573+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:17.609766+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:17.611350+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:17","2":"2024-01-10 13:30:17","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:17","2":"2024-01-10 13:30:17","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:17.614442+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:18.616131+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:18.616430+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:18","2":"2024-01-10 13:30:18","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:18","2":"2024-01-10 13:30:18","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:18.616883+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:19.617334+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:19.618797+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:19","2":"2024-01-10 13:30:19","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:19","2":"2024-01-10 13:30:19","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:19.620764+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:20.622272+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:20.623312+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:20","2":"2024-01-10 13:30:20","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:20","2":"2024-01-10 13:30:20","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:20.624861+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:21.626089+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:21.627241+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:21","2":"2024-01-10 13:30:21","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:21","2":"2024-01-10 13:30:21","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:21.629105+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:22.630473+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:22.631725+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:22","2":"2024-01-10 13:30:22","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:22","2":"2024-01-10 13:30:22","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:22.634107+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:23.635773+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:23.637150+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:23","2":"2024-01-10 13:30:23","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:23","2":"2024-01-10 13:30:23","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:23.639300+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:24.640678+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:24.641957+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:24","2":"2024-01-10 13:30:24","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:24","2":"2024-01-10 13:30:24","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:24.643758+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:25.645149+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:25.646843+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:25","2":"2024-01-10 13:30:25","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:25","2":"2024-01-10 13:30:25","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:25.649319+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:26.651040+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:26.651466+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:26","2":"2024-01-10 13:30:26","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:26","2":"2024-01-10 13:30:26","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:26.652065+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:27.652687+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:27.654203+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:27","2":"2024-01-10 13:30:27","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:27","2":"2024-01-10 13:30:27","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:27.656251+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:28.657823+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:28.659157+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:28","2":"2024-01-10 13:30:28","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:28","2":"2024-01-10 13:30:28","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:28.661601+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:29.663133+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:29.663532+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:29","2":"2024-01-10 13:30:29","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:29","2":"2024-01-10 13:30:29","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:29.664122+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:30.664614+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:30.665939+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:30","2":"2024-01-10 13:30:30","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:30","2":"2024-01-10 13:30:30","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:30.667858+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:31.669685+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:31.671254+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:31","2":"2024-01-10 13:30:31","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:31","2":"2024-01-10 13:30:31","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:31.672690+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:32.673794+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:32.675206+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:32","2":"2024-01-10 13:30:32","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:32","2":"2024-01-10 13:30:32","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:32.677256+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:33.678623+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:33.678964+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:33","2":"2024-01-10 13:30:33","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:33","2":"2024-01-10 13:30:33","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:33.679455+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:34.679882+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:34.680352+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:34","2":"2024-01-10 13:30:34","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:34","2":"2024-01-10 13:30:34","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:34.681134+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:35.681819+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:35.682576+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:35","2":"2024-01-10 13:30:35","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:35","2":"2024-01-10 13:30:35","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:35.683523+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:36.684259+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:36.685667+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:36","2":"2024-01-10 13:30:36","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:36","2":"2024-01-10 13:30:36","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:36.687237+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:37.688349+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:37.689381+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:37","2":"2024-01-10 13:30:37","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:37","2":"2024-01-10 13:30:37","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:37.690901+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:38.691870+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:38.693558+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:38","2":"2024-01-10 13:30:38","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:38","2":"2024-01-10 13:30:38","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:38.697031+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:39.699032+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:39.700021+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:39","2":"2024-01-10 13:30:39","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:39","2":"2024-01-10 13:30:39","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:39.701609+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:40.702705+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:40.703998+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:40","2":"2024-01-10 13:30:40","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:40","2":"2024-01-10 13:30:40","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:40.706060+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:41.707551+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:41.708893+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:41","2":"2024-01-10 13:30:41","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:41","2":"2024-01-10 13:30:41","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:41.711464+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:42.713288+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:42.714798+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:42","2":"2024-01-10 13:30:42","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:42","2":"2024-01-10 13:30:42","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:42.717188+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:43.719578+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:43.720885+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:43","2":"2024-01-10 13:30:43","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:43","2":"2024-01-10 13:30:43","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:43.722875+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:44.724390+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:44.724778+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:44","2":"2024-01-10 13:30:44","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:44","2":"2024-01-10 13:30:44","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:44.725341+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:45.726441+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:45.727922+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:45","2":"2024-01-10 13:30:45","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:45","2":"2024-01-10 13:30:45","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:45.730502+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:46.732318+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:46.733281+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:46","2":"2024-01-10 13:30:46","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:46","2":"2024-01-10 13:30:46","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:46.734559+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:47.735468+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:47.736296+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:47","2":"2024-01-10 13:30:47","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:47","2":"2024-01-10 13:30:47","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:47.737614+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:48.738650+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:48.740046+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:48","2":"2024-01-10 13:30:48","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:48","2":"2024-01-10 13:30:48","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:48.742271+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:49.743924+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:49.745085+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:49","2":"2024-01-10 13:30:49","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:49","2":"2024-01-10 13:30:49","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:49.746689+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:50.748037+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:50.749392+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:50","2":"2024-01-10 13:30:50","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:50","2":"2024-01-10 13:30:50","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:50.751336+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:51.752809+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:51.753836+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:51","2":"2024-01-10 13:30:51","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:51","2":"2024-01-10 13:30:51","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:51.755563+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:52.757140+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:52.758306+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:52","2":"2024-01-10 13:30:52","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:52","2":"2024-01-10 13:30:52","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:52.760032+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:53.223232+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:30:53.223875+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:30:53.224124+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:30:53.224332+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:30:53.231072+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Routing\RouteCollection::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Routing\\RouteCollection::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/routing/RouteCollection.php:59)"} []
[2024-01-10T13:30:53.231448+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Routing\RouteCollection::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Routing\\RouteCollection::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/routing/RouteCollection.php:69)"} []
[2024-01-10T13:30:53.252152+00:00] request.INFO: Matched route "newsletters_send". {"route":"newsletters_send","route_parameters":{"_route":"newsletters_send","_controller":"App\\Controller\\NewslettersController::send","id":"1"},"request_uri":"http://localhost:8001/newsletters/send/1","method":"GET"} []
[2024-01-10T13:30:53.258145+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:30:53.259444+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ? (parameters: array{"1":"1"}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ?","params":{"1":"1"},"types":{"1":1}} []
[2024-01-10T13:30:53.261999+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:30:53.262883+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:30:53.264345+00:00] messenger.INFO: Sending message App\Message\SendNewsletterMessage with async sender using Symfony\Component\Messenger\Bridge\Doctrine\Transport\DoctrineTransport {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage","alias":"async","sender":"Symfony\\Component\\Messenger\\Bridge\\Doctrine\\Transport\\DoctrineTransport"} []
[2024-01-10T13:30:53.264624+00:00] doctrine.DEBUG: Executing statement: INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?) (parameters: array{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:1:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"default","4":"2024-01-10 13:30:53","5":"2024-01-10 13:30:53"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?)","params":{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:1:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"default","4":"2024-01-10 13:30:53","5":"2024-01-10 13:30:53"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2024-01-10T13:30:53.271750+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:30:53.271869+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:30:53.271957+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:30:53.272038+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:30:53.272109+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:30:53.272188+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:30:53.273434+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:30:53.273582+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:30:53.273805+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:30:53.273927+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:30:53.274589+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:30:53.275486+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:30:53.275814+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:30:53.277216+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:30:53.277552+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:30:53.279145+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:30:53.279419+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:30:53.280847+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:30:53.281136+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:30:53.282630+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:53.284961+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:30:53.285324+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:30:53.286641+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:30:53.287660+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:30:53.304484+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:30:53.304611+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:30:53.326853+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:30:53.330694+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:30:53.330822+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:30:53.330877+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:30:53.330925+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:30:53.331507+00:00] request.INFO: Matched route "newsletters_list". {"route":"newsletters_list","route_parameters":{"_route":"newsletters_list","_controller":"App\\Controller\\NewslettersController::list"},"request_uri":"http://localhost:8001/newsletters/list","method":"GET"} []
[2024-01-10T13:30:53.334220+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:30:53.334925+00:00] doctrine.DEBUG: Executing query: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0"} []
[2024-01-10T13:30:53.337264+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:30:53.338233+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:30:53.340266+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:30:53.340398+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:30:53.340467+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:30:53.340529+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:30:53.340600+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:30:53.340670+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:30:53.341263+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:30:53.341357+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:30:53.341439+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:30:53.341504+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:30:53.342083+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:30:53.342624+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:30:53.343016+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:30:53.344545+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:30:53.344815+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:30:53.346311+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:30:53.346590+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:30:53.348114+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:30:53.348315+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:30:53.349916+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:53.352016+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:30:53.352257+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:30:53.353284+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:30:53.354033+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:30:53.369204+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:30:53.369308+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:30:53.393033+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:30:53.414814+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:30:53.414998+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:30:53.415067+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:30:53.415124+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:30:53.416132+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"1b6b3d"},"request_uri":"http://localhost:8001/_wdt/1b6b3d","method":"GET"} []
[2024-01-10T13:30:53.417280+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:30:53.417390+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:30:53.417468+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:30:53.417557+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:30:53.417632+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:30:53.417707+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:30:53.418902+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:30:53.418980+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:30:53.419052+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:30:53.419118+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:30:53.761446+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:53.762668+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:53","2":"2024-01-10 13:30:53","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:53","2":"2024-01-10 13:30:53","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:53.765051+00:00] doctrine.DEBUG: Executing statement: UPDATE messenger_messages SET delivered_at = ? WHERE id = ? (parameters: array{"1":"2024-01-10 13:30:53","2":10}, types: array{"1":2,"2":2}) {"sql":"UPDATE messenger_messages SET delivered_at = ? WHERE id = ?","params":{"1":"2024-01-10 13:30:53","2":10},"types":{"1":2,"2":2}} []
[2024-01-10T13:30:53.766502+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:53.774918+00:00] messenger.INFO: Received message App\Message\SendNewsletterMessage {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage"} []
[2024-01-10T13:30:53.776288+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:30:53.779267+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ? (parameters: array{"1":1}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ?","params":{"1":1},"types":{"1":1}} []
[2024-01-10T13:30:56.810082+00:00] messenger.CRITICAL: Error thrown while handling message App\Message\SendNewsletterMessage. Removing from transport after 0 retries. Error: "Expected response code "250" but got code "421", with message "421 Timeout - closing connection"." {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage","retryCount":0,"error":"Expected response code \"250\" but got code \"421\", with message \"421 Timeout - closing connection\".","exception":"[object] (Symfony\\Component\\Messenger\\Exception\\HandlerFailedException(code: 421): Expected response code \"250\" but got code \"421\", with message \"421 Timeout - closing connection\". at /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/HandleMessageMiddleware.php:80)\n[previous exception] [object] (Symfony\\Component\\Messenger\\Exception\\HandlerFailedException(code: 421): Expected response code \"250\" but got code \"421\", with message \"421 Timeout - closing connection\". at /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/HandleMessageMiddleware.php:80)\n[previous exception] [object] (Symfony\\Component\\Mailer\\Exception\\TransportException(code: 421): Expected response code \"250\" but got code \"421\", with message \"421 Timeout - closing connection\". at /home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Transport/Smtp/SmtpTransport.php:306)"} []
[2024-01-10T13:30:56.812769+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:30:56.812967+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:30:56.813156+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:30:56.813328+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:30:56.813532+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:30:56.813699+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:30:56.823420+00:00] app.DEBUG: Email transport "Symfony\Component\Mailer\Transport\Smtp\SmtpTransport" stopping [] []
[2024-01-10T13:30:56.823577+00:00] app.DEBUG: Email transport "Symfony\Component\Mailer\Transport\Smtp\SmtpTransport" stopped [] []
[2024-01-10T13:30:56.823635+00:00] app.DEBUG: Email transport "Symfony\Component\Mailer\Transport\Smtp\SmtpTransport" starting [] []
[2024-01-10T13:30:56.927544+00:00] app.DEBUG: Email transport "Symfony\Component\Mailer\Transport\Smtp\SmtpTransport" started [] []
[2024-01-10T13:30:56.978983+00:00] messenger.INFO: Message Symfony\Component\Mailer\Messenger\SendEmailMessage handled by Symfony\Component\Mailer\Messenger\MessageHandler::__invoke {"message":{"Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage":[]},"class":"Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage","handler":"Symfony\\Component\\Mailer\\Messenger\\MessageHandler::__invoke"} []
[2024-01-10T13:30:56.980702+00:00] messenger.INFO: Rejected message App\Message\SendNewsletterMessage will be sent to the failure transport Symfony\Component\Messenger\Bridge\Doctrine\Transport\DoctrineTransport. {"class":"App\\Message\\SendNewsletterMessage","transport":"Symfony\\Component\\Messenger\\Bridge\\Doctrine\\Transport\\DoctrineTransport"} []
[2024-01-10T13:30:56.984520+00:00] doctrine.DEBUG: Executing statement: INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?) (parameters: array{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:6:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}s:57:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\TransportMessageIdStamp\\\";a:1:{i:0;O:57:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\TransportMessageIdStamp\\\":1:{s:61:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\TransportMessageIdStamp\\0id\\\";i:10;}}s:51:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\ErrorDetailsStamp\\\";a:1:{i:0;O:51:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\ErrorDetailsStamp\\\":4:{s:67:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\ErrorDetailsStamp\\0exceptionClass\\\";s:60:\\\"Symfony\\\\Component\\\\Messenger\\\\Exception\\\\HandlerFailedException\\\";s:66:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\ErrorDetailsStamp\\0exceptionCode\\\";i:421;s:69:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\ErrorDetailsStamp\\0exceptionMessage\\\";s:97:\\\"Expected response code \\\"250\\\" but got code \\\"421\\\", with message \\\"421 Timeout - closing connection\\\".\\\";s:69:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\ErrorDetailsStamp\\0flattenException\\\";O:57:\\\"Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\\":12:{s:66:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0message\\\";s:97:\\\"Expected response code \\\"250\\\" but got code \\\"421\\\", with message \\\"421 Timeout - closing connection\\\".\\\";s:63:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0code\\\";i:421;s:67:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0previous\\\";O:57:\\\"Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\\":12:{s:66:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0message\\\";s:97:\\\"Expected response code \\\"250\\\" but got code \\\"421\\\", with message \\\"421 Timeout - closing connection\\\".\\\";s:63:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0code\\\";i:421;s:67:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0previous\\\";N;s:64:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0trace\\\";a:40:{i:0;a:8:{s:9:\\\"namespace\\\";s:0:\\\"\\\";s:11:\\\"short_class\\\";s:0:\\\"\\\";s:5:\\\"class\\\";s:0:\\\"\\\";s:4:\\\"type\\\";s:0:\\\"\\\";s:8:\\\"function\\\";s:0:\\\"\\\";s:4:\\\"file\\\";s:91:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Transport/Smtp/SmtpTransport.php\\\";s:4:\\\"line\\\";i:306;s:4:\\\"args\\\";a:0:{}}i:1;a:8:{s:9:\\\"namespace\\\";s:39:\\\"Symfony\\\\Component\\\\Mailer\\\\Transport\\\\Smtp\\\";s:11:\\\"short_class\\\";s:13:\\\"SmtpTransport\\\";s:5:\\\"class\\\";s:53:\\\"Symfony\\\\Component\\\\Mailer\\\\Transport\\\\Smtp\\\\SmtpTransport\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:18:\\\"assertResponseCode\\\";s:4:\\\"file\\\";s:91:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Transport/Smtp/SmtpTransport.php\\\";s:4:\\\"line\\\";i:180;s:4:\\\"args\\\";a:0:{}}i:2;a:8:{s:9:\\\"namespace\\\";s:39:\\\"Symfony\\\\Component\\\\Mailer\\\\Transport\\\\Smtp\\\";s:11:\\\"short_class\\\";s:13:\\\"SmtpTransport\\\";s:5:\\\"class\\\";s:53:\\\"Symfony\\\\Component\\\\Mailer\\\\Transport\\\\Smtp\\\\SmtpTransport\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:14:\\\"executeCommand\\\";s:4:\\\"file\\\";s:91:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Transport/Smtp/SmtpTransport.php\\\";s:4:\\\"line\\\";i:233;s:4:\\\"args\\\";a:0:{}}i:3;a:8:{s:9:\\\"namespace\\\";s:39:\\\"Symfony\\\\Component\\\\Mailer\\\\Transport\\\\Smtp\\\";s:11:\\\"short_class\\\";s:13:\\\"SmtpTransport\\\";s:5:\\\"class\\\";s:53:\\\"Symfony\\\\Component\\\\Mailer\\\\Transport\\\\Smtp\\\\SmtpTransport\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:17:\\\"doMailFromCommand\\\";s:4:\\\"file\\\";s:91:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Transport/Smtp/SmtpTransport.php\\\";s:4:\\\"line\\\";i:197;s:4:\\\"args\\\";a:0:{}}i:4;a:8:{s:9:\\\"namespace\\\";s:39:\\\"Symfony\\\\Component\\\\Mailer\\\\Transport\\\\Smtp\\\";s:11:\\\"short_class\\\";s:13:\\\"SmtpTransport\\\";s:5:\\\"class\\\";s:53:\\\"Symfony\\\\Component\\\\Mailer\\\\Transport\\\\Smtp\\\\SmtpTransport\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"doSend\\\";s:4:\\\"file\\\";s:90:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Transport/AbstractTransport.php\\\";s:4:\\\"line\\\";i:68;s:4:\\\"args\\\";a:0:{}}i:5;a:8:{s:9:\\\"namespace\\\";s:34:\\\"Symfony\\\\Component\\\\Mailer\\\\Transport\\\";s:11:\\\"short_class\\\";s:17:\\\"AbstractTransport\\\";s:5:\\\"class\\\";s:52:\\\"Symfony\\\\Component\\\\Mailer\\\\Transport\\\\AbstractTransport\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:4:\\\"send\\\";s:4:\\\"file\\\";s:91:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Transport/Smtp/SmtpTransport.php\\\";s:4:\\\"line\\\";i:132;s:4:\\\"args\\\";a:0:{}}i:6;a:8:{s:9:\\\"namespace\\\";s:39:\\\"Symfony\\\\Component\\\\Mailer\\\\Transport\\\\Smtp\\\";s:11:\\\"short_class\\\";s:13:\\\"SmtpTransport\\\";s:5:\\\"class\\\";s:53:\\\"Symfony\\\\Component\\\\Mailer\\\\Transport\\\\Smtp\\\\SmtpTransport\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:4:\\\"send\\\";s:4:\\\"file\\\";s:83:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Transport/Transports.php\\\";s:4:\\\"line\\\";i:51;s:4:\\\"args\\\";a:0:{}}i:7;a:8:{s:9:\\\"namespace\\\";s:34:\\\"Symfony\\\\Component\\\\Mailer\\\\Transport\\\";s:11:\\\"short_class\\\";s:10:\\\"Transports\\\";s:5:\\\"class\\\";s:45:\\\"Symfony\\\\Component\\\\Mailer\\\\Transport\\\\Transports\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:4:\\\"send\\\";s:4:\\\"file\\\";s:87:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Messenger/MessageHandler.php\\\";s:4:\\\"line\\\";i:31;s:4:\\\"args\\\";a:0:{}}i:8;a:8:{s:9:\\\"namespace\\\";s:34:\\\"Symfony\\\\Component\\\\Mailer\\\\Messenger\\\";s:11:\\\"short_class\\\";s:14:\\\"MessageHandler\\\";s:5:\\\"class\\\";s:49:\\\"Symfony\\\\Component\\\\Mailer\\\\Messenger\\\\MessageHandler\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:8:\\\"__invoke\\\";s:4:\\\"file\\\";s:100:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/HandleMessageMiddleware.php\\\";s:4:\\\"line\\\";i:63;s:4:\\\"args\\\";a:0:{}}i:9;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:23:\\\"HandleMessageMiddleware\\\";s:5:\\\"class\\\";s:62:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\HandleMessageMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:98:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/SendMessageMiddleware.php\\\";s:4:\\\"line\\\";i:74;s:4:\\\"args\\\";a:0:{}}i:10;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:21:\\\"SendMessageMiddleware\\\";s:5:\\\"class\\\";s:60:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\SendMessageMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:110:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/FailedMessageProcessingMiddleware.php\\\";s:4:\\\"line\\\";i:34;s:4:\\\"args\\\";a:0:{}}i:11;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:33:\\\"FailedMessageProcessingMiddleware\\\";s:5:\\\"class\\\";s:72:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\FailedMessageProcessingMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:110:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/DispatchAfterCurrentBusMiddleware.php\\\";s:4:\\\"line\\\";i:61;s:4:\\\"args\\\";a:0:{}}i:12;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:33:\\\"DispatchAfterCurrentBusMiddleware\\\";s:5:\\\"class\\\";s:72:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\DispatchAfterCurrentBusMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:111:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/RejectRedeliveredMessageMiddleware.php\\\";s:4:\\\"line\\\";i:48;s:4:\\\"args\\\";a:0:{}}i:13;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:34:\\\"RejectRedeliveredMessageMiddleware\\\";s:5:\\\"class\\\";s:73:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\RejectRedeliveredMessageMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:102:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/AddBusNameStampMiddleware.php\\\";s:4:\\\"line\\\";i:37;s:4:\\\"args\\\";a:0:{}}i:14;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:25:\\\"AddBusNameStampMiddleware\\\";s:5:\\\"class\\\";s:64:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\AddBusNameStampMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:96:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/TraceableMiddleware.php\\\";s:4:\\\"line\\\";i:43;s:4:\\\"args\\\";a:0:{}}i:15;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:19:\\\"TraceableMiddleware\\\";s:5:\\\"class\\\";s:58:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\TraceableMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:76:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/MessageBus.php\\\";s:4:\\\"line\\\";i:77;s:4:\\\"args\\\";a:0:{}}i:16;a:8:{s:9:\\\"namespace\\\";s:27:\\\"Symfony\\\\Component\\\\Messenger\\\";s:11:\\\"short_class\\\";s:10:\\\"MessageBus\\\";s:5:\\\"class\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\MessageBus\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:8:\\\"dispatch\\\";s:4:\\\"file\\\";s:85:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/TraceableMessageBus.php\\\";s:4:\\\"line\\\";i:41;s:4:\\\"args\\\";a:0:{}}i:17;a:8:{s:9:\\\"namespace\\\";s:27:\\\"Symfony\\\\Component\\\\Messenger\\\";s:11:\\\"short_class\\\";s:19:\\\"TraceableMessageBus\\\";s:5:\\\"class\\\";s:47:\\\"Symfony\\\\Component\\\\Messenger\\\\TraceableMessageBus\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:8:\\\"dispatch\\\";s:4:\\\"file\\\";s:69:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Mailer.php\\\";s:4:\\\"line\\\";i:54;s:4:\\\"args\\\";a:0:{}}i:18;a:8:{s:9:\\\"namespace\\\";s:24:\\\"Symfony\\\\Component\\\\Mailer\\\";s:11:\\\"short_class\\\";s:6:\\\"Mailer\\\";s:5:\\\"class\\\";s:31:\\\"Symfony\\\\Component\\\\Mailer\\\\Mailer\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:4:\\\"send\\\";s:4:\\\"file\\\";s:74:\\\"/home/massoud/www/Symfony/Newsletter/src/Service/SendNewsletterService.php\\\";s:4:\\\"line\\\";i:29;s:4:\\\"args\\\";a:0:{}}i:19;a:8:{s:9:\\\"namespace\\\";s:11:\\\"App\\\\Service\\\";s:11:\\\"short_class\\\";s:21:\\\"SendNewsletterService\\\";s:5:\\\"class\\\";s:33:\\\"App\\\\Service\\\\SendNewsletterService\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:4:\\\"send\\\";s:4:\\\"file\\\";s:88:\\\"/home/massoud/www/Symfony/Newsletter/src/MessageHandler/SendNewsletterMessageHandler.php\\\";s:4:\\\"line\\\";i:31;s:4:\\\"args\\\";a:0:{}}i:20;a:8:{s:9:\\\"namespace\\\";s:18:\\\"App\\\\MessageHandler\\\";s:11:\\\"short_class\\\";s:28:\\\"SendNewsletterMessageHandler\\\";s:5:\\\"class\\\";s:47:\\\"App\\\\MessageHandler\\\\SendNewsletterMessageHandler\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:8:\\\"__invoke\\\";s:4:\\\"file\\\";s:100:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/HandleMessageMiddleware.php\\\";s:4:\\\"line\\\";i:63;s:4:\\\"args\\\";a:0:{}}i:21;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:23:\\\"HandleMessageMiddleware\\\";s:5:\\\"class\\\";s:62:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\HandleMessageMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:98:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/SendMessageMiddleware.php\\\";s:4:\\\"line\\\";i:74;s:4:\\\"args\\\";a:0:{}}i:22;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:21:\\\"SendMessageMiddleware\\\";s:5:\\\"class\\\";s:60:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\SendMessageMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:110:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/FailedMessageProcessingMiddleware.php\\\";s:4:\\\"line\\\";i:34;s:4:\\\"args\\\";a:0:{}}i:23;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:33:\\\"FailedMessageProcessingMiddleware\\\";s:5:\\\"class\\\";s:72:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\FailedMessageProcessingMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:110:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/DispatchAfterCurrentBusMiddleware.php\\\";s:4:\\\"line\\\";i:68;s:4:\\\"args\\\";a:0:{}}i:24;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:33:\\\"DispatchAfterCurrentBusMiddleware\\\";s:5:\\\"class\\\";s:72:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\DispatchAfterCurrentBusMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:111:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/RejectRedeliveredMessageMiddleware.php\\\";s:4:\\\"line\\\";i:48;s:4:\\\"args\\\";a:0:{}}i:25;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:34:\\\"RejectRedeliveredMessageMiddleware\\\";s:5:\\\"class\\\";s:73:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\RejectRedeliveredMessageMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:102:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/AddBusNameStampMiddleware.php\\\";s:4:\\\"line\\\";i:37;s:4:\\\"args\\\";a:0:{}}i:26;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:25:\\\"AddBusNameStampMiddleware\\\";s:5:\\\"class\\\";s:64:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\AddBusNameStampMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:96:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/TraceableMiddleware.php\\\";s:4:\\\"line\\\";i:43;s:4:\\\"args\\\";a:0:{}}i:27;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:19:\\\"TraceableMiddleware\\\";s:5:\\\"class\\\";s:58:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\TraceableMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:76:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/MessageBus.php\\\";s:4:\\\"line\\\";i:77;s:4:\\\"args\\\";a:0:{}}i:28;a:8:{s:9:\\\"namespace\\\";s:27:\\\"Symfony\\\\Component\\\\Messenger\\\";s:11:\\\"short_class\\\";s:10:\\\"MessageBus\\\";s:5:\\\"class\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\MessageBus\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:8:\\\"dispatch\\\";s:4:\\\"file\\\";s:85:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/TraceableMessageBus.php\\\";s:4:\\\"line\\\";i:41;s:4:\\\"args\\\";a:0:{}}i:29;a:8:{s:9:\\\"namespace\\\";s:27:\\\"Symfony\\\\Component\\\\Messenger\\\";s:11:\\\"short_class\\\";s:19:\\\"TraceableMessageBus\\\";s:5:\\\"class\\\";s:47:\\\"Symfony\\\\Component\\\\Messenger\\\\TraceableMessageBus\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:8:\\\"dispatch\\\";s:4:\\\"file\\\";s:84:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/RoutableMessageBus.php\\\";s:4:\\\"line\\\";i:54;s:4:\\\"args\\\";a:0:{}}i:30;a:8:{s:9:\\\"namespace\\\";s:27:\\\"Symfony\\\\Component\\\\Messenger\\\";s:11:\\\"short_class\\\";s:18:\\\"RoutableMessageBus\\\";s:5:\\\"class\\\";s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\RoutableMessageBus\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:8:\\\"dispatch\\\";s:4:\\\"file\\\";s:72:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Worker.php\\\";s:4:\\\"line\\\";i:114;s:4:\\\"args\\\";a:0:{}}i:31;a:8:{s:9:\\\"namespace\\\";s:27:\\\"Symfony\\\\Component\\\\Messenger\\\";s:11:\\\"short_class\\\";s:6:\\\"Worker\\\";s:5:\\\"class\\\";s:34:\\\"Symfony\\\\Component\\\\Messenger\\\\Worker\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:13:\\\"handleMessage\\\";s:4:\\\"file\\\";s:72:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Worker.php\\\";s:4:\\\"line\\\";i:77;s:4:\\\"args\\\";a:0:{}}i:32;a:8:{s:9:\\\"namespace\\\";s:27:\\\"Symfony\\\\Component\\\\Messenger\\\";s:11:\\\"short_class\\\";s:6:\\\"Worker\\\";s:5:\\\"class\\\";s:34:\\\"Symfony\\\\Component\\\\Messenger\\\\Worker\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:3:\\\"run\\\";s:4:\\\"file\\\";s:96:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Command/ConsumeMessagesCommand.php\\\";s:4:\\\"line\\\";i:197;s:4:\\\"args\\\";a:0:{}}i:33;a:8:{s:9:\\\"namespace\\\";s:35:\\\"Symfony\\\\Component\\\\Messenger\\\\Command\\\";s:11:\\\"short_class\\\";s:22:\\\"ConsumeMessagesCommand\\\";s:5:\\\"class\\\";s:58:\\\"Symfony\\\\Component\\\\Messenger\\\\Command\\\\ConsumeMessagesCommand\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:7:\\\"execute\\\";s:4:\\\"file\\\";s:79:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Command/Command.php\\\";s:4:\\\"line\\\";i:256;s:4:\\\"args\\\";a:0:{}}i:34;a:8:{s:9:\\\"namespace\\\";s:33:\\\"Symfony\\\\Component\\\\Console\\\\Command\\\";s:11:\\\"short_class\\\";s:7:\\\"Command\\\";s:5:\\\"class\\\";s:41:\\\"Symfony\\\\Component\\\\Console\\\\Command\\\\Command\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:3:\\\"run\\\";s:4:\\\"file\\\";s:75:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Application.php\\\";s:4:\\\"line\\\";i:989;s:4:\\\"args\\\";a:0:{}}i:35;a:8:{s:9:\\\"namespace\\\";s:25:\\\"Symfony\\\\Component\\\\Console\\\";s:11:\\\"short_class\\\";s:11:\\\"Application\\\";s:5:\\\"class\\\";s:37:\\\"Symfony\\\\Component\\\\Console\\\\Application\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:12:\\\"doRunCommand\\\";s:4:\\\"file\\\";s:92:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/framework-bundle/Console/Application.php\\\";s:4:\\\"line\\\";i:96;s:4:\\\"args\\\";a:0:{}}i:36;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Bundle\\\\FrameworkBundle\\\\Console\\\";s:11:\\\"short_class\\\";s:11:\\\"Application\\\";s:5:\\\"class\\\";s:50:\\\"Symfony\\\\Bundle\\\\FrameworkBundle\\\\Console\\\\Application\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:12:\\\"doRunCommand\\\";s:4:\\\"file\\\";s:75:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Application.php\\\";s:4:\\\"line\\\";i:290;s:4:\\\"args\\\";a:0:{}}i:37;a:8:{s:9:\\\"namespace\\\";s:25:\\\"Symfony\\\\Component\\\\Console\\\";s:11:\\\"short_class\\\";s:11:\\\"Application\\\";s:5:\\\"class\\\";s:37:\\\"Symfony\\\\Component\\\\Console\\\\Application\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:5:\\\"doRun\\\";s:4:\\\"file\\\";s:92:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/framework-bundle/Console/Application.php\\\";s:4:\\\"line\\\";i:82;s:4:\\\"args\\\";a:0:{}}i:38;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Bundle\\\\FrameworkBundle\\\\Console\\\";s:11:\\\"short_class\\\";s:11:\\\"Application\\\";s:5:\\\"class\\\";s:50:\\\"Symfony\\\\Bundle\\\\FrameworkBundle\\\\Console\\\\Application\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:5:\\\"doRun\\\";s:4:\\\"file\\\";s:75:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Application.php\\\";s:4:\\\"line\\\";i:166;s:4:\\\"args\\\";a:0:{}}i:39;a:8:{s:9:\\\"namespace\\\";s:25:\\\"Symfony\\\\Component\\\\Console\\\";s:11:\\\"short_class\\\";s:11:\\\"Application\\\";s:5:\\\"class\\\";s:37:\\\"Symfony\\\\Component\\\\Console\\\\Application\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:3:\\\"run\\\";s:4:\\\"file\\\";s:48:\\\"/home/massoud/www/Symfony/Newsletter/bin/console\\\";s:4:\\\"line\\\";i:43;s:4:\\\"args\\\";a:0:{}}}s:72:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0traceAsString\\\";s:6402:\\\"#0 /home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Transport/Smtp/SmtpTransport.php(180): Symfony\\\\Component\\\\Mailer\\\\Transport\\\\Smtp\\\\SmtpTransport->assertResponseCode()\n#1 /home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Transport/Smtp/SmtpTransport.php(233): Symfony\\\\Component\\\\Mailer\\\\Transport\\\\Smtp\\\\SmtpTransport->executeCommand()\n#2 /home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Transport/Smtp/SmtpTransport.php(197): Symfony\\\\Component\\\\Mailer\\\\Transport\\\\Smtp\\\\SmtpTransport->doMailFromCommand()\n#3 /home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Transport/AbstractTransport.php(68): Symfony\\\\Component\\\\Mailer\\\\Transport\\\\Smtp\\\\SmtpTransport->doSend()\n#4 /home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Transport/Smtp/SmtpTransport.php(132): Symfony\\\\Component\\\\Mailer\\\\Transport\\\\AbstractTransport->send()\n#5 /home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Transport/Transports.php(51): Symfony\\\\Component\\\\Mailer\\\\Transport\\\\Smtp\\\\SmtpTransport->send()\n#6 /home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Messenger/MessageHandler.php(31): Symfony\\\\Component\\\\Mailer\\\\Transport\\\\Transports->send()\n#7 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/HandleMessageMiddleware.php(63): Symfony\\\\Component\\\\Mailer\\\\Messenger\\\\MessageHandler->__invoke()\n#8 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/SendMessageMiddleware.php(74): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\HandleMessageMiddleware->handle()\n#9 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/FailedMessageProcessingMiddleware.php(34): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\SendMessageMiddleware->handle()\n#10 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/DispatchAfterCurrentBusMiddleware.php(61): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\FailedMessageProcessingMiddleware->handle()\n#11 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/RejectRedeliveredMessageMiddleware.php(48): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\DispatchAfterCurrentBusMiddleware->handle()\n#12 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/AddBusNameStampMiddleware.php(37): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\RejectRedeliveredMessageMiddleware->handle()\n#13 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/TraceableMiddleware.php(43): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\AddBusNameStampMiddleware->handle()\n#14 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/MessageBus.php(77): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\TraceableMiddleware->handle()\n#15 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/TraceableMessageBus.php(41): Symfony\\\\Component\\\\Messenger\\\\MessageBus->dispatch()\n#16 /home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Mailer.php(54): Symfony\\\\Component\\\\Messenger\\\\TraceableMessageBus->dispatch()\n#17 /home/massoud/www/Symfony/Newsletter/src/Service/SendNewsletterService.php(29): Symfony\\\\Component\\\\Mailer\\\\Mailer->send()\n#18 /home/massoud/www/Symfony/Newsletter/src/MessageHandler/SendNewsletterMessageHandler.php(31): App\\\\Service\\\\SendNewsletterService->send()\n#19 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/HandleMessageMiddleware.php(63): App\\\\MessageHandler\\\\SendNewsletterMessageHandler->__invoke()\n#20 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/SendMessageMiddleware.php(74): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\HandleMessageMiddleware->handle()\n#21 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/FailedMessageProcessingMiddleware.php(34): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\SendMessageMiddleware->handle()\n#22 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/DispatchAfterCurrentBusMiddleware.php(68): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\FailedMessageProcessingMiddleware->handle()\n#23 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/RejectRedeliveredMessageMiddleware.php(48): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\DispatchAfterCurrentBusMiddleware->handle()\n#24 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/AddBusNameStampMiddleware.php(37): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\RejectRedeliveredMessageMiddleware->handle()\n#25 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/TraceableMiddleware.php(43): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\AddBusNameStampMiddleware->handle()\n#26 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/MessageBus.php(77): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\TraceableMiddleware->handle()\n#27 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/TraceableMessageBus.php(41): Symfony\\\\Component\\\\Messenger\\\\MessageBus->dispatch()\n#28 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/RoutableMessageBus.php(54): Symfony\\\\Component\\\\Messenger\\\\TraceableMessageBus->dispatch()\n#29 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Worker.php(114): Symfony\\\\Component\\\\Messenger\\\\RoutableMessageBus->dispatch()\n#30 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Worker.php(77): Symfony\\\\Component\\\\Messenger\\\\Worker->handleMessage()\n#31 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Command/ConsumeMessagesCommand.php(197): Symfony\\\\Component\\\\Messenger\\\\Worker->run()\n#32 /home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Command/Command.php(256): Symfony\\\\Component\\\\Messenger\\\\Command\\\\ConsumeMessagesCommand->execute()\n#33 /home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Application.php(989): Symfony\\\\Component\\\\Console\\\\Command\\\\Command->run()\n#34 /home/massoud/www/Symfony/Newsletter/vendor/symfony/framework-bundle/Console/Application.php(96): Symfony\\\\Component\\\\Console\\\\Application->doRunCommand()\n#35 /home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Application.php(290): Symfony\\\\Bundle\\\\FrameworkBundle\\\\Console\\\\Application->doRunCommand()\n#36 /home/massoud/www/Symfony/Newsletter/vendor/symfony/framework-bundle/Console/Application.php(82): Symfony\\\\Component\\\\Console\\\\Application->doRun()\n#37 /home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Application.php(166): Symfony\\\\Bundle\\\\FrameworkBundle\\\\Console\\\\Application->doRun()\n#38 /home/massoud/www/Symfony/Newsletter/bin/console(43): Symfony\\\\Component\\\\Console\\\\Application->run()\n#39 {main}\\\";s:64:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0class\\\";s:53:\\\"Symfony\\\\Component\\\\Mailer\\\\Exception\\\\TransportException\\\";s:69:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0statusCode\\\";i:500;s:69:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0statusText\\\";s:21:\\\"Internal Server Error\\\";s:66:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0headers\\\";a:0:{}s:63:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0file\\\";s:91:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Transport/Smtp/SmtpTransport.php\\\";s:63:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0line\\\";i:306;s:67:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0asString\\\";N;}s:64:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0trace\\\";a:32:{i:0;a:8:{s:9:\\\"namespace\\\";s:0:\\\"\\\";s:11:\\\"short_class\\\";s:0:\\\"\\\";s:5:\\\"class\\\";s:0:\\\"\\\";s:4:\\\"type\\\";s:0:\\\"\\\";s:8:\\\"function\\\";s:0:\\\"\\\";s:4:\\\"file\\\";s:100:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/HandleMessageMiddleware.php\\\";s:4:\\\"line\\\";i:80;s:4:\\\"args\\\";a:0:{}}i:1;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:23:\\\"HandleMessageMiddleware\\\";s:5:\\\"class\\\";s:62:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\HandleMessageMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:98:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/SendMessageMiddleware.php\\\";s:4:\\\"line\\\";i:74;s:4:\\\"args\\\";a:0:{}}i:2;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:21:\\\"SendMessageMiddleware\\\";s:5:\\\"class\\\";s:60:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\SendMessageMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:110:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/FailedMessageProcessingMiddleware.php\\\";s:4:\\\"line\\\";i:34;s:4:\\\"args\\\";a:0:{}}i:3;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:33:\\\"FailedMessageProcessingMiddleware\\\";s:5:\\\"class\\\";s:72:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\FailedMessageProcessingMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:110:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/DispatchAfterCurrentBusMiddleware.php\\\";s:4:\\\"line\\\";i:61;s:4:\\\"args\\\";a:0:{}}i:4;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:33:\\\"DispatchAfterCurrentBusMiddleware\\\";s:5:\\\"class\\\";s:72:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\DispatchAfterCurrentBusMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:111:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/RejectRedeliveredMessageMiddleware.php\\\";s:4:\\\"line\\\";i:48;s:4:\\\"args\\\";a:0:{}}i:5;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:34:\\\"RejectRedeliveredMessageMiddleware\\\";s:5:\\\"class\\\";s:73:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\RejectRedeliveredMessageMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:102:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/AddBusNameStampMiddleware.php\\\";s:4:\\\"line\\\";i:37;s:4:\\\"args\\\";a:0:{}}i:6;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:25:\\\"AddBusNameStampMiddleware\\\";s:5:\\\"class\\\";s:64:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\AddBusNameStampMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:96:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/TraceableMiddleware.php\\\";s:4:\\\"line\\\";i:43;s:4:\\\"args\\\";a:0:{}}i:7;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:19:\\\"TraceableMiddleware\\\";s:5:\\\"class\\\";s:58:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\TraceableMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:76:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/MessageBus.php\\\";s:4:\\\"line\\\";i:77;s:4:\\\"args\\\";a:0:{}}i:8;a:8:{s:9:\\\"namespace\\\";s:27:\\\"Symfony\\\\Component\\\\Messenger\\\";s:11:\\\"short_class\\\";s:10:\\\"MessageBus\\\";s:5:\\\"class\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\MessageBus\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:8:\\\"dispatch\\\";s:4:\\\"file\\\";s:85:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/TraceableMessageBus.php\\\";s:4:\\\"line\\\";i:41;s:4:\\\"args\\\";a:0:{}}i:9;a:8:{s:9:\\\"namespace\\\";s:27:\\\"Symfony\\\\Component\\\\Messenger\\\";s:11:\\\"short_class\\\";s:19:\\\"TraceableMessageBus\\\";s:5:\\\"class\\\";s:47:\\\"Symfony\\\\Component\\\\Messenger\\\\TraceableMessageBus\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:8:\\\"dispatch\\\";s:4:\\\"file\\\";s:69:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Mailer.php\\\";s:4:\\\"line\\\";i:54;s:4:\\\"args\\\";a:0:{}}i:10;a:8:{s:9:\\\"namespace\\\";s:24:\\\"Symfony\\\\Component\\\\Mailer\\\";s:11:\\\"short_class\\\";s:6:\\\"Mailer\\\";s:5:\\\"class\\\";s:31:\\\"Symfony\\\\Component\\\\Mailer\\\\Mailer\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:4:\\\"send\\\";s:4:\\\"file\\\";s:74:\\\"/home/massoud/www/Symfony/Newsletter/src/Service/SendNewsletterService.php\\\";s:4:\\\"line\\\";i:29;s:4:\\\"args\\\";a:0:{}}i:11;a:8:{s:9:\\\"namespace\\\";s:11:\\\"App\\\\Service\\\";s:11:\\\"short_class\\\";s:21:\\\"SendNewsletterService\\\";s:5:\\\"class\\\";s:33:\\\"App\\\\Service\\\\SendNewsletterService\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:4:\\\"send\\\";s:4:\\\"file\\\";s:88:\\\"/home/massoud/www/Symfony/Newsletter/src/MessageHandler/SendNewsletterMessageHandler.php\\\";s:4:\\\"line\\\";i:31;s:4:\\\"args\\\";a:0:{}}i:12;a:8:{s:9:\\\"namespace\\\";s:18:\\\"App\\\\MessageHandler\\\";s:11:\\\"short_class\\\";s:28:\\\"SendNewsletterMessageHandler\\\";s:5:\\\"class\\\";s:47:\\\"App\\\\MessageHandler\\\\SendNewsletterMessageHandler\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:8:\\\"__invoke\\\";s:4:\\\"file\\\";s:100:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/HandleMessageMiddleware.php\\\";s:4:\\\"line\\\";i:63;s:4:\\\"args\\\";a:0:{}}i:13;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:23:\\\"HandleMessageMiddleware\\\";s:5:\\\"class\\\";s:62:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\HandleMessageMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:98:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/SendMessageMiddleware.php\\\";s:4:\\\"line\\\";i:74;s:4:\\\"args\\\";a:0:{}}i:14;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:21:\\\"SendMessageMiddleware\\\";s:5:\\\"class\\\";s:60:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\SendMessageMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:110:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/FailedMessageProcessingMiddleware.php\\\";s:4:\\\"line\\\";i:34;s:4:\\\"args\\\";a:0:{}}i:15;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:33:\\\"FailedMessageProcessingMiddleware\\\";s:5:\\\"class\\\";s:72:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\FailedMessageProcessingMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:110:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/DispatchAfterCurrentBusMiddleware.php\\\";s:4:\\\"line\\\";i:68;s:4:\\\"args\\\";a:0:{}}i:16;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:33:\\\"DispatchAfterCurrentBusMiddleware\\\";s:5:\\\"class\\\";s:72:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\DispatchAfterCurrentBusMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:111:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/RejectRedeliveredMessageMiddleware.php\\\";s:4:\\\"line\\\";i:48;s:4:\\\"args\\\";a:0:{}}i:17;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:34:\\\"RejectRedeliveredMessageMiddleware\\\";s:5:\\\"class\\\";s:73:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\RejectRedeliveredMessageMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:102:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/AddBusNameStampMiddleware.php\\\";s:4:\\\"line\\\";i:37;s:4:\\\"args\\\";a:0:{}}i:18;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:25:\\\"AddBusNameStampMiddleware\\\";s:5:\\\"class\\\";s:64:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\AddBusNameStampMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:96:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/TraceableMiddleware.php\\\";s:4:\\\"line\\\";i:43;s:4:\\\"args\\\";a:0:{}}i:19;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:19:\\\"TraceableMiddleware\\\";s:5:\\\"class\\\";s:58:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\TraceableMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:76:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/MessageBus.php\\\";s:4:\\\"line\\\";i:77;s:4:\\\"args\\\";a:0:{}}i:20;a:8:{s:9:\\\"namespace\\\";s:27:\\\"Symfony\\\\Component\\\\Messenger\\\";s:11:\\\"short_class\\\";s:10:\\\"MessageBus\\\";s:5:\\\"class\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\MessageBus\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:8:\\\"dispatch\\\";s:4:\\\"file\\\";s:85:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/TraceableMessageBus.php\\\";s:4:\\\"line\\\";i:41;s:4:\\\"args\\\";a:0:{}}i:21;a:8:{s:9:\\\"namespace\\\";s:27:\\\"Symfony\\\\Component\\\\Messenger\\\";s:11:\\\"short_class\\\";s:19:\\\"TraceableMessageBus\\\";s:5:\\\"class\\\";s:47:\\\"Symfony\\\\Component\\\\Messenger\\\\TraceableMessageBus\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:8:\\\"dispatch\\\";s:4:\\\"file\\\";s:84:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/RoutableMessageBus.php\\\";s:4:\\\"line\\\";i:54;s:4:\\\"args\\\";a:0:{}}i:22;a:8:{s:9:\\\"namespace\\\";s:27:\\\"Symfony\\\\Component\\\\Messenger\\\";s:11:\\\"short_class\\\";s:18:\\\"RoutableMessageBus\\\";s:5:\\\"class\\\";s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\RoutableMessageBus\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:8:\\\"dispatch\\\";s:4:\\\"file\\\";s:72:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Worker.php\\\";s:4:\\\"line\\\";i:114;s:4:\\\"args\\\";a:0:{}}i:23;a:8:{s:9:\\\"namespace\\\";s:27:\\\"Symfony\\\\Component\\\\Messenger\\\";s:11:\\\"short_class\\\";s:6:\\\"Worker\\\";s:5:\\\"class\\\";s:34:\\\"Symfony\\\\Component\\\\Messenger\\\\Worker\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:13:\\\"handleMessage\\\";s:4:\\\"file\\\";s:72:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Worker.php\\\";s:4:\\\"line\\\";i:77;s:4:\\\"args\\\";a:0:{}}i:24;a:8:{s:9:\\\"namespace\\\";s:27:\\\"Symfony\\\\Component\\\\Messenger\\\";s:11:\\\"short_class\\\";s:6:\\\"Worker\\\";s:5:\\\"class\\\";s:34:\\\"Symfony\\\\Component\\\\Messenger\\\\Worker\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:3:\\\"run\\\";s:4:\\\"file\\\";s:96:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Command/ConsumeMessagesCommand.php\\\";s:4:\\\"line\\\";i:197;s:4:\\\"args\\\";a:0:{}}i:25;a:8:{s:9:\\\"namespace\\\";s:35:\\\"Symfony\\\\Component\\\\Messenger\\\\Command\\\";s:11:\\\"short_class\\\";s:22:\\\"ConsumeMessagesCommand\\\";s:5:\\\"class\\\";s:58:\\\"Symfony\\\\Component\\\\Messenger\\\\Command\\\\ConsumeMessagesCommand\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:7:\\\"execute\\\";s:4:\\\"file\\\";s:79:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Command/Command.php\\\";s:4:\\\"line\\\";i:256;s:4:\\\"args\\\";a:0:{}}i:26;a:8:{s:9:\\\"namespace\\\";s:33:\\\"Symfony\\\\Component\\\\Console\\\\Command\\\";s:11:\\\"short_class\\\";s:7:\\\"Command\\\";s:5:\\\"class\\\";s:41:\\\"Symfony\\\\Component\\\\Console\\\\Command\\\\Command\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:3:\\\"run\\\";s:4:\\\"file\\\";s:75:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Application.php\\\";s:4:\\\"line\\\";i:989;s:4:\\\"args\\\";a:0:{}}i:27;a:8:{s:9:\\\"namespace\\\";s:25:\\\"Symfony\\\\Component\\\\Console\\\";s:11:\\\"short_class\\\";s:11:\\\"Application\\\";s:5:\\\"class\\\";s:37:\\\"Symfony\\\\Component\\\\Console\\\\Application\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:12:\\\"doRunCommand\\\";s:4:\\\"file\\\";s:92:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/framework-bundle/Console/Application.php\\\";s:4:\\\"line\\\";i:96;s:4:\\\"args\\\";a:0:{}}i:28;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Bundle\\\\FrameworkBundle\\\\Console\\\";s:11:\\\"short_class\\\";s:11:\\\"Application\\\";s:5:\\\"class\\\";s:50:\\\"Symfony\\\\Bundle\\\\FrameworkBundle\\\\Console\\\\Application\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:12:\\\"doRunCommand\\\";s:4:\\\"file\\\";s:75:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Application.php\\\";s:4:\\\"line\\\";i:290;s:4:\\\"args\\\";a:0:{}}i:29;a:8:{s:9:\\\"namespace\\\";s:25:\\\"Symfony\\\\Component\\\\Console\\\";s:11:\\\"short_class\\\";s:11:\\\"Application\\\";s:5:\\\"class\\\";s:37:\\\"Symfony\\\\Component\\\\Console\\\\Application\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:5:\\\"doRun\\\";s:4:\\\"file\\\";s:92:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/framework-bundle/Console/Application.php\\\";s:4:\\\"line\\\";i:82;s:4:\\\"args\\\";a:0:{}}i:30;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Bundle\\\\FrameworkBundle\\\\Console\\\";s:11:\\\"short_class\\\";s:11:\\\"Application\\\";s:5:\\\"class\\\";s:50:\\\"Symfony\\\\Bundle\\\\FrameworkBundle\\\\Console\\\\Application\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:5:\\\"doRun\\\";s:4:\\\"file\\\";s:75:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Application.php\\\";s:4:\\\"line\\\";i:166;s:4:\\\"args\\\";a:0:{}}i:31;a:8:{s:9:\\\"namespace\\\";s:25:\\\"Symfony\\\\Component\\\\Console\\\";s:11:\\\"short_class\\\";s:11:\\\"Application\\\";s:5:\\\"class\\\";s:37:\\\"Symfony\\\\Component\\\\Console\\\\Application\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:3:\\\"run\\\";s:4:\\\"file\\\";s:48:\\\"/home/massoud/www/Symfony/Newsletter/bin/console\\\";s:4:\\\"line\\\";i:43;s:4:\\\"args\\\";a:0:{}}}s:72:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0traceAsString\\\";s:5068:\\\"#0 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/SendMessageMiddleware.php(74): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\HandleMessageMiddleware->handle()\n#1 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/FailedMessageProcessingMiddleware.php(34): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\SendMessageMiddleware->handle()\n#2 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/DispatchAfterCurrentBusMiddleware.php(61): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\FailedMessageProcessingMiddleware->handle()\n#3 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/RejectRedeliveredMessageMiddleware.php(48): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\DispatchAfterCurrentBusMiddleware->handle()\n#4 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/AddBusNameStampMiddleware.php(37): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\RejectRedeliveredMessageMiddleware->handle()\n#5 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/TraceableMiddleware.php(43): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\AddBusNameStampMiddleware->handle()\n#6 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/MessageBus.php(77): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\TraceableMiddleware->handle()\n#7 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/TraceableMessageBus.php(41): Symfony\\\\Component\\\\Messenger\\\\MessageBus->dispatch()\n#8 /home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Mailer.php(54): Symfony\\\\Component\\\\Messenger\\\\TraceableMessageBus->dispatch()\n#9 /home/massoud/www/Symfony/Newsletter/src/Service/SendNewsletterService.php(29): Symfony\\\\Component\\\\Mailer\\\\Mailer->send()\n#10 /home/massoud/www/Symfony/Newsletter/src/MessageHandler/SendNewsletterMessageHandler.php(31): App\\\\Service\\\\SendNewsletterService->send()\n#11 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/HandleMessageMiddleware.php(63): App\\\\MessageHandler\\\\SendNewsletterMessageHandler->__invoke()\n#12 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/SendMessageMiddleware.php(74): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\HandleMessageMiddleware->handle()\n#13 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/FailedMessageProcessingMiddleware.php(34): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\SendMessageMiddleware->handle()\n#14 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/DispatchAfterCurrentBusMiddleware.php(68): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\FailedMessageProcessingMiddleware->handle()\n#15 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/RejectRedeliveredMessageMiddleware.php(48): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\DispatchAfterCurrentBusMiddleware->handle()\n#16 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/AddBusNameStampMiddleware.php(37): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\RejectRedeliveredMessageMiddleware->handle()\n#17 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/TraceableMiddleware.php(43): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\AddBusNameStampMiddleware->handle()\n#18 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/MessageBus.php(77): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\TraceableMiddleware->handle()\n#19 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/TraceableMessageBus.php(41): Symfony\\\\Component\\\\Messenger\\\\MessageBus->dispatch()\n#20 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/RoutableMessageBus.php(54): Symfony\\\\Component\\\\Messenger\\\\TraceableMessageBus->dispatch()\n#21 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Worker.php(114): Symfony\\\\Component\\\\Messenger\\\\RoutableMessageBus->dispatch()\n#22 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Worker.php(77): Symfony\\\\Component\\\\Messenger\\\\Worker->handleMessage()\n#23 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Command/ConsumeMessagesCommand.php(197): Symfony\\\\Component\\\\Messenger\\\\Worker->run()\n#24 /home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Command/Command.php(256): Symfony\\\\Component\\\\Messenger\\\\Command\\\\ConsumeMessagesCommand->execute()\n#25 /home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Application.php(989): Symfony\\\\Component\\\\Console\\\\Command\\\\Command->run()\n#26 /home/massoud/www/Symfony/Newsletter/vendor/symfony/framework-bundle/Console/Application.php(96): Symfony\\\\Component\\\\Console\\\\Application->doRunCommand()\n#27 /home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Application.php(290): Symfony\\\\Bundle\\\\FrameworkBundle\\\\Console\\\\Application->doRunCommand()\n#28 /home/massoud/www/Symfony/Newsletter/vendor/symfony/framework-bundle/Console/Application.php(82): Symfony\\\\Component\\\\Console\\\\Application->doRun()\n#29 /home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Application.php(166): Symfony\\\\Bundle\\\\FrameworkBundle\\\\Console\\\\Application->doRun()\n#30 /home/massoud/www/Symfony/Newsletter/bin/console(43): Symfony\\\\Component\\\\Console\\\\Application->run()\n#31 {main}\\\";s:64:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0class\\\";s:60:\\\"Symfony\\\\Component\\\\Messenger\\\\Exception\\\\HandlerFailedException\\\";s:69:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0statusCode\\\";i:500;s:69:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0statusText\\\";s:21:\\\"Internal Server Error\\\";s:66:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0headers\\\";a:0:{}s:63:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0file\\\";s:100:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/HandleMessageMiddleware.php\\\";s:63:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0line\\\";i:80;s:67:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0asString\\\";N;}}}s:61:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\SentToFailureTransportStamp\\\";a:1:{i:0;O:61:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\SentToFailureTransportStamp\\\":1:{s:83:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\SentToFailureTransportStamp\\0originalReceiverName\\\";s:5:\\\"async\\\";}}s:44:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\DelayStamp\\\";a:1:{i:0;O:44:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\DelayStamp\\\":1:{s:51:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\DelayStamp\\0delay\\\";i:0;}}s:49:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\RedeliveryStamp\\\";a:1:{i:0;O:49:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\RedeliveryStamp\\\":4:{s:61:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\RedeliveryStamp\\0retryCount\\\";i:0;s:64:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\RedeliveryStamp\\0redeliveredAt\\\";O:17:\\\"DateTimeImmutable\\\":3:{s:4:\\\"date\\\";s:26:\\\"2024-01-10 13:30:56.980648\\\";s:13:\\\"timezone_type\\\";i:3;s:8:\\\"timezone\\\";s:3:\\\"UTC\\\";}s:67:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\RedeliveryStamp\\0exceptionMessage\\\";N;s:67:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\RedeliveryStamp\\0flattenException\\\";N;}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"failed","4":"2024-01-10 13:30:56","5":"2024-01-10 13:30:56"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?)","params":{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:6:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}s:57:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\TransportMessageIdStamp\\\";a:1:{i:0;O:57:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\TransportMessageIdStamp\\\":1:{s:61:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\TransportMessageIdStamp\\0id\\\";i:10;}}s:51:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\ErrorDetailsStamp\\\";a:1:{i:0;O:51:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\ErrorDetailsStamp\\\":4:{s:67:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\ErrorDetailsStamp\\0exceptionClass\\\";s:60:\\\"Symfony\\\\Component\\\\Messenger\\\\Exception\\\\HandlerFailedException\\\";s:66:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\ErrorDetailsStamp\\0exceptionCode\\\";i:421;s:69:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\ErrorDetailsStamp\\0exceptionMessage\\\";s:97:\\\"Expected response code \\\"250\\\" but got code \\\"421\\\", with message \\\"421 Timeout - closing connection\\\".\\\";s:69:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\ErrorDetailsStamp\\0flattenException\\\";O:57:\\\"Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\\":12:{s:66:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0message\\\";s:97:\\\"Expected response code \\\"250\\\" but got code \\\"421\\\", with message \\\"421 Timeout - closing connection\\\".\\\";s:63:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0code\\\";i:421;s:67:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0previous\\\";O:57:\\\"Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\\":12:{s:66:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0message\\\";s:97:\\\"Expected response code \\\"250\\\" but got code \\\"421\\\", with message \\\"421 Timeout - closing connection\\\".\\\";s:63:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0code\\\";i:421;s:67:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0previous\\\";N;s:64:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0trace\\\";a:40:{i:0;a:8:{s:9:\\\"namespace\\\";s:0:\\\"\\\";s:11:\\\"short_class\\\";s:0:\\\"\\\";s:5:\\\"class\\\";s:0:\\\"\\\";s:4:\\\"type\\\";s:0:\\\"\\\";s:8:\\\"function\\\";s:0:\\\"\\\";s:4:\\\"file\\\";s:91:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Transport/Smtp/SmtpTransport.php\\\";s:4:\\\"line\\\";i:306;s:4:\\\"args\\\";a:0:{}}i:1;a:8:{s:9:\\\"namespace\\\";s:39:\\\"Symfony\\\\Component\\\\Mailer\\\\Transport\\\\Smtp\\\";s:11:\\\"short_class\\\";s:13:\\\"SmtpTransport\\\";s:5:\\\"class\\\";s:53:\\\"Symfony\\\\Component\\\\Mailer\\\\Transport\\\\Smtp\\\\SmtpTransport\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:18:\\\"assertResponseCode\\\";s:4:\\\"file\\\";s:91:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Transport/Smtp/SmtpTransport.php\\\";s:4:\\\"line\\\";i:180;s:4:\\\"args\\\";a:0:{}}i:2;a:8:{s:9:\\\"namespace\\\";s:39:\\\"Symfony\\\\Component\\\\Mailer\\\\Transport\\\\Smtp\\\";s:11:\\\"short_class\\\";s:13:\\\"SmtpTransport\\\";s:5:\\\"class\\\";s:53:\\\"Symfony\\\\Component\\\\Mailer\\\\Transport\\\\Smtp\\\\SmtpTransport\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:14:\\\"executeCommand\\\";s:4:\\\"file\\\";s:91:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Transport/Smtp/SmtpTransport.php\\\";s:4:\\\"line\\\";i:233;s:4:\\\"args\\\";a:0:{}}i:3;a:8:{s:9:\\\"namespace\\\";s:39:\\\"Symfony\\\\Component\\\\Mailer\\\\Transport\\\\Smtp\\\";s:11:\\\"short_class\\\";s:13:\\\"SmtpTransport\\\";s:5:\\\"class\\\";s:53:\\\"Symfony\\\\Component\\\\Mailer\\\\Transport\\\\Smtp\\\\SmtpTransport\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:17:\\\"doMailFromCommand\\\";s:4:\\\"file\\\";s:91:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Transport/Smtp/SmtpTransport.php\\\";s:4:\\\"line\\\";i:197;s:4:\\\"args\\\";a:0:{}}i:4;a:8:{s:9:\\\"namespace\\\";s:39:\\\"Symfony\\\\Component\\\\Mailer\\\\Transport\\\\Smtp\\\";s:11:\\\"short_class\\\";s:13:\\\"SmtpTransport\\\";s:5:\\\"class\\\";s:53:\\\"Symfony\\\\Component\\\\Mailer\\\\Transport\\\\Smtp\\\\SmtpTransport\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"doSend\\\";s:4:\\\"file\\\";s:90:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Transport/AbstractTransport.php\\\";s:4:\\\"line\\\";i:68;s:4:\\\"args\\\";a:0:{}}i:5;a:8:{s:9:\\\"namespace\\\";s:34:\\\"Symfony\\\\Component\\\\Mailer\\\\Transport\\\";s:11:\\\"short_class\\\";s:17:\\\"AbstractTransport\\\";s:5:\\\"class\\\";s:52:\\\"Symfony\\\\Component\\\\Mailer\\\\Transport\\\\AbstractTransport\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:4:\\\"send\\\";s:4:\\\"file\\\";s:91:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Transport/Smtp/SmtpTransport.php\\\";s:4:\\\"line\\\";i:132;s:4:\\\"args\\\";a:0:{}}i:6;a:8:{s:9:\\\"namespace\\\";s:39:\\\"Symfony\\\\Component\\\\Mailer\\\\Transport\\\\Smtp\\\";s:11:\\\"short_class\\\";s:13:\\\"SmtpTransport\\\";s:5:\\\"class\\\";s:53:\\\"Symfony\\\\Component\\\\Mailer\\\\Transport\\\\Smtp\\\\SmtpTransport\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:4:\\\"send\\\";s:4:\\\"file\\\";s:83:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Transport/Transports.php\\\";s:4:\\\"line\\\";i:51;s:4:\\\"args\\\";a:0:{}}i:7;a:8:{s:9:\\\"namespace\\\";s:34:\\\"Symfony\\\\Component\\\\Mailer\\\\Transport\\\";s:11:\\\"short_class\\\";s:10:\\\"Transports\\\";s:5:\\\"class\\\";s:45:\\\"Symfony\\\\Component\\\\Mailer\\\\Transport\\\\Transports\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:4:\\\"send\\\";s:4:\\\"file\\\";s:87:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Messenger/MessageHandler.php\\\";s:4:\\\"line\\\";i:31;s:4:\\\"args\\\";a:0:{}}i:8;a:8:{s:9:\\\"namespace\\\";s:34:\\\"Symfony\\\\Component\\\\Mailer\\\\Messenger\\\";s:11:\\\"short_class\\\";s:14:\\\"MessageHandler\\\";s:5:\\\"class\\\";s:49:\\\"Symfony\\\\Component\\\\Mailer\\\\Messenger\\\\MessageHandler\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:8:\\\"__invoke\\\";s:4:\\\"file\\\";s:100:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/HandleMessageMiddleware.php\\\";s:4:\\\"line\\\";i:63;s:4:\\\"args\\\";a:0:{}}i:9;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:23:\\\"HandleMessageMiddleware\\\";s:5:\\\"class\\\";s:62:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\HandleMessageMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:98:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/SendMessageMiddleware.php\\\";s:4:\\\"line\\\";i:74;s:4:\\\"args\\\";a:0:{}}i:10;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:21:\\\"SendMessageMiddleware\\\";s:5:\\\"class\\\";s:60:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\SendMessageMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:110:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/FailedMessageProcessingMiddleware.php\\\";s:4:\\\"line\\\";i:34;s:4:\\\"args\\\";a:0:{}}i:11;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:33:\\\"FailedMessageProcessingMiddleware\\\";s:5:\\\"class\\\";s:72:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\FailedMessageProcessingMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:110:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/DispatchAfterCurrentBusMiddleware.php\\\";s:4:\\\"line\\\";i:61;s:4:\\\"args\\\";a:0:{}}i:12;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:33:\\\"DispatchAfterCurrentBusMiddleware\\\";s:5:\\\"class\\\";s:72:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\DispatchAfterCurrentBusMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:111:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/RejectRedeliveredMessageMiddleware.php\\\";s:4:\\\"line\\\";i:48;s:4:\\\"args\\\";a:0:{}}i:13;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:34:\\\"RejectRedeliveredMessageMiddleware\\\";s:5:\\\"class\\\";s:73:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\RejectRedeliveredMessageMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:102:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/AddBusNameStampMiddleware.php\\\";s:4:\\\"line\\\";i:37;s:4:\\\"args\\\";a:0:{}}i:14;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:25:\\\"AddBusNameStampMiddleware\\\";s:5:\\\"class\\\";s:64:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\AddBusNameStampMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:96:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/TraceableMiddleware.php\\\";s:4:\\\"line\\\";i:43;s:4:\\\"args\\\";a:0:{}}i:15;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:19:\\\"TraceableMiddleware\\\";s:5:\\\"class\\\";s:58:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\TraceableMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:76:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/MessageBus.php\\\";s:4:\\\"line\\\";i:77;s:4:\\\"args\\\";a:0:{}}i:16;a:8:{s:9:\\\"namespace\\\";s:27:\\\"Symfony\\\\Component\\\\Messenger\\\";s:11:\\\"short_class\\\";s:10:\\\"MessageBus\\\";s:5:\\\"class\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\MessageBus\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:8:\\\"dispatch\\\";s:4:\\\"file\\\";s:85:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/TraceableMessageBus.php\\\";s:4:\\\"line\\\";i:41;s:4:\\\"args\\\";a:0:{}}i:17;a:8:{s:9:\\\"namespace\\\";s:27:\\\"Symfony\\\\Component\\\\Messenger\\\";s:11:\\\"short_class\\\";s:19:\\\"TraceableMessageBus\\\";s:5:\\\"class\\\";s:47:\\\"Symfony\\\\Component\\\\Messenger\\\\TraceableMessageBus\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:8:\\\"dispatch\\\";s:4:\\\"file\\\";s:69:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Mailer.php\\\";s:4:\\\"line\\\";i:54;s:4:\\\"args\\\";a:0:{}}i:18;a:8:{s:9:\\\"namespace\\\";s:24:\\\"Symfony\\\\Component\\\\Mailer\\\";s:11:\\\"short_class\\\";s:6:\\\"Mailer\\\";s:5:\\\"class\\\";s:31:\\\"Symfony\\\\Component\\\\Mailer\\\\Mailer\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:4:\\\"send\\\";s:4:\\\"file\\\";s:74:\\\"/home/massoud/www/Symfony/Newsletter/src/Service/SendNewsletterService.php\\\";s:4:\\\"line\\\";i:29;s:4:\\\"args\\\";a:0:{}}i:19;a:8:{s:9:\\\"namespace\\\";s:11:\\\"App\\\\Service\\\";s:11:\\\"short_class\\\";s:21:\\\"SendNewsletterService\\\";s:5:\\\"class\\\";s:33:\\\"App\\\\Service\\\\SendNewsletterService\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:4:\\\"send\\\";s:4:\\\"file\\\";s:88:\\\"/home/massoud/www/Symfony/Newsletter/src/MessageHandler/SendNewsletterMessageHandler.php\\\";s:4:\\\"line\\\";i:31;s:4:\\\"args\\\";a:0:{}}i:20;a:8:{s:9:\\\"namespace\\\";s:18:\\\"App\\\\MessageHandler\\\";s:11:\\\"short_class\\\";s:28:\\\"SendNewsletterMessageHandler\\\";s:5:\\\"class\\\";s:47:\\\"App\\\\MessageHandler\\\\SendNewsletterMessageHandler\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:8:\\\"__invoke\\\";s:4:\\\"file\\\";s:100:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/HandleMessageMiddleware.php\\\";s:4:\\\"line\\\";i:63;s:4:\\\"args\\\";a:0:{}}i:21;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:23:\\\"HandleMessageMiddleware\\\";s:5:\\\"class\\\";s:62:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\HandleMessageMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:98:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/SendMessageMiddleware.php\\\";s:4:\\\"line\\\";i:74;s:4:\\\"args\\\";a:0:{}}i:22;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:21:\\\"SendMessageMiddleware\\\";s:5:\\\"class\\\";s:60:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\SendMessageMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:110:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/FailedMessageProcessingMiddleware.php\\\";s:4:\\\"line\\\";i:34;s:4:\\\"args\\\";a:0:{}}i:23;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:33:\\\"FailedMessageProcessingMiddleware\\\";s:5:\\\"class\\\";s:72:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\FailedMessageProcessingMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:110:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/DispatchAfterCurrentBusMiddleware.php\\\";s:4:\\\"line\\\";i:68;s:4:\\\"args\\\";a:0:{}}i:24;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:33:\\\"DispatchAfterCurrentBusMiddleware\\\";s:5:\\\"class\\\";s:72:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\DispatchAfterCurrentBusMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:111:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/RejectRedeliveredMessageMiddleware.php\\\";s:4:\\\"line\\\";i:48;s:4:\\\"args\\\";a:0:{}}i:25;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:34:\\\"RejectRedeliveredMessageMiddleware\\\";s:5:\\\"class\\\";s:73:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\RejectRedeliveredMessageMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:102:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/AddBusNameStampMiddleware.php\\\";s:4:\\\"line\\\";i:37;s:4:\\\"args\\\";a:0:{}}i:26;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:25:\\\"AddBusNameStampMiddleware\\\";s:5:\\\"class\\\";s:64:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\AddBusNameStampMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:96:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/TraceableMiddleware.php\\\";s:4:\\\"line\\\";i:43;s:4:\\\"args\\\";a:0:{}}i:27;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:19:\\\"TraceableMiddleware\\\";s:5:\\\"class\\\";s:58:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\TraceableMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:76:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/MessageBus.php\\\";s:4:\\\"line\\\";i:77;s:4:\\\"args\\\";a:0:{}}i:28;a:8:{s:9:\\\"namespace\\\";s:27:\\\"Symfony\\\\Component\\\\Messenger\\\";s:11:\\\"short_class\\\";s:10:\\\"MessageBus\\\";s:5:\\\"class\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\MessageBus\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:8:\\\"dispatch\\\";s:4:\\\"file\\\";s:85:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/TraceableMessageBus.php\\\";s:4:\\\"line\\\";i:41;s:4:\\\"args\\\";a:0:{}}i:29;a:8:{s:9:\\\"namespace\\\";s:27:\\\"Symfony\\\\Component\\\\Messenger\\\";s:11:\\\"short_class\\\";s:19:\\\"TraceableMessageBus\\\";s:5:\\\"class\\\";s:47:\\\"Symfony\\\\Component\\\\Messenger\\\\TraceableMessageBus\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:8:\\\"dispatch\\\";s:4:\\\"file\\\";s:84:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/RoutableMessageBus.php\\\";s:4:\\\"line\\\";i:54;s:4:\\\"args\\\";a:0:{}}i:30;a:8:{s:9:\\\"namespace\\\";s:27:\\\"Symfony\\\\Component\\\\Messenger\\\";s:11:\\\"short_class\\\";s:18:\\\"RoutableMessageBus\\\";s:5:\\\"class\\\";s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\RoutableMessageBus\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:8:\\\"dispatch\\\";s:4:\\\"file\\\";s:72:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Worker.php\\\";s:4:\\\"line\\\";i:114;s:4:\\\"args\\\";a:0:{}}i:31;a:8:{s:9:\\\"namespace\\\";s:27:\\\"Symfony\\\\Component\\\\Messenger\\\";s:11:\\\"short_class\\\";s:6:\\\"Worker\\\";s:5:\\\"class\\\";s:34:\\\"Symfony\\\\Component\\\\Messenger\\\\Worker\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:13:\\\"handleMessage\\\";s:4:\\\"file\\\";s:72:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Worker.php\\\";s:4:\\\"line\\\";i:77;s:4:\\\"args\\\";a:0:{}}i:32;a:8:{s:9:\\\"namespace\\\";s:27:\\\"Symfony\\\\Component\\\\Messenger\\\";s:11:\\\"short_class\\\";s:6:\\\"Worker\\\";s:5:\\\"class\\\";s:34:\\\"Symfony\\\\Component\\\\Messenger\\\\Worker\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:3:\\\"run\\\";s:4:\\\"file\\\";s:96:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Command/ConsumeMessagesCommand.php\\\";s:4:\\\"line\\\";i:197;s:4:\\\"args\\\";a:0:{}}i:33;a:8:{s:9:\\\"namespace\\\";s:35:\\\"Symfony\\\\Component\\\\Messenger\\\\Command\\\";s:11:\\\"short_class\\\";s:22:\\\"ConsumeMessagesCommand\\\";s:5:\\\"class\\\";s:58:\\\"Symfony\\\\Component\\\\Messenger\\\\Command\\\\ConsumeMessagesCommand\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:7:\\\"execute\\\";s:4:\\\"file\\\";s:79:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Command/Command.php\\\";s:4:\\\"line\\\";i:256;s:4:\\\"args\\\";a:0:{}}i:34;a:8:{s:9:\\\"namespace\\\";s:33:\\\"Symfony\\\\Component\\\\Console\\\\Command\\\";s:11:\\\"short_class\\\";s:7:\\\"Command\\\";s:5:\\\"class\\\";s:41:\\\"Symfony\\\\Component\\\\Console\\\\Command\\\\Command\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:3:\\\"run\\\";s:4:\\\"file\\\";s:75:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Application.php\\\";s:4:\\\"line\\\";i:989;s:4:\\\"args\\\";a:0:{}}i:35;a:8:{s:9:\\\"namespace\\\";s:25:\\\"Symfony\\\\Component\\\\Console\\\";s:11:\\\"short_class\\\";s:11:\\\"Application\\\";s:5:\\\"class\\\";s:37:\\\"Symfony\\\\Component\\\\Console\\\\Application\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:12:\\\"doRunCommand\\\";s:4:\\\"file\\\";s:92:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/framework-bundle/Console/Application.php\\\";s:4:\\\"line\\\";i:96;s:4:\\\"args\\\";a:0:{}}i:36;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Bundle\\\\FrameworkBundle\\\\Console\\\";s:11:\\\"short_class\\\";s:11:\\\"Application\\\";s:5:\\\"class\\\";s:50:\\\"Symfony\\\\Bundle\\\\FrameworkBundle\\\\Console\\\\Application\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:12:\\\"doRunCommand\\\";s:4:\\\"file\\\";s:75:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Application.php\\\";s:4:\\\"line\\\";i:290;s:4:\\\"args\\\";a:0:{}}i:37;a:8:{s:9:\\\"namespace\\\";s:25:\\\"Symfony\\\\Component\\\\Console\\\";s:11:\\\"short_class\\\";s:11:\\\"Application\\\";s:5:\\\"class\\\";s:37:\\\"Symfony\\\\Component\\\\Console\\\\Application\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:5:\\\"doRun\\\";s:4:\\\"file\\\";s:92:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/framework-bundle/Console/Application.php\\\";s:4:\\\"line\\\";i:82;s:4:\\\"args\\\";a:0:{}}i:38;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Bundle\\\\FrameworkBundle\\\\Console\\\";s:11:\\\"short_class\\\";s:11:\\\"Application\\\";s:5:\\\"class\\\";s:50:\\\"Symfony\\\\Bundle\\\\FrameworkBundle\\\\Console\\\\Application\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:5:\\\"doRun\\\";s:4:\\\"file\\\";s:75:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Application.php\\\";s:4:\\\"line\\\";i:166;s:4:\\\"args\\\";a:0:{}}i:39;a:8:{s:9:\\\"namespace\\\";s:25:\\\"Symfony\\\\Component\\\\Console\\\";s:11:\\\"short_class\\\";s:11:\\\"Application\\\";s:5:\\\"class\\\";s:37:\\\"Symfony\\\\Component\\\\Console\\\\Application\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:3:\\\"run\\\";s:4:\\\"file\\\";s:48:\\\"/home/massoud/www/Symfony/Newsletter/bin/console\\\";s:4:\\\"line\\\";i:43;s:4:\\\"args\\\";a:0:{}}}s:72:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0traceAsString\\\";s:6402:\\\"#0 /home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Transport/Smtp/SmtpTransport.php(180): Symfony\\\\Component\\\\Mailer\\\\Transport\\\\Smtp\\\\SmtpTransport->assertResponseCode()\n#1 /home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Transport/Smtp/SmtpTransport.php(233): Symfony\\\\Component\\\\Mailer\\\\Transport\\\\Smtp\\\\SmtpTransport->executeCommand()\n#2 /home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Transport/Smtp/SmtpTransport.php(197): Symfony\\\\Component\\\\Mailer\\\\Transport\\\\Smtp\\\\SmtpTransport->doMailFromCommand()\n#3 /home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Transport/AbstractTransport.php(68): Symfony\\\\Component\\\\Mailer\\\\Transport\\\\Smtp\\\\SmtpTransport->doSend()\n#4 /home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Transport/Smtp/SmtpTransport.php(132): Symfony\\\\Component\\\\Mailer\\\\Transport\\\\AbstractTransport->send()\n#5 /home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Transport/Transports.php(51): Symfony\\\\Component\\\\Mailer\\\\Transport\\\\Smtp\\\\SmtpTransport->send()\n#6 /home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Messenger/MessageHandler.php(31): Symfony\\\\Component\\\\Mailer\\\\Transport\\\\Transports->send()\n#7 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/HandleMessageMiddleware.php(63): Symfony\\\\Component\\\\Mailer\\\\Messenger\\\\MessageHandler->__invoke()\n#8 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/SendMessageMiddleware.php(74): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\HandleMessageMiddleware->handle()\n#9 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/FailedMessageProcessingMiddleware.php(34): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\SendMessageMiddleware->handle()\n#10 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/DispatchAfterCurrentBusMiddleware.php(61): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\FailedMessageProcessingMiddleware->handle()\n#11 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/RejectRedeliveredMessageMiddleware.php(48): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\DispatchAfterCurrentBusMiddleware->handle()\n#12 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/AddBusNameStampMiddleware.php(37): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\RejectRedeliveredMessageMiddleware->handle()\n#13 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/TraceableMiddleware.php(43): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\AddBusNameStampMiddleware->handle()\n#14 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/MessageBus.php(77): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\TraceableMiddleware->handle()\n#15 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/TraceableMessageBus.php(41): Symfony\\\\Component\\\\Messenger\\\\MessageBus->dispatch()\n#16 /home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Mailer.php(54): Symfony\\\\Component\\\\Messenger\\\\TraceableMessageBus->dispatch()\n#17 /home/massoud/www/Symfony/Newsletter/src/Service/SendNewsletterService.php(29): Symfony\\\\Component\\\\Mailer\\\\Mailer->send()\n#18 /home/massoud/www/Symfony/Newsletter/src/MessageHandler/SendNewsletterMessageHandler.php(31): App\\\\Service\\\\SendNewsletterService->send()\n#19 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/HandleMessageMiddleware.php(63): App\\\\MessageHandler\\\\SendNewsletterMessageHandler->__invoke()\n#20 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/SendMessageMiddleware.php(74): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\HandleMessageMiddleware->handle()\n#21 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/FailedMessageProcessingMiddleware.php(34): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\SendMessageMiddleware->handle()\n#22 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/DispatchAfterCurrentBusMiddleware.php(68): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\FailedMessageProcessingMiddleware->handle()\n#23 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/RejectRedeliveredMessageMiddleware.php(48): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\DispatchAfterCurrentBusMiddleware->handle()\n#24 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/AddBusNameStampMiddleware.php(37): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\RejectRedeliveredMessageMiddleware->handle()\n#25 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/TraceableMiddleware.php(43): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\AddBusNameStampMiddleware->handle()\n#26 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/MessageBus.php(77): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\TraceableMiddleware->handle()\n#27 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/TraceableMessageBus.php(41): Symfony\\\\Component\\\\Messenger\\\\MessageBus->dispatch()\n#28 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/RoutableMessageBus.php(54): Symfony\\\\Component\\\\Messenger\\\\TraceableMessageBus->dispatch()\n#29 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Worker.php(114): Symfony\\\\Component\\\\Messenger\\\\RoutableMessageBus->dispatch()\n#30 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Worker.php(77): Symfony\\\\Component\\\\Messenger\\\\Worker->handleMessage()\n#31 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Command/ConsumeMessagesCommand.php(197): Symfony\\\\Component\\\\Messenger\\\\Worker->run()\n#32 /home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Command/Command.php(256): Symfony\\\\Component\\\\Messenger\\\\Command\\\\ConsumeMessagesCommand->execute()\n#33 /home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Application.php(989): Symfony\\\\Component\\\\Console\\\\Command\\\\Command->run()\n#34 /home/massoud/www/Symfony/Newsletter/vendor/symfony/framework-bundle/Console/Application.php(96): Symfony\\\\Component\\\\Console\\\\Application->doRunCommand()\n#35 /home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Application.php(290): Symfony\\\\Bundle\\\\FrameworkBundle\\\\Console\\\\Application->doRunCommand()\n#36 /home/massoud/www/Symfony/Newsletter/vendor/symfony/framework-bundle/Console/Application.php(82): Symfony\\\\Component\\\\Console\\\\Application->doRun()\n#37 /home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Application.php(166): Symfony\\\\Bundle\\\\FrameworkBundle\\\\Console\\\\Application->doRun()\n#38 /home/massoud/www/Symfony/Newsletter/bin/console(43): Symfony\\\\Component\\\\Console\\\\Application->run()\n#39 {main}\\\";s:64:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0class\\\";s:53:\\\"Symfony\\\\Component\\\\Mailer\\\\Exception\\\\TransportException\\\";s:69:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0statusCode\\\";i:500;s:69:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0statusText\\\";s:21:\\\"Internal Server Error\\\";s:66:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0headers\\\";a:0:{}s:63:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0file\\\";s:91:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Transport/Smtp/SmtpTransport.php\\\";s:63:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0line\\\";i:306;s:67:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0asString\\\";N;}s:64:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0trace\\\";a:32:{i:0;a:8:{s:9:\\\"namespace\\\";s:0:\\\"\\\";s:11:\\\"short_class\\\";s:0:\\\"\\\";s:5:\\\"class\\\";s:0:\\\"\\\";s:4:\\\"type\\\";s:0:\\\"\\\";s:8:\\\"function\\\";s:0:\\\"\\\";s:4:\\\"file\\\";s:100:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/HandleMessageMiddleware.php\\\";s:4:\\\"line\\\";i:80;s:4:\\\"args\\\";a:0:{}}i:1;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:23:\\\"HandleMessageMiddleware\\\";s:5:\\\"class\\\";s:62:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\HandleMessageMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:98:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/SendMessageMiddleware.php\\\";s:4:\\\"line\\\";i:74;s:4:\\\"args\\\";a:0:{}}i:2;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:21:\\\"SendMessageMiddleware\\\";s:5:\\\"class\\\";s:60:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\SendMessageMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:110:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/FailedMessageProcessingMiddleware.php\\\";s:4:\\\"line\\\";i:34;s:4:\\\"args\\\";a:0:{}}i:3;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:33:\\\"FailedMessageProcessingMiddleware\\\";s:5:\\\"class\\\";s:72:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\FailedMessageProcessingMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:110:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/DispatchAfterCurrentBusMiddleware.php\\\";s:4:\\\"line\\\";i:61;s:4:\\\"args\\\";a:0:{}}i:4;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:33:\\\"DispatchAfterCurrentBusMiddleware\\\";s:5:\\\"class\\\";s:72:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\DispatchAfterCurrentBusMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:111:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/RejectRedeliveredMessageMiddleware.php\\\";s:4:\\\"line\\\";i:48;s:4:\\\"args\\\";a:0:{}}i:5;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:34:\\\"RejectRedeliveredMessageMiddleware\\\";s:5:\\\"class\\\";s:73:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\RejectRedeliveredMessageMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:102:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/AddBusNameStampMiddleware.php\\\";s:4:\\\"line\\\";i:37;s:4:\\\"args\\\";a:0:{}}i:6;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:25:\\\"AddBusNameStampMiddleware\\\";s:5:\\\"class\\\";s:64:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\AddBusNameStampMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:96:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/TraceableMiddleware.php\\\";s:4:\\\"line\\\";i:43;s:4:\\\"args\\\";a:0:{}}i:7;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:19:\\\"TraceableMiddleware\\\";s:5:\\\"class\\\";s:58:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\TraceableMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:76:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/MessageBus.php\\\";s:4:\\\"line\\\";i:77;s:4:\\\"args\\\";a:0:{}}i:8;a:8:{s:9:\\\"namespace\\\";s:27:\\\"Symfony\\\\Component\\\\Messenger\\\";s:11:\\\"short_class\\\";s:10:\\\"MessageBus\\\";s:5:\\\"class\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\MessageBus\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:8:\\\"dispatch\\\";s:4:\\\"file\\\";s:85:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/TraceableMessageBus.php\\\";s:4:\\\"line\\\";i:41;s:4:\\\"args\\\";a:0:{}}i:9;a:8:{s:9:\\\"namespace\\\";s:27:\\\"Symfony\\\\Component\\\\Messenger\\\";s:11:\\\"short_class\\\";s:19:\\\"TraceableMessageBus\\\";s:5:\\\"class\\\";s:47:\\\"Symfony\\\\Component\\\\Messenger\\\\TraceableMessageBus\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:8:\\\"dispatch\\\";s:4:\\\"file\\\";s:69:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Mailer.php\\\";s:4:\\\"line\\\";i:54;s:4:\\\"args\\\";a:0:{}}i:10;a:8:{s:9:\\\"namespace\\\";s:24:\\\"Symfony\\\\Component\\\\Mailer\\\";s:11:\\\"short_class\\\";s:6:\\\"Mailer\\\";s:5:\\\"class\\\";s:31:\\\"Symfony\\\\Component\\\\Mailer\\\\Mailer\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:4:\\\"send\\\";s:4:\\\"file\\\";s:74:\\\"/home/massoud/www/Symfony/Newsletter/src/Service/SendNewsletterService.php\\\";s:4:\\\"line\\\";i:29;s:4:\\\"args\\\";a:0:{}}i:11;a:8:{s:9:\\\"namespace\\\";s:11:\\\"App\\\\Service\\\";s:11:\\\"short_class\\\";s:21:\\\"SendNewsletterService\\\";s:5:\\\"class\\\";s:33:\\\"App\\\\Service\\\\SendNewsletterService\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:4:\\\"send\\\";s:4:\\\"file\\\";s:88:\\\"/home/massoud/www/Symfony/Newsletter/src/MessageHandler/SendNewsletterMessageHandler.php\\\";s:4:\\\"line\\\";i:31;s:4:\\\"args\\\";a:0:{}}i:12;a:8:{s:9:\\\"namespace\\\";s:18:\\\"App\\\\MessageHandler\\\";s:11:\\\"short_class\\\";s:28:\\\"SendNewsletterMessageHandler\\\";s:5:\\\"class\\\";s:47:\\\"App\\\\MessageHandler\\\\SendNewsletterMessageHandler\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:8:\\\"__invoke\\\";s:4:\\\"file\\\";s:100:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/HandleMessageMiddleware.php\\\";s:4:\\\"line\\\";i:63;s:4:\\\"args\\\";a:0:{}}i:13;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:23:\\\"HandleMessageMiddleware\\\";s:5:\\\"class\\\";s:62:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\HandleMessageMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:98:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/SendMessageMiddleware.php\\\";s:4:\\\"line\\\";i:74;s:4:\\\"args\\\";a:0:{}}i:14;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:21:\\\"SendMessageMiddleware\\\";s:5:\\\"class\\\";s:60:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\SendMessageMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:110:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/FailedMessageProcessingMiddleware.php\\\";s:4:\\\"line\\\";i:34;s:4:\\\"args\\\";a:0:{}}i:15;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:33:\\\"FailedMessageProcessingMiddleware\\\";s:5:\\\"class\\\";s:72:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\FailedMessageProcessingMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:110:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/DispatchAfterCurrentBusMiddleware.php\\\";s:4:\\\"line\\\";i:68;s:4:\\\"args\\\";a:0:{}}i:16;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:33:\\\"DispatchAfterCurrentBusMiddleware\\\";s:5:\\\"class\\\";s:72:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\DispatchAfterCurrentBusMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:111:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/RejectRedeliveredMessageMiddleware.php\\\";s:4:\\\"line\\\";i:48;s:4:\\\"args\\\";a:0:{}}i:17;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:34:\\\"RejectRedeliveredMessageMiddleware\\\";s:5:\\\"class\\\";s:73:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\RejectRedeliveredMessageMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:102:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/AddBusNameStampMiddleware.php\\\";s:4:\\\"line\\\";i:37;s:4:\\\"args\\\";a:0:{}}i:18;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:25:\\\"AddBusNameStampMiddleware\\\";s:5:\\\"class\\\";s:64:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\AddBusNameStampMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:96:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/TraceableMiddleware.php\\\";s:4:\\\"line\\\";i:43;s:4:\\\"args\\\";a:0:{}}i:19;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:19:\\\"TraceableMiddleware\\\";s:5:\\\"class\\\";s:58:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\TraceableMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:76:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/MessageBus.php\\\";s:4:\\\"line\\\";i:77;s:4:\\\"args\\\";a:0:{}}i:20;a:8:{s:9:\\\"namespace\\\";s:27:\\\"Symfony\\\\Component\\\\Messenger\\\";s:11:\\\"short_class\\\";s:10:\\\"MessageBus\\\";s:5:\\\"class\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\MessageBus\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:8:\\\"dispatch\\\";s:4:\\\"file\\\";s:85:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/TraceableMessageBus.php\\\";s:4:\\\"line\\\";i:41;s:4:\\\"args\\\";a:0:{}}i:21;a:8:{s:9:\\\"namespace\\\";s:27:\\\"Symfony\\\\Component\\\\Messenger\\\";s:11:\\\"short_class\\\";s:19:\\\"TraceableMessageBus\\\";s:5:\\\"class\\\";s:47:\\\"Symfony\\\\Component\\\\Messenger\\\\TraceableMessageBus\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:8:\\\"dispatch\\\";s:4:\\\"file\\\";s:84:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/RoutableMessageBus.php\\\";s:4:\\\"line\\\";i:54;s:4:\\\"args\\\";a:0:{}}i:22;a:8:{s:9:\\\"namespace\\\";s:27:\\\"Symfony\\\\Component\\\\Messenger\\\";s:11:\\\"short_class\\\";s:18:\\\"RoutableMessageBus\\\";s:5:\\\"class\\\";s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\RoutableMessageBus\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:8:\\\"dispatch\\\";s:4:\\\"file\\\";s:72:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Worker.php\\\";s:4:\\\"line\\\";i:114;s:4:\\\"args\\\";a:0:{}}i:23;a:8:{s:9:\\\"namespace\\\";s:27:\\\"Symfony\\\\Component\\\\Messenger\\\";s:11:\\\"short_class\\\";s:6:\\\"Worker\\\";s:5:\\\"class\\\";s:34:\\\"Symfony\\\\Component\\\\Messenger\\\\Worker\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:13:\\\"handleMessage\\\";s:4:\\\"file\\\";s:72:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Worker.php\\\";s:4:\\\"line\\\";i:77;s:4:\\\"args\\\";a:0:{}}i:24;a:8:{s:9:\\\"namespace\\\";s:27:\\\"Symfony\\\\Component\\\\Messenger\\\";s:11:\\\"short_class\\\";s:6:\\\"Worker\\\";s:5:\\\"class\\\";s:34:\\\"Symfony\\\\Component\\\\Messenger\\\\Worker\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:3:\\\"run\\\";s:4:\\\"file\\\";s:96:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Command/ConsumeMessagesCommand.php\\\";s:4:\\\"line\\\";i:197;s:4:\\\"args\\\";a:0:{}}i:25;a:8:{s:9:\\\"namespace\\\";s:35:\\\"Symfony\\\\Component\\\\Messenger\\\\Command\\\";s:11:\\\"short_class\\\";s:22:\\\"ConsumeMessagesCommand\\\";s:5:\\\"class\\\";s:58:\\\"Symfony\\\\Component\\\\Messenger\\\\Command\\\\ConsumeMessagesCommand\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:7:\\\"execute\\\";s:4:\\\"file\\\";s:79:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Command/Command.php\\\";s:4:\\\"line\\\";i:256;s:4:\\\"args\\\";a:0:{}}i:26;a:8:{s:9:\\\"namespace\\\";s:33:\\\"Symfony\\\\Component\\\\Console\\\\Command\\\";s:11:\\\"short_class\\\";s:7:\\\"Command\\\";s:5:\\\"class\\\";s:41:\\\"Symfony\\\\Component\\\\Console\\\\Command\\\\Command\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:3:\\\"run\\\";s:4:\\\"file\\\";s:75:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Application.php\\\";s:4:\\\"line\\\";i:989;s:4:\\\"args\\\";a:0:{}}i:27;a:8:{s:9:\\\"namespace\\\";s:25:\\\"Symfony\\\\Component\\\\Console\\\";s:11:\\\"short_class\\\";s:11:\\\"Application\\\";s:5:\\\"class\\\";s:37:\\\"Symfony\\\\Component\\\\Console\\\\Application\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:12:\\\"doRunCommand\\\";s:4:\\\"file\\\";s:92:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/framework-bundle/Console/Application.php\\\";s:4:\\\"line\\\";i:96;s:4:\\\"args\\\";a:0:{}}i:28;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Bundle\\\\FrameworkBundle\\\\Console\\\";s:11:\\\"short_class\\\";s:11:\\\"Application\\\";s:5:\\\"class\\\";s:50:\\\"Symfony\\\\Bundle\\\\FrameworkBundle\\\\Console\\\\Application\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:12:\\\"doRunCommand\\\";s:4:\\\"file\\\";s:75:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Application.php\\\";s:4:\\\"line\\\";i:290;s:4:\\\"args\\\";a:0:{}}i:29;a:8:{s:9:\\\"namespace\\\";s:25:\\\"Symfony\\\\Component\\\\Console\\\";s:11:\\\"short_class\\\";s:11:\\\"Application\\\";s:5:\\\"class\\\";s:37:\\\"Symfony\\\\Component\\\\Console\\\\Application\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:5:\\\"doRun\\\";s:4:\\\"file\\\";s:92:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/framework-bundle/Console/Application.php\\\";s:4:\\\"line\\\";i:82;s:4:\\\"args\\\";a:0:{}}i:30;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Bundle\\\\FrameworkBundle\\\\Console\\\";s:11:\\\"short_class\\\";s:11:\\\"Application\\\";s:5:\\\"class\\\";s:50:\\\"Symfony\\\\Bundle\\\\FrameworkBundle\\\\Console\\\\Application\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:5:\\\"doRun\\\";s:4:\\\"file\\\";s:75:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Application.php\\\";s:4:\\\"line\\\";i:166;s:4:\\\"args\\\";a:0:{}}i:31;a:8:{s:9:\\\"namespace\\\";s:25:\\\"Symfony\\\\Component\\\\Console\\\";s:11:\\\"short_class\\\";s:11:\\\"Application\\\";s:5:\\\"class\\\";s:37:\\\"Symfony\\\\Component\\\\Console\\\\Application\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:3:\\\"run\\\";s:4:\\\"file\\\";s:48:\\\"/home/massoud/www/Symfony/Newsletter/bin/console\\\";s:4:\\\"line\\\";i:43;s:4:\\\"args\\\";a:0:{}}}s:72:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0traceAsString\\\";s:5068:\\\"#0 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/SendMessageMiddleware.php(74): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\HandleMessageMiddleware->handle()\n#1 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/FailedMessageProcessingMiddleware.php(34): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\SendMessageMiddleware->handle()\n#2 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/DispatchAfterCurrentBusMiddleware.php(61): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\FailedMessageProcessingMiddleware->handle()\n#3 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/RejectRedeliveredMessageMiddleware.php(48): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\DispatchAfterCurrentBusMiddleware->handle()\n#4 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/AddBusNameStampMiddleware.php(37): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\RejectRedeliveredMessageMiddleware->handle()\n#5 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/TraceableMiddleware.php(43): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\AddBusNameStampMiddleware->handle()\n#6 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/MessageBus.php(77): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\TraceableMiddleware->handle()\n#7 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/TraceableMessageBus.php(41): Symfony\\\\Component\\\\Messenger\\\\MessageBus->dispatch()\n#8 /home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Mailer.php(54): Symfony\\\\Component\\\\Messenger\\\\TraceableMessageBus->dispatch()\n#9 /home/massoud/www/Symfony/Newsletter/src/Service/SendNewsletterService.php(29): Symfony\\\\Component\\\\Mailer\\\\Mailer->send()\n#10 /home/massoud/www/Symfony/Newsletter/src/MessageHandler/SendNewsletterMessageHandler.php(31): App\\\\Service\\\\SendNewsletterService->send()\n#11 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/HandleMessageMiddleware.php(63): App\\\\MessageHandler\\\\SendNewsletterMessageHandler->__invoke()\n#12 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/SendMessageMiddleware.php(74): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\HandleMessageMiddleware->handle()\n#13 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/FailedMessageProcessingMiddleware.php(34): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\SendMessageMiddleware->handle()\n#14 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/DispatchAfterCurrentBusMiddleware.php(68): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\FailedMessageProcessingMiddleware->handle()\n#15 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/RejectRedeliveredMessageMiddleware.php(48): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\DispatchAfterCurrentBusMiddleware->handle()\n#16 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/AddBusNameStampMiddleware.php(37): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\RejectRedeliveredMessageMiddleware->handle()\n#17 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/TraceableMiddleware.php(43): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\AddBusNameStampMiddleware->handle()\n#18 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/MessageBus.php(77): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\TraceableMiddleware->handle()\n#19 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/TraceableMessageBus.php(41): Symfony\\\\Component\\\\Messenger\\\\MessageBus->dispatch()\n#20 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/RoutableMessageBus.php(54): Symfony\\\\Component\\\\Messenger\\\\TraceableMessageBus->dispatch()\n#21 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Worker.php(114): Symfony\\\\Component\\\\Messenger\\\\RoutableMessageBus->dispatch()\n#22 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Worker.php(77): Symfony\\\\Component\\\\Messenger\\\\Worker->handleMessage()\n#23 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Command/ConsumeMessagesCommand.php(197): Symfony\\\\Component\\\\Messenger\\\\Worker->run()\n#24 /home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Command/Command.php(256): Symfony\\\\Component\\\\Messenger\\\\Command\\\\ConsumeMessagesCommand->execute()\n#25 /home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Application.php(989): Symfony\\\\Component\\\\Console\\\\Command\\\\Command->run()\n#26 /home/massoud/www/Symfony/Newsletter/vendor/symfony/framework-bundle/Console/Application.php(96): Symfony\\\\Component\\\\Console\\\\Application->doRunCommand()\n#27 /home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Application.php(290): Symfony\\\\Bundle\\\\FrameworkBundle\\\\Console\\\\Application->doRunCommand()\n#28 /home/massoud/www/Symfony/Newsletter/vendor/symfony/framework-bundle/Console/Application.php(82): Symfony\\\\Component\\\\Console\\\\Application->doRun()\n#29 /home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Application.php(166): Symfony\\\\Bundle\\\\FrameworkBundle\\\\Console\\\\Application->doRun()\n#30 /home/massoud/www/Symfony/Newsletter/bin/console(43): Symfony\\\\Component\\\\Console\\\\Application->run()\n#31 {main}\\\";s:64:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0class\\\";s:60:\\\"Symfony\\\\Component\\\\Messenger\\\\Exception\\\\HandlerFailedException\\\";s:69:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0statusCode\\\";i:500;s:69:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0statusText\\\";s:21:\\\"Internal Server Error\\\";s:66:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0headers\\\";a:0:{}s:63:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0file\\\";s:100:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/HandleMessageMiddleware.php\\\";s:63:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0line\\\";i:80;s:67:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0asString\\\";N;}}}s:61:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\SentToFailureTransportStamp\\\";a:1:{i:0;O:61:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\SentToFailureTransportStamp\\\":1:{s:83:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\SentToFailureTransportStamp\\0originalReceiverName\\\";s:5:\\\"async\\\";}}s:44:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\DelayStamp\\\";a:1:{i:0;O:44:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\DelayStamp\\\":1:{s:51:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\DelayStamp\\0delay\\\";i:0;}}s:49:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\RedeliveryStamp\\\";a:1:{i:0;O:49:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\RedeliveryStamp\\\":4:{s:61:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\RedeliveryStamp\\0retryCount\\\";i:0;s:64:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\RedeliveryStamp\\0redeliveredAt\\\";O:17:\\\"DateTimeImmutable\\\":3:{s:4:\\\"date\\\";s:26:\\\"2024-01-10 13:30:56.980648\\\";s:13:\\\"timezone_type\\\";i:3;s:8:\\\"timezone\\\";s:3:\\\"UTC\\\";}s:67:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\RedeliveryStamp\\0exceptionMessage\\\";N;s:67:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\RedeliveryStamp\\0flattenException\\\";N;}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"failed","4":"2024-01-10 13:30:56","5":"2024-01-10 13:30:56"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2024-01-10T13:30:57.021135+00:00] doctrine.DEBUG: Executing statement: DELETE FROM messenger_messages WHERE id = ? (parameters: array{"1":"10"}, types: array{"1":2}) {"sql":"DELETE FROM messenger_messages WHERE id = ?","params":{"1":"10"},"types":{"1":2}} []
[2024-01-10T13:30:57.027088+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:57.028100+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:57","2":"2024-01-10 13:30:57","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:57","2":"2024-01-10 13:30:57","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:57.029849+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:58.031137+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:58.032131+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:58","2":"2024-01-10 13:30:58","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:58","2":"2024-01-10 13:30:58","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:58.033836+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:59.035098+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:59.035743+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:59","2":"2024-01-10 13:30:59","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:59","2":"2024-01-10 13:30:59","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:59.036442+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:00.037115+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:00.038461+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:00","2":"2024-01-10 13:31:00","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:00","2":"2024-01-10 13:31:00","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:00.040771+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:01.042210+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:01.043595+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:01","2":"2024-01-10 13:31:01","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:01","2":"2024-01-10 13:31:01","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:01.045182+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:02.046674+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:02.047911+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:02","2":"2024-01-10 13:31:02","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:02","2":"2024-01-10 13:31:02","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:02.049617+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:03.050845+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:03.051971+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:03","2":"2024-01-10 13:31:03","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:03","2":"2024-01-10 13:31:03","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:03.053583+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:04.054784+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:04.055896+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:04","2":"2024-01-10 13:31:04","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:04","2":"2024-01-10 13:31:04","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:04.058175+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:05.059527+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:05.060759+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:05","2":"2024-01-10 13:31:05","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:05","2":"2024-01-10 13:31:05","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:05.062641+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:06.063990+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:06.064834+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:06","2":"2024-01-10 13:31:06","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:06","2":"2024-01-10 13:31:06","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:06.066340+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:07.067538+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:07.068590+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:07","2":"2024-01-10 13:31:07","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:07","2":"2024-01-10 13:31:07","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:07.070074+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:08.071457+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:08.072866+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:08","2":"2024-01-10 13:31:08","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:08","2":"2024-01-10 13:31:08","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:08.074446+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:09.075993+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:09.077439+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:09","2":"2024-01-10 13:31:09","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:09","2":"2024-01-10 13:31:09","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:09.079340+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:10.081029+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:10.082010+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:10","2":"2024-01-10 13:31:10","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:10","2":"2024-01-10 13:31:10","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:10.083827+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:11.085338+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:11.086686+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:11","2":"2024-01-10 13:31:11","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:11","2":"2024-01-10 13:31:11","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:11.088768+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:12.090217+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:12.091659+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:12","2":"2024-01-10 13:31:12","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:12","2":"2024-01-10 13:31:12","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:12.093616+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:13.095007+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:13.096257+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:13","2":"2024-01-10 13:31:13","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:13","2":"2024-01-10 13:31:13","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:13.098195+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:14.099508+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:14.100143+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:14","2":"2024-01-10 13:31:14","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:14","2":"2024-01-10 13:31:14","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:14.100878+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:15.101489+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:15.102527+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:15","2":"2024-01-10 13:31:15","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:15","2":"2024-01-10 13:31:15","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:15.104111+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:16.105250+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:16.106526+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:16","2":"2024-01-10 13:31:16","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:16","2":"2024-01-10 13:31:16","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:16.108488+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:17.110183+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:17.111206+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:17","2":"2024-01-10 13:31:17","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:17","2":"2024-01-10 13:31:17","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:17.112755+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:18.114056+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:18.117079+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:18","2":"2024-01-10 13:31:18","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:18","2":"2024-01-10 13:31:18","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:18.119783+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:19.122297+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:19.122930+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:19","2":"2024-01-10 13:31:19","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:19","2":"2024-01-10 13:31:19","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:19.123776+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:20.124495+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:20.125404+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:20","2":"2024-01-10 13:31:20","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:20","2":"2024-01-10 13:31:20","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:20.126631+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:21.127877+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:21.129654+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:21","2":"2024-01-10 13:31:21","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:21","2":"2024-01-10 13:31:21","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:21.131366+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:22.132655+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:22.134189+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:22","2":"2024-01-10 13:31:22","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:22","2":"2024-01-10 13:31:22","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:22.136897+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:23.139139+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:23.140430+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:23","2":"2024-01-10 13:31:23","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:23","2":"2024-01-10 13:31:23","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:23.142249+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:24.143678+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:24.144721+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:24","2":"2024-01-10 13:31:24","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:24","2":"2024-01-10 13:31:24","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:24.146248+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:25.147429+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:25.148481+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:25","2":"2024-01-10 13:31:25","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:25","2":"2024-01-10 13:31:25","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:25.149973+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:26.150977+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:26.151694+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:26","2":"2024-01-10 13:31:26","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:26","2":"2024-01-10 13:31:26","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:26.152465+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:27.153163+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:27.154501+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:27","2":"2024-01-10 13:31:27","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:27","2":"2024-01-10 13:31:27","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:27.157593+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:28.159466+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:28.160565+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:28","2":"2024-01-10 13:31:28","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:28","2":"2024-01-10 13:31:28","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:28.161993+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:29.163194+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:29.164442+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:29","2":"2024-01-10 13:31:29","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:29","2":"2024-01-10 13:31:29","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:29.166104+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:30.167393+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:30.169745+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:30","2":"2024-01-10 13:31:30","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:30","2":"2024-01-10 13:31:30","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:30.171931+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:31.173358+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:31.174594+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:31","2":"2024-01-10 13:31:31","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:31","2":"2024-01-10 13:31:31","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:31.176575+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:32.177969+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:32.179030+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:32","2":"2024-01-10 13:31:32","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:32","2":"2024-01-10 13:31:32","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:32.180806+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:33.182219+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:33.183854+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:33","2":"2024-01-10 13:31:33","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:33","2":"2024-01-10 13:31:33","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:33.186514+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:34.188334+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:34.188741+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:34","2":"2024-01-10 13:31:34","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:34","2":"2024-01-10 13:31:34","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:34.189200+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:35.189678+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:35.190608+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:35","2":"2024-01-10 13:31:35","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:35","2":"2024-01-10 13:31:35","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:35.191913+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:36.192826+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:36.194104+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:36","2":"2024-01-10 13:31:36","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:36","2":"2024-01-10 13:31:36","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:36.195965+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:37.197473+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:37.198734+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:37","2":"2024-01-10 13:31:37","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:37","2":"2024-01-10 13:31:37","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:37.200689+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:38.202185+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:38.203762+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:38","2":"2024-01-10 13:31:38","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:38","2":"2024-01-10 13:31:38","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:38.206600+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:39.208258+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:39.209633+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:39","2":"2024-01-10 13:31:39","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:39","2":"2024-01-10 13:31:39","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:39.211526+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:40.212898+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:40.214062+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:40","2":"2024-01-10 13:31:40","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:40","2":"2024-01-10 13:31:40","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:40.215733+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:41.216750+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:41.217293+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:41","2":"2024-01-10 13:31:41","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:41","2":"2024-01-10 13:31:41","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:41.218117+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:42.218865+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:42.220533+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:42","2":"2024-01-10 13:31:42","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:42","2":"2024-01-10 13:31:42","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:42.222581+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:43.223936+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:43.225223+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:43","2":"2024-01-10 13:31:43","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:43","2":"2024-01-10 13:31:43","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:43.227949+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:44.229335+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:44.230537+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:44","2":"2024-01-10 13:31:44","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:44","2":"2024-01-10 13:31:44","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:44.232312+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:45.233758+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:45.234971+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:45","2":"2024-01-10 13:31:45","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:45","2":"2024-01-10 13:31:45","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:45.236702+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:46.237852+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:46.238930+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:46","2":"2024-01-10 13:31:46","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:46","2":"2024-01-10 13:31:46","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:46.240834+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:47.242390+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:47.243108+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:47","2":"2024-01-10 13:31:47","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:47","2":"2024-01-10 13:31:47","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:47.244263+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:48.245091+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:48.245423+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:48","2":"2024-01-10 13:31:48","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:48","2":"2024-01-10 13:31:48","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:48.245867+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:49.246454+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:49.247664+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:49","2":"2024-01-10 13:31:49","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:49","2":"2024-01-10 13:31:49","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:49.249484+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:49.818000+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:31:49.818883+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:31:49.819197+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:31:49.819527+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:31:49.823265+00:00] request.INFO: Matched route "newsletters_send". {"route":"newsletters_send","route_parameters":{"_route":"newsletters_send","_controller":"App\\Controller\\NewslettersController::send","id":"1"},"request_uri":"http://localhost:8001/newsletters/send/1","method":"GET"} []
[2024-01-10T13:31:49.834038+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:31:49.835557+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ? (parameters: array{"1":"1"}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ?","params":{"1":"1"},"types":{"1":1}} []
[2024-01-10T13:31:49.839718+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:31:49.841062+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:31:49.843256+00:00] messenger.INFO: Sending message App\Message\SendNewsletterMessage with async sender using Symfony\Component\Messenger\Bridge\Doctrine\Transport\DoctrineTransport {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage","alias":"async","sender":"Symfony\\Component\\Messenger\\Bridge\\Doctrine\\Transport\\DoctrineTransport"} []
[2024-01-10T13:31:49.843613+00:00] doctrine.DEBUG: Executing statement: INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?) (parameters: array{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:1:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"default","4":"2024-01-10 13:31:49","5":"2024-01-10 13:31:49"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?)","params":{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:1:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"default","4":"2024-01-10 13:31:49","5":"2024-01-10 13:31:49"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2024-01-10T13:31:49.850326+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:31:49.850491+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:31:49.850617+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:31:49.850783+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:31:49.850915+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:31:49.851040+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:31:49.852266+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:31:49.852403+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:31:49.852614+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:31:49.852714+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:31:49.853256+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:31:49.854121+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:31:49.854486+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:31:49.856844+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:31:49.857130+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:31:49.858778+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:31:49.859101+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:31:49.860672+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:31:49.860987+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:31:49.862518+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:49.864731+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:31:49.864997+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:31:49.866341+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:31:49.867364+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:31:49.881789+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:31:49.881920+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:31:49.895413+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:31:49.898870+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:31:49.898979+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:31:49.899016+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:31:49.899045+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:31:49.899425+00:00] request.INFO: Matched route "newsletters_list". {"route":"newsletters_list","route_parameters":{"_route":"newsletters_list","_controller":"App\\Controller\\NewslettersController::list"},"request_uri":"http://localhost:8001/newsletters/list","method":"GET"} []
[2024-01-10T13:31:49.901583+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:31:49.902228+00:00] doctrine.DEBUG: Executing query: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0"} []
[2024-01-10T13:31:49.904559+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:31:49.905538+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:31:49.906749+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:31:49.906820+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:31:49.906872+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:31:49.906922+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:31:49.906976+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:31:49.907013+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:31:49.907394+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:31:49.907451+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:31:49.907502+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:31:49.907541+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:31:49.907798+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:31:49.908140+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:31:49.908409+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:31:49.909684+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:31:49.909927+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:31:49.911319+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:31:49.911536+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:31:49.912457+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:31:49.912652+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:31:49.913835+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:49.916127+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:31:49.916407+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:31:49.917864+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:31:49.918534+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:31:49.934108+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:31:49.934335+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:31:49.955089+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:31:49.980048+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:31:49.980234+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:31:49.980292+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:31:49.980338+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:31:49.981068+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"a5d4b0"},"request_uri":"http://localhost:8001/_wdt/a5d4b0","method":"GET"} []
[2024-01-10T13:31:49.982356+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:31:49.982490+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:31:49.982593+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:31:49.982687+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:31:49.982770+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:31:49.982842+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:31:49.984291+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:31:49.984451+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:31:49.984553+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:31:49.984644+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:31:50.250704+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:50.251653+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:50","2":"2024-01-10 13:31:50","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:50","2":"2024-01-10 13:31:50","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:50.253433+00:00] doctrine.DEBUG: Executing statement: UPDATE messenger_messages SET delivered_at = ? WHERE id = ? (parameters: array{"1":"2024-01-10 13:31:50","2":12}, types: array{"1":2,"2":2}) {"sql":"UPDATE messenger_messages SET delivered_at = ? WHERE id = ?","params":{"1":"2024-01-10 13:31:50","2":12},"types":{"1":2,"2":2}} []
[2024-01-10T13:31:50.255064+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:50.264088+00:00] messenger.INFO: Received message App\Message\SendNewsletterMessage {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage"} []
[2024-01-10T13:31:50.265002+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:31:50.267308+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ? (parameters: array{"1":1}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ?","params":{"1":1},"types":{"1":1}} []
[2024-01-10T13:31:53.322502+00:00] messenger.INFO: Message Symfony\Component\Mailer\Messenger\SendEmailMessage handled by Symfony\Component\Mailer\Messenger\MessageHandler::__invoke {"message":{"Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage":[]},"class":"Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage","handler":"Symfony\\Component\\Mailer\\Messenger\\MessageHandler::__invoke"} []
[2024-01-10T13:31:53.323037+00:00] messenger.INFO: Message App\Message\SendNewsletterMessage handled by App\MessageHandler\SendNewsletterMessageHandler::__invoke {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage","handler":"App\\MessageHandler\\SendNewsletterMessageHandler::__invoke"} []
[2024-01-10T13:31:53.324952+00:00] messenger.INFO: App\Message\SendNewsletterMessage was handled successfully (acknowledging to transport). {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage"} []
[2024-01-10T13:31:53.325356+00:00] doctrine.DEBUG: Executing statement: DELETE FROM messenger_messages WHERE id = ? (parameters: array{"1":"12"}, types: array{"1":2}) {"sql":"DELETE FROM messenger_messages WHERE id = ?","params":{"1":"12"},"types":{"1":2}} []
[2024-01-10T13:31:53.349371+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:53.350887+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:53","2":"2024-01-10 13:31:53","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:53","2":"2024-01-10 13:31:53","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:53.354006+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:54.355025+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:54.355796+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:54","2":"2024-01-10 13:31:54","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:54","2":"2024-01-10 13:31:54","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:54.357181+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:55.358390+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:55.359394+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:55","2":"2024-01-10 13:31:55","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:55","2":"2024-01-10 13:31:55","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:55.361128+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:56.362338+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:56.362726+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:56","2":"2024-01-10 13:31:56","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:56","2":"2024-01-10 13:31:56","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:56.363288+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:57.363826+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:57.364625+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:57","2":"2024-01-10 13:31:57","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:57","2":"2024-01-10 13:31:57","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:57.365821+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:58.366895+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:58.367709+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:58","2":"2024-01-10 13:31:58","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:58","2":"2024-01-10 13:31:58","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:58.369205+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:59.370371+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:59.371656+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:59","2":"2024-01-10 13:31:59","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:59","2":"2024-01-10 13:31:59","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:59.373506+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:00.374843+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:00.375978+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:00","2":"2024-01-10 13:32:00","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:00","2":"2024-01-10 13:32:00","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:00.377930+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:01.379477+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:01.381119+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:01","2":"2024-01-10 13:32:01","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:01","2":"2024-01-10 13:32:01","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:01.382760+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:02.384013+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:02.385453+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:02","2":"2024-01-10 13:32:02","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:02","2":"2024-01-10 13:32:02","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:02.387598+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:03.389081+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:03.390203+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:03","2":"2024-01-10 13:32:03","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:03","2":"2024-01-10 13:32:03","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:03.391842+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:04.393239+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:04.394287+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:04","2":"2024-01-10 13:32:04","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:04","2":"2024-01-10 13:32:04","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:04.395884+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:05.397087+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:05.398129+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:05","2":"2024-01-10 13:32:05","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:05","2":"2024-01-10 13:32:05","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:05.399687+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:06.400782+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:06.401194+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:06","2":"2024-01-10 13:32:06","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:06","2":"2024-01-10 13:32:06","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:06.401762+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:07.402365+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:07.403448+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:07","2":"2024-01-10 13:32:07","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:07","2":"2024-01-10 13:32:07","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:07.405139+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:08.406285+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:08.407247+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:08","2":"2024-01-10 13:32:08","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:08","2":"2024-01-10 13:32:08","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:08.408000+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:09.408567+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:09.409099+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:09","2":"2024-01-10 13:32:09","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:09","2":"2024-01-10 13:32:09","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:09.409977+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:10.410872+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:10.412651+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:10","2":"2024-01-10 13:32:10","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:10","2":"2024-01-10 13:32:10","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:10.415414+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:11.417188+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:11.418655+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:11","2":"2024-01-10 13:32:11","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:11","2":"2024-01-10 13:32:11","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:11.420324+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:12.421677+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:12.422922+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:12","2":"2024-01-10 13:32:12","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:12","2":"2024-01-10 13:32:12","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:12.424905+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:13.426497+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:13.427813+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:13","2":"2024-01-10 13:32:13","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:13","2":"2024-01-10 13:32:13","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:13.430559+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:14.432585+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:14.433733+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:14","2":"2024-01-10 13:32:14","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:14","2":"2024-01-10 13:32:14","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:14.435464+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:15.436861+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:15.438160+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:15","2":"2024-01-10 13:32:15","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:15","2":"2024-01-10 13:32:15","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:15.440069+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:16.441659+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:16.443409+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:16","2":"2024-01-10 13:32:16","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:16","2":"2024-01-10 13:32:16","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:16.445906+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:17.448345+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:17.449044+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:17","2":"2024-01-10 13:32:17","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:17","2":"2024-01-10 13:32:17","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:17.449876+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:18.450552+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:18.452185+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:18","2":"2024-01-10 13:32:18","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:18","2":"2024-01-10 13:32:18","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:18.457260+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:19.459776+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:19.461291+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:19","2":"2024-01-10 13:32:19","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:19","2":"2024-01-10 13:32:19","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:19.463448+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:20.464944+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:20.466063+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:20","2":"2024-01-10 13:32:20","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:20","2":"2024-01-10 13:32:20","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:20.468053+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:21.469712+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:21.470825+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:21","2":"2024-01-10 13:32:21","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:21","2":"2024-01-10 13:32:21","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:21.472484+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:22.473741+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:22.474779+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:22","2":"2024-01-10 13:32:22","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:22","2":"2024-01-10 13:32:22","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:22.476478+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:23.478088+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:23.480038+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:23","2":"2024-01-10 13:32:23","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:23","2":"2024-01-10 13:32:23","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:23.482115+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:24.483530+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:24.484068+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:24","2":"2024-01-10 13:32:24","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:24","2":"2024-01-10 13:32:24","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:24.484910+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:25.485688+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:25.487068+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:25","2":"2024-01-10 13:32:25","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:25","2":"2024-01-10 13:32:25","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:25.489997+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:26.491973+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:26.493309+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:26","2":"2024-01-10 13:32:26","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:26","2":"2024-01-10 13:32:26","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:26.495100+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:27.496931+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:27.498151+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:27","2":"2024-01-10 13:32:27","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:27","2":"2024-01-10 13:32:27","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:27.499745+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:28.501039+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:28.501995+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:28","2":"2024-01-10 13:32:28","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:28","2":"2024-01-10 13:32:28","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:28.503344+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:29.504204+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:29.504980+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:29","2":"2024-01-10 13:32:29","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:29","2":"2024-01-10 13:32:29","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:29.505935+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:30.506563+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:30.506974+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:30","2":"2024-01-10 13:32:30","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:30","2":"2024-01-10 13:32:30","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:30.507412+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:31.507899+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:31.509755+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:31","2":"2024-01-10 13:32:31","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:31","2":"2024-01-10 13:32:31","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:31.512321+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:32.514921+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:32.515351+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:32","2":"2024-01-10 13:32:32","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:32","2":"2024-01-10 13:32:32","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:32.515889+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:33.516625+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:33.518360+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:33","2":"2024-01-10 13:32:33","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:33","2":"2024-01-10 13:32:33","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:33.520956+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:34.522806+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:34.523950+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:34","2":"2024-01-10 13:32:34","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:34","2":"2024-01-10 13:32:34","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:34.525600+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:35.526822+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:35.528269+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:35","2":"2024-01-10 13:32:35","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:35","2":"2024-01-10 13:32:35","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:35.533683+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:36.535525+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:36.537201+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:36","2":"2024-01-10 13:32:36","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:36","2":"2024-01-10 13:32:36","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:36.539294+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:37.540656+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:37.542009+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:37","2":"2024-01-10 13:32:37","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:37","2":"2024-01-10 13:32:37","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:37.544253+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:38.545783+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:38.547508+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:38","2":"2024-01-10 13:32:38","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:38","2":"2024-01-10 13:32:38","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:38.549218+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:39.550682+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:39.552165+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:39","2":"2024-01-10 13:32:39","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:39","2":"2024-01-10 13:32:39","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:39.554293+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:40.555725+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:40.556183+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:40","2":"2024-01-10 13:32:40","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:40","2":"2024-01-10 13:32:40","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:40.557004+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:41.557530+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:41.558240+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:41","2":"2024-01-10 13:32:41","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:41","2":"2024-01-10 13:32:41","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:41.559050+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:42.559781+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:42.561027+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:42","2":"2024-01-10 13:32:42","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:42","2":"2024-01-10 13:32:42","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:42.563027+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:43.564486+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:43.565653+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:43","2":"2024-01-10 13:32:43","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:43","2":"2024-01-10 13:32:43","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:43.566970+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:44.568138+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:44.569713+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:44","2":"2024-01-10 13:32:44","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:44","2":"2024-01-10 13:32:44","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:44.571687+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:45.573180+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:45.573839+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:45","2":"2024-01-10 13:32:45","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:45","2":"2024-01-10 13:32:45","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:45.574895+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:46.575901+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:46.578073+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:46","2":"2024-01-10 13:32:46","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:46","2":"2024-01-10 13:32:46","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:46.579831+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:47.580885+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:47.581348+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:47","2":"2024-01-10 13:32:47","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:47","2":"2024-01-10 13:32:47","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:47.582040+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:48.582712+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:48.583608+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:48","2":"2024-01-10 13:32:48","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:48","2":"2024-01-10 13:32:48","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:48.585635+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:49.586764+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:49.588488+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:49","2":"2024-01-10 13:32:49","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:49","2":"2024-01-10 13:32:49","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:49.591398+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:50.593182+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:50.593654+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:50","2":"2024-01-10 13:32:50","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:50","2":"2024-01-10 13:32:50","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:50.594473+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:51.595158+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:51.596176+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:51","2":"2024-01-10 13:32:51","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:51","2":"2024-01-10 13:32:51","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:51.597630+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:52.598655+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:52.599131+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:52","2":"2024-01-10 13:32:52","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:52","2":"2024-01-10 13:32:52","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:52.599670+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:53.600182+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:53.601578+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:53","2":"2024-01-10 13:32:53","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:53","2":"2024-01-10 13:32:53","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:53.603504+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:54.605257+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:54.607629+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:54","2":"2024-01-10 13:32:54","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:54","2":"2024-01-10 13:32:54","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:54.610362+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:55.611891+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:55.612978+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:55","2":"2024-01-10 13:32:55","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:55","2":"2024-01-10 13:32:55","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:55.614794+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:56.616153+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:56.616967+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:56","2":"2024-01-10 13:32:56","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:56","2":"2024-01-10 13:32:56","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:56.618414+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:57.619679+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:57.621983+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:57","2":"2024-01-10 13:32:57","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:57","2":"2024-01-10 13:32:57","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:57.624557+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:58.626192+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:58.626744+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:58","2":"2024-01-10 13:32:58","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:58","2":"2024-01-10 13:32:58","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:58.627478+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:59.628105+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:59.629217+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:59","2":"2024-01-10 13:32:59","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:59","2":"2024-01-10 13:32:59","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:59.630738+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:00.631928+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:00.633481+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:00","2":"2024-01-10 13:33:00","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:00","2":"2024-01-10 13:33:00","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:00.635976+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:01.637471+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:01.639051+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:01","2":"2024-01-10 13:33:01","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:01","2":"2024-01-10 13:33:01","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:01.641549+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:02.643107+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:02.645294+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:02","2":"2024-01-10 13:33:02","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:02","2":"2024-01-10 13:33:02","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:02.647521+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:03.648785+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:03.650792+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:03","2":"2024-01-10 13:33:03","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:03","2":"2024-01-10 13:33:03","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:03.652633+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:04.653966+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:04.654299+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:04","2":"2024-01-10 13:33:04","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:04","2":"2024-01-10 13:33:04","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:04.654786+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:05.655381+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:05.655690+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:05","2":"2024-01-10 13:33:05","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:05","2":"2024-01-10 13:33:05","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:05.656103+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:06.656492+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:06.657460+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:06","2":"2024-01-10 13:33:06","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:06","2":"2024-01-10 13:33:06","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:06.658692+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:07.659711+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:07.660635+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:07","2":"2024-01-10 13:33:07","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:07","2":"2024-01-10 13:33:07","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:07.662016+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:08.663057+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:08.663954+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:08","2":"2024-01-10 13:33:08","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:08","2":"2024-01-10 13:33:08","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:08.664823+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:09.665627+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:09.667055+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:09","2":"2024-01-10 13:33:09","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:09","2":"2024-01-10 13:33:09","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:09.669536+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:10.671190+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:10.672709+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:10","2":"2024-01-10 13:33:10","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:10","2":"2024-01-10 13:33:10","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:10.675682+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:11.678332+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:11.679592+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:11","2":"2024-01-10 13:33:11","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:11","2":"2024-01-10 13:33:11","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:11.681411+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:12.682611+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:12.683421+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:12","2":"2024-01-10 13:33:12","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:12","2":"2024-01-10 13:33:12","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:12.684728+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:13.685833+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:13.687091+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:13","2":"2024-01-10 13:33:13","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:13","2":"2024-01-10 13:33:13","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:13.689103+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:14.690769+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:14.692266+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:14","2":"2024-01-10 13:33:14","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:14","2":"2024-01-10 13:33:14","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:14.694509+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:15.695821+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:15.697107+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:15","2":"2024-01-10 13:33:15","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:15","2":"2024-01-10 13:33:15","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:15.698997+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:16.700426+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:16.701689+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:16","2":"2024-01-10 13:33:16","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:16","2":"2024-01-10 13:33:16","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:16.703539+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:17.705641+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:17.706527+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:17","2":"2024-01-10 13:33:17","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:17","2":"2024-01-10 13:33:17","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:17.707908+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:18.709345+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:18.710257+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:18","2":"2024-01-10 13:33:18","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:18","2":"2024-01-10 13:33:18","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:18.711962+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:19.713223+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:19.714663+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:19","2":"2024-01-10 13:33:19","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:19","2":"2024-01-10 13:33:19","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:19.716664+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:20.718276+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:20.719561+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:20","2":"2024-01-10 13:33:20","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:20","2":"2024-01-10 13:33:20","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:20.721783+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:21.724178+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:21.725967+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:21","2":"2024-01-10 13:33:21","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:21","2":"2024-01-10 13:33:21","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:21.727852+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:22.729268+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:22.730793+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:22","2":"2024-01-10 13:33:22","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:22","2":"2024-01-10 13:33:22","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:22.733125+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:23.734670+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:23.735462+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:23","2":"2024-01-10 13:33:23","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:23","2":"2024-01-10 13:33:23","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:23.736799+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:24.738489+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:24.739821+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:24","2":"2024-01-10 13:33:24","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:24","2":"2024-01-10 13:33:24","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:24.742001+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:25.743394+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:25.744205+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:25","2":"2024-01-10 13:33:25","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:25","2":"2024-01-10 13:33:25","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:25.745524+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:26.746561+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:26.748138+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:26","2":"2024-01-10 13:33:26","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:26","2":"2024-01-10 13:33:26","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:26.750651+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:27.752257+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:27.753733+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:27","2":"2024-01-10 13:33:27","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:27","2":"2024-01-10 13:33:27","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:27.755921+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:28.757440+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:28.757744+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:28","2":"2024-01-10 13:33:28","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:28","2":"2024-01-10 13:33:28","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:28.758218+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:29.758734+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:29.760867+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:29","2":"2024-01-10 13:33:29","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:29","2":"2024-01-10 13:33:29","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:29.763680+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:30.765894+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:30.767173+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:30","2":"2024-01-10 13:33:30","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:30","2":"2024-01-10 13:33:30","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:30.769400+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:31.771780+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:31.773045+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:31","2":"2024-01-10 13:33:31","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:31","2":"2024-01-10 13:33:31","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:31.774980+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:32.777311+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:32.779008+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:32","2":"2024-01-10 13:33:32","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:32","2":"2024-01-10 13:33:32","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:32.781735+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:33.783376+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:33.785013+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:33","2":"2024-01-10 13:33:33","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:33","2":"2024-01-10 13:33:33","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:33.788459+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:33.813233+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:33:33.813613+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:33:33.813734+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:33:33.813821+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:33:33.816716+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Routing\RouteCollection::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Routing\\RouteCollection::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/routing/RouteCollection.php:59)"} []
[2024-01-10T13:33:33.817040+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Routing\RouteCollection::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Routing\\RouteCollection::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/routing/RouteCollection.php:69)"} []
[2024-01-10T13:33:33.840952+00:00] request.INFO: Matched route "newsletters_send". {"route":"newsletters_send","route_parameters":{"_route":"newsletters_send","_controller":"App\\Controller\\NewslettersController::send","id":"1"},"request_uri":"http://localhost:8001/newsletters/send/1","method":"GET"} []
[2024-01-10T13:33:33.847007+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:33:33.848120+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ? (parameters: array{"1":"1"}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ?","params":{"1":"1"},"types":{"1":1}} []
[2024-01-10T13:33:33.851514+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:33:33.852806+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:33:33.854605+00:00] messenger.INFO: Sending message App\Message\SendNewsletterMessage with async sender using Symfony\Component\Messenger\Bridge\Doctrine\Transport\DoctrineTransport {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage","alias":"async","sender":"Symfony\\Component\\Messenger\\Bridge\\Doctrine\\Transport\\DoctrineTransport"} []
[2024-01-10T13:33:33.854883+00:00] doctrine.DEBUG: Executing statement: INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?) (parameters: array{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:1:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"default","4":"2024-01-10 13:33:33","5":"2024-01-10 13:33:33"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?)","params":{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:1:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"default","4":"2024-01-10 13:33:33","5":"2024-01-10 13:33:33"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2024-01-10T13:33:33.862833+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:33:33.862972+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:33:33.863066+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:33:33.863153+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:33:33.863257+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:33:33.863349+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:33:33.864504+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:33:33.864592+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:33:33.864733+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:33:33.864798+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:33:33.865354+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:33:33.866440+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:33:33.866803+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:33:33.868455+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:33:33.868714+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:33:33.870341+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:33:33.870605+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:33:33.871589+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:33:33.871810+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:33:33.873182+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:33.875116+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:33:33.875490+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:33:33.877347+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:33:33.878726+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:33:33.897846+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:33:33.898001+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:33:33.917938+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:33:33.922036+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:33:33.922161+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:33:33.922218+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:33:33.922269+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:33:33.922874+00:00] request.INFO: Matched route "newsletters_list". {"route":"newsletters_list","route_parameters":{"_route":"newsletters_list","_controller":"App\\Controller\\NewslettersController::list"},"request_uri":"http://localhost:8001/newsletters/list","method":"GET"} []
[2024-01-10T13:33:33.925652+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:33:33.926280+00:00] doctrine.DEBUG: Executing query: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0"} []
[2024-01-10T13:33:33.928487+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:33:33.929369+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:33:33.930941+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:33:33.931023+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:33:33.931093+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:33:33.931193+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:33:33.931293+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:33:33.931356+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:33:33.931783+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:33:33.931853+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:33:33.931936+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:33:33.932007+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:33:33.932372+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:33:33.932824+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:33:33.933139+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:33:33.934747+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:33:33.934965+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:33:33.936239+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:33:33.936531+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:33:33.938666+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:33:33.938922+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:33:33.940301+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:33.942038+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:33:33.942258+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:33:33.943622+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:33:33.944599+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:33:33.961747+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:33:33.961875+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:33:33.986800+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:33:34.003313+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:33:34.003623+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:33:34.003803+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:33:34.003905+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:33:34.004827+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"26c2d3"},"request_uri":"http://localhost:8001/_wdt/26c2d3","method":"GET"} []
[2024-01-10T13:33:34.005868+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:33:34.006006+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:33:34.006107+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:33:34.006195+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:33:34.006272+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:33:34.006362+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:33:34.007731+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:33:34.007858+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:33:34.007950+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:33:34.008034+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:33:34.790799+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:34.791907+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:34","2":"2024-01-10 13:33:34","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:34","2":"2024-01-10 13:33:34","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:34.793705+00:00] doctrine.DEBUG: Executing statement: UPDATE messenger_messages SET delivered_at = ? WHERE id = ? (parameters: array{"1":"2024-01-10 13:33:34","2":13}, types: array{"1":2,"2":2}) {"sql":"UPDATE messenger_messages SET delivered_at = ? WHERE id = ?","params":{"1":"2024-01-10 13:33:34","2":13},"types":{"1":2,"2":2}} []
[2024-01-10T13:33:34.795051+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:34.803257+00:00] messenger.INFO: Received message App\Message\SendNewsletterMessage {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage"} []
[2024-01-10T13:33:34.803883+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:33:34.805593+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ? (parameters: array{"1":1}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ?","params":{"1":1},"types":{"1":1}} []
[2024-01-10T13:33:37.810461+00:00] app.DEBUG: Email transport "Symfony\Component\Mailer\Transport\Smtp\SmtpTransport" stopping [] []
[2024-01-10T13:33:37.811091+00:00] app.DEBUG: Email transport "Symfony\Component\Mailer\Transport\Smtp\SmtpTransport" stopped [] []
[2024-01-10T13:33:37.811332+00:00] app.DEBUG: Email transport "Symfony\Component\Mailer\Transport\Smtp\SmtpTransport" starting [] []
[2024-01-10T13:33:37.915642+00:00] app.DEBUG: Email transport "Symfony\Component\Mailer\Transport\Smtp\SmtpTransport" started [] []
[2024-01-10T13:33:37.965541+00:00] messenger.INFO: Message Symfony\Component\Mailer\Messenger\SendEmailMessage handled by Symfony\Component\Mailer\Messenger\MessageHandler::__invoke {"message":{"Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage":[]},"class":"Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage","handler":"Symfony\\Component\\Mailer\\Messenger\\MessageHandler::__invoke"} []
[2024-01-10T13:33:37.966329+00:00] messenger.INFO: Message App\Message\SendNewsletterMessage handled by App\MessageHandler\SendNewsletterMessageHandler::__invoke {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage","handler":"App\\MessageHandler\\SendNewsletterMessageHandler::__invoke"} []
[2024-01-10T13:33:37.967025+00:00] messenger.INFO: App\Message\SendNewsletterMessage was handled successfully (acknowledging to transport). {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage"} []
[2024-01-10T13:33:37.967318+00:00] doctrine.DEBUG: Executing statement: DELETE FROM messenger_messages WHERE id = ? (parameters: array{"1":"13"}, types: array{"1":2}) {"sql":"DELETE FROM messenger_messages WHERE id = ?","params":{"1":"13"},"types":{"1":2}} []
[2024-01-10T13:33:37.973208+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:37.974140+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:37","2":"2024-01-10 13:33:37","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:37","2":"2024-01-10 13:33:37","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:37.975980+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:38.977229+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:38.978245+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:38","2":"2024-01-10 13:33:38","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:38","2":"2024-01-10 13:33:38","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:38.979783+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:39.981025+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:39.982153+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:39","2":"2024-01-10 13:33:39","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:39","2":"2024-01-10 13:33:39","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:39.983732+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:40.984945+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:40.985700+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:40","2":"2024-01-10 13:33:40","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:40","2":"2024-01-10 13:33:40","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:40.986991+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:41.988015+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:41.989230+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:41","2":"2024-01-10 13:33:41","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:41","2":"2024-01-10 13:33:41","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:41.990475+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:42.991587+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:42.992456+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:42","2":"2024-01-10 13:33:42","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:42","2":"2024-01-10 13:33:42","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:42.993589+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:43.994405+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:43.994924+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:43","2":"2024-01-10 13:33:43","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:43","2":"2024-01-10 13:33:43","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:43.995527+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:44.995982+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:44.996483+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:44","2":"2024-01-10 13:33:44","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:44","2":"2024-01-10 13:33:44","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:44.997206+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:45.997791+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:45.999346+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:45","2":"2024-01-10 13:33:45","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:45","2":"2024-01-10 13:33:45","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:46.001359+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:47.003003+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:47.004107+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:47","2":"2024-01-10 13:33:47","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:47","2":"2024-01-10 13:33:47","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:47.005910+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:48.007450+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:48.008323+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:48","2":"2024-01-10 13:33:48","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:48","2":"2024-01-10 13:33:48","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:48.009706+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:49.010461+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:49.011493+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:49","2":"2024-01-10 13:33:49","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:49","2":"2024-01-10 13:33:49","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:49.013580+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:50.015245+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:50.016734+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:50","2":"2024-01-10 13:33:50","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:50","2":"2024-01-10 13:33:50","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:50.019254+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:51.021253+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:51.022302+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:51","2":"2024-01-10 13:33:51","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:51","2":"2024-01-10 13:33:51","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:51.023605+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:52.024608+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:52.025709+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:52","2":"2024-01-10 13:33:52","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:52","2":"2024-01-10 13:33:52","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:52.027940+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:53.029311+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:53.030506+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:53","2":"2024-01-10 13:33:53","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:53","2":"2024-01-10 13:33:53","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:53.032446+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:54.033870+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:54.034516+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:54","2":"2024-01-10 13:33:54","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:54","2":"2024-01-10 13:33:54","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:54.035555+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:55.036404+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:55.037378+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:55","2":"2024-01-10 13:33:55","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:55","2":"2024-01-10 13:33:55","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:55.038843+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:56.039959+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:56.040557+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:56","2":"2024-01-10 13:33:56","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:56","2":"2024-01-10 13:33:56","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:56.041347+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:57.041916+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:57.042357+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:57","2":"2024-01-10 13:33:57","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:57","2":"2024-01-10 13:33:57","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:57.042977+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:58.043562+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:58.044570+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:58","2":"2024-01-10 13:33:58","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:58","2":"2024-01-10 13:33:58","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:58.046059+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:59.047711+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:59.048932+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:59","2":"2024-01-10 13:33:59","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:59","2":"2024-01-10 13:33:59","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:59.050647+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:00.051735+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:00.052920+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:00","2":"2024-01-10 13:34:00","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:00","2":"2024-01-10 13:34:00","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:00.054435+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:01.055526+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:01.055852+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:01","2":"2024-01-10 13:34:01","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:01","2":"2024-01-10 13:34:01","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:01.056291+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:02.056733+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:02.057701+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:02","2":"2024-01-10 13:34:02","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:02","2":"2024-01-10 13:34:02","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:02.059429+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:03.060831+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:03.061458+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:03","2":"2024-01-10 13:34:03","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:03","2":"2024-01-10 13:34:03","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:03.062329+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:04.063090+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:04.064395+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:04","2":"2024-01-10 13:34:04","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:04","2":"2024-01-10 13:34:04","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:04.066362+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:05.068301+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:05.069456+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:05","2":"2024-01-10 13:34:05","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:05","2":"2024-01-10 13:34:05","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:05.071553+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:06.072791+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:06.073091+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:06","2":"2024-01-10 13:34:06","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:06","2":"2024-01-10 13:34:06","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:06.073620+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:07.074159+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:07.075233+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:07","2":"2024-01-10 13:34:07","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:07","2":"2024-01-10 13:34:07","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:07.077160+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:08.078454+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:08.079032+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:08","2":"2024-01-10 13:34:08","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:08","2":"2024-01-10 13:34:08","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:08.079806+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:09.080559+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:09.081467+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:09","2":"2024-01-10 13:34:09","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:09","2":"2024-01-10 13:34:09","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:09.082965+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:10.084135+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:10.085056+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:10","2":"2024-01-10 13:34:10","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:10","2":"2024-01-10 13:34:10","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:10.086714+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:11.088638+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:11.090570+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:11","2":"2024-01-10 13:34:11","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:11","2":"2024-01-10 13:34:11","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:11.093032+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:12.094773+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:12.096331+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:12","2":"2024-01-10 13:34:12","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:12","2":"2024-01-10 13:34:12","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:12.098386+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:13.099894+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:13.101029+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:13","2":"2024-01-10 13:34:13","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:13","2":"2024-01-10 13:34:13","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:13.102666+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:14.103822+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:14.104699+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:14","2":"2024-01-10 13:34:14","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:14","2":"2024-01-10 13:34:14","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:14.106186+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:15.107195+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:15.108263+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:15","2":"2024-01-10 13:34:15","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:15","2":"2024-01-10 13:34:15","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:15.109943+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:16.111067+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:16.112088+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:16","2":"2024-01-10 13:34:16","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:16","2":"2024-01-10 13:34:16","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:16.113732+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:17.114977+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:17.116060+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:17","2":"2024-01-10 13:34:17","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:17","2":"2024-01-10 13:34:17","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:17.117853+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:18.120152+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:18.121424+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:18","2":"2024-01-10 13:34:18","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:18","2":"2024-01-10 13:34:18","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:18.123081+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:19.124398+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:19.125479+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:19","2":"2024-01-10 13:34:19","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:19","2":"2024-01-10 13:34:19","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:19.127467+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:20.128692+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:20.129553+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:20","2":"2024-01-10 13:34:20","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:20","2":"2024-01-10 13:34:20","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:20.130818+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:21.131841+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:21.132719+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:21","2":"2024-01-10 13:34:21","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:21","2":"2024-01-10 13:34:21","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:21.134266+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:22.135422+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:22.136311+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:22","2":"2024-01-10 13:34:22","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:22","2":"2024-01-10 13:34:22","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:22.137933+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:23.139777+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:23.141530+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:23","2":"2024-01-10 13:34:23","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:23","2":"2024-01-10 13:34:23","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:23.143487+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:24.145036+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:24.145972+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:24","2":"2024-01-10 13:34:24","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:24","2":"2024-01-10 13:34:24","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:24.147600+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:25.148946+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:25.150451+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:25","2":"2024-01-10 13:34:25","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:25","2":"2024-01-10 13:34:25","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:25.152127+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:26.153684+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:26.155023+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:26","2":"2024-01-10 13:34:26","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:26","2":"2024-01-10 13:34:26","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:26.157562+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:27.159215+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:27.160094+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:27","2":"2024-01-10 13:34:27","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:27","2":"2024-01-10 13:34:27","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:27.161462+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:28.162462+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:28.163303+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:28","2":"2024-01-10 13:34:28","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:28","2":"2024-01-10 13:34:28","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:28.164726+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:29.165807+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:29.166665+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:29","2":"2024-01-10 13:34:29","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:29","2":"2024-01-10 13:34:29","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:29.167944+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:30.169118+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:30.170317+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:30","2":"2024-01-10 13:34:30","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:30","2":"2024-01-10 13:34:30","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:30.172037+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:31.173447+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:31.175325+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:31","2":"2024-01-10 13:34:31","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:31","2":"2024-01-10 13:34:31","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:31.178373+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:32.180202+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:32.183886+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:32","2":"2024-01-10 13:34:32","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:32","2":"2024-01-10 13:34:32","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:32.187037+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:33.189640+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:33.190403+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:33","2":"2024-01-10 13:34:33","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:33","2":"2024-01-10 13:34:33","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:33.191648+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:34.192573+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:34.193689+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:34","2":"2024-01-10 13:34:34","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:34","2":"2024-01-10 13:34:34","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:34.195322+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:35.196732+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:35.197681+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:35","2":"2024-01-10 13:34:35","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:35","2":"2024-01-10 13:34:35","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:35.199218+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:36.200674+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:36.203120+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:36","2":"2024-01-10 13:34:36","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:36","2":"2024-01-10 13:34:36","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:36.205809+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:37.209574+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:37.212112+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:37","2":"2024-01-10 13:34:37","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:37","2":"2024-01-10 13:34:37","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:37.214742+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:38.216639+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:38.218413+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:38","2":"2024-01-10 13:34:38","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:38","2":"2024-01-10 13:34:38","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:38.221075+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:39.222883+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:39.225198+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:39","2":"2024-01-10 13:34:39","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:39","2":"2024-01-10 13:34:39","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:39.228133+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:40.230017+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:40.231626+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:40","2":"2024-01-10 13:34:40","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:40","2":"2024-01-10 13:34:40","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:40.234296+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:41.236213+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:41.237418+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:41","2":"2024-01-10 13:34:41","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:41","2":"2024-01-10 13:34:41","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:41.239295+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:42.240464+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:42.241875+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:42","2":"2024-01-10 13:34:42","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:42","2":"2024-01-10 13:34:42","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:42.244804+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:43.246363+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:43.247946+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:43","2":"2024-01-10 13:34:43","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:43","2":"2024-01-10 13:34:43","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:43.250283+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:44.251975+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:44.253470+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:44","2":"2024-01-10 13:34:44","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:44","2":"2024-01-10 13:34:44","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:44.255648+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:45.257160+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:45.258470+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:45","2":"2024-01-10 13:34:45","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:45","2":"2024-01-10 13:34:45","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:45.261022+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:46.262864+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:46.263795+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:46","2":"2024-01-10 13:34:46","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:46","2":"2024-01-10 13:34:46","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:46.265456+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:47.266956+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:47.268152+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:47","2":"2024-01-10 13:34:47","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:47","2":"2024-01-10 13:34:47","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:47.270463+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:48.271877+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:48.272221+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:48","2":"2024-01-10 13:34:48","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:48","2":"2024-01-10 13:34:48","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:48.272780+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:49.273446+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:49.274699+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:49","2":"2024-01-10 13:34:49","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:49","2":"2024-01-10 13:34:49","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:49.278518+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:50.280172+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:50.281331+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:50","2":"2024-01-10 13:34:50","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:50","2":"2024-01-10 13:34:50","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:50.283325+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:51.285062+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:51.285996+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:51","2":"2024-01-10 13:34:51","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:51","2":"2024-01-10 13:34:51","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:51.287599+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:52.289087+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:52.290721+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:52","2":"2024-01-10 13:34:52","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:52","2":"2024-01-10 13:34:52","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:52.292231+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:53.293497+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:53.295105+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:53","2":"2024-01-10 13:34:53","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:53","2":"2024-01-10 13:34:53","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:53.297619+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:54.299588+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:54.299958+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:54","2":"2024-01-10 13:34:54","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:54","2":"2024-01-10 13:34:54","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:54.300533+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:55.301093+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:55.302190+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:55","2":"2024-01-10 13:34:55","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:55","2":"2024-01-10 13:34:55","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:55.304081+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:56.305586+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:56.305966+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:56","2":"2024-01-10 13:34:56","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:56","2":"2024-01-10 13:34:56","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:56.306517+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:57.307156+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:57.308964+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:57","2":"2024-01-10 13:34:57","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:57","2":"2024-01-10 13:34:57","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:57.310957+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:58.312587+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:58.313617+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:58","2":"2024-01-10 13:34:58","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:58","2":"2024-01-10 13:34:58","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:58.315142+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:59.316302+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:59.317543+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:59","2":"2024-01-10 13:34:59","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:59","2":"2024-01-10 13:34:59","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:59.319542+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:00.321685+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:00.322136+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:00","2":"2024-01-10 13:35:00","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:00","2":"2024-01-10 13:35:00","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:00.322694+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:01.323197+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:01.323702+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:01","2":"2024-01-10 13:35:01","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:01","2":"2024-01-10 13:35:01","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:01.324466+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:02.325209+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:02.326709+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:02","2":"2024-01-10 13:35:02","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:02","2":"2024-01-10 13:35:02","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:02.328611+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:03.329939+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:03.331686+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:03","2":"2024-01-10 13:35:03","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:03","2":"2024-01-10 13:35:03","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:03.342874+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:04.344103+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:04.345672+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:04","2":"2024-01-10 13:35:04","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:04","2":"2024-01-10 13:35:04","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:04.347876+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:05.349680+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:05.350805+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:05","2":"2024-01-10 13:35:05","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:05","2":"2024-01-10 13:35:05","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:05.352463+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:06.353522+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:06.354571+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:06","2":"2024-01-10 13:35:06","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:06","2":"2024-01-10 13:35:06","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:06.356426+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:07.357624+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:07.359161+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:07","2":"2024-01-10 13:35:07","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:07","2":"2024-01-10 13:35:07","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:07.361433+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:08.362780+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:08.363617+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:08","2":"2024-01-10 13:35:08","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:08","2":"2024-01-10 13:35:08","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:08.365107+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:09.366259+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:09.367400+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:09","2":"2024-01-10 13:35:09","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:09","2":"2024-01-10 13:35:09","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:09.369315+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:10.370711+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:10.371601+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:10","2":"2024-01-10 13:35:10","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:10","2":"2024-01-10 13:35:10","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:10.372986+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:11.374127+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:11.375153+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:11","2":"2024-01-10 13:35:11","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:11","2":"2024-01-10 13:35:11","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:11.377183+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:12.378525+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:12.379545+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:12","2":"2024-01-10 13:35:12","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:12","2":"2024-01-10 13:35:12","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:12.381708+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:13.383425+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:13.383743+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:13","2":"2024-01-10 13:35:13","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:13","2":"2024-01-10 13:35:13","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:13.384199+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:14.384692+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:14.386116+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:14","2":"2024-01-10 13:35:14","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:14","2":"2024-01-10 13:35:14","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:14.388337+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:15.390680+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:15.391887+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:15","2":"2024-01-10 13:35:15","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:15","2":"2024-01-10 13:35:15","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:15.393687+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:16.395063+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:16.396354+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:16","2":"2024-01-10 13:35:16","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:16","2":"2024-01-10 13:35:16","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:16.398656+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:17.400660+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:17.402112+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:17","2":"2024-01-10 13:35:17","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:17","2":"2024-01-10 13:35:17","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:17.404791+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:18.406610+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:18.408168+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:18","2":"2024-01-10 13:35:18","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:18","2":"2024-01-10 13:35:18","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:18.410417+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:19.412181+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:19.413651+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:19","2":"2024-01-10 13:35:19","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:19","2":"2024-01-10 13:35:19","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:19.416244+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:20.418374+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:20.420953+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:20","2":"2024-01-10 13:35:20","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:20","2":"2024-01-10 13:35:20","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:20.423287+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:21.424767+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:21.426027+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:21","2":"2024-01-10 13:35:21","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:21","2":"2024-01-10 13:35:21","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:21.427967+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:22.429262+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:22.429789+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:22","2":"2024-01-10 13:35:22","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:22","2":"2024-01-10 13:35:22","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:22.430416+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:23.431047+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:23.432348+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:23","2":"2024-01-10 13:35:23","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:23","2":"2024-01-10 13:35:23","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:23.434153+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:24.435681+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:24.436850+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:24","2":"2024-01-10 13:35:24","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:24","2":"2024-01-10 13:35:24","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:24.438817+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:25.440163+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:25.441148+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:25","2":"2024-01-10 13:35:25","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:25","2":"2024-01-10 13:35:25","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:25.442671+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:26.443944+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:26.444828+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:26","2":"2024-01-10 13:35:26","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:26","2":"2024-01-10 13:35:26","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:26.446258+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:27.447560+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:27.449251+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:27","2":"2024-01-10 13:35:27","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:27","2":"2024-01-10 13:35:27","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:27.451395+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:28.453824+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:28.455201+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:28","2":"2024-01-10 13:35:28","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:28","2":"2024-01-10 13:35:28","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:28.457967+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:29.460307+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:29.460637+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:29","2":"2024-01-10 13:35:29","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:29","2":"2024-01-10 13:35:29","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:29.461146+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:30.461692+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:30.462744+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:30","2":"2024-01-10 13:35:30","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:30","2":"2024-01-10 13:35:30","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:30.464963+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:31.466881+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:31.468215+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:31","2":"2024-01-10 13:35:31","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:31","2":"2024-01-10 13:35:31","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:31.470157+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:32.471763+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:32.473428+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:32","2":"2024-01-10 13:35:32","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:32","2":"2024-01-10 13:35:32","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:32.476279+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:33.478617+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:33.479971+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:33","2":"2024-01-10 13:35:33","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:33","2":"2024-01-10 13:35:33","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:33.483533+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:34.485085+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:34.485405+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:34","2":"2024-01-10 13:35:34","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:34","2":"2024-01-10 13:35:34","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:34.485835+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:35.486438+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:35.487725+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:35","2":"2024-01-10 13:35:35","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:35","2":"2024-01-10 13:35:35","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:35.489994+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:36.491832+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:36.493260+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:36","2":"2024-01-10 13:35:36","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:36","2":"2024-01-10 13:35:36","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:36.495627+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:37.497206+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:37.498560+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:37","2":"2024-01-10 13:35:37","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:37","2":"2024-01-10 13:35:37","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:37.501110+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:38.502855+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:38.504471+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:38","2":"2024-01-10 13:35:38","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:38","2":"2024-01-10 13:35:38","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:38.506961+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:39.508790+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:39.509738+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:39","2":"2024-01-10 13:35:39","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:39","2":"2024-01-10 13:35:39","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:39.511237+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:40.512255+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:40.513231+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:40","2":"2024-01-10 13:35:40","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:40","2":"2024-01-10 13:35:40","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:40.514509+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:41.515601+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:41.515994+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:41","2":"2024-01-10 13:35:41","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:41","2":"2024-01-10 13:35:41","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:41.516684+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:42.517297+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:42.518236+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:42","2":"2024-01-10 13:35:42","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:42","2":"2024-01-10 13:35:42","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:42.519794+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:43.520737+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:43.521148+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:43","2":"2024-01-10 13:35:43","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:43","2":"2024-01-10 13:35:43","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:43.521669+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:44.522083+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:44.522491+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:44","2":"2024-01-10 13:35:44","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:44","2":"2024-01-10 13:35:44","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:44.523153+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:45.523775+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:45.524983+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:45","2":"2024-01-10 13:35:45","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:45","2":"2024-01-10 13:35:45","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:45.526909+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:46.528019+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:46.528851+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:46","2":"2024-01-10 13:35:46","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:46","2":"2024-01-10 13:35:46","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:46.529982+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:47.530830+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:47.531585+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:47","2":"2024-01-10 13:35:47","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:47","2":"2024-01-10 13:35:47","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:47.532796+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:48.533775+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:48.534535+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:48","2":"2024-01-10 13:35:48","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:48","2":"2024-01-10 13:35:48","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:48.535697+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:49.536746+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:49.537818+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:49","2":"2024-01-10 13:35:49","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:49","2":"2024-01-10 13:35:49","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:49.539501+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:50.541337+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:50.542269+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:50","2":"2024-01-10 13:35:50","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:50","2":"2024-01-10 13:35:50","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:50.543582+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:51.544843+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:51.545995+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:51","2":"2024-01-10 13:35:51","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:51","2":"2024-01-10 13:35:51","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:51.547680+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:52.549184+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:52.550604+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:52","2":"2024-01-10 13:35:52","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:52","2":"2024-01-10 13:35:52","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:52.552606+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:53.554264+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:53.555555+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:53","2":"2024-01-10 13:35:53","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:53","2":"2024-01-10 13:35:53","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:53.558003+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:54.559205+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:54.560717+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:54","2":"2024-01-10 13:35:54","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:54","2":"2024-01-10 13:35:54","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:54.562602+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:55.564065+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:55.564980+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:55","2":"2024-01-10 13:35:55","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:55","2":"2024-01-10 13:35:55","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:55.566496+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:56.567810+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:56.568470+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:56","2":"2024-01-10 13:35:56","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:56","2":"2024-01-10 13:35:56","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:56.569463+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:57.570356+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:57.571423+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:57","2":"2024-01-10 13:35:57","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:57","2":"2024-01-10 13:35:57","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:57.573742+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:58.574918+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:58.575445+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:58","2":"2024-01-10 13:35:58","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:58","2":"2024-01-10 13:35:58","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:58.576120+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:59.576855+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:59.578203+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:59","2":"2024-01-10 13:35:59","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:59","2":"2024-01-10 13:35:59","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:59.580345+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:00.581595+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:00.582394+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:00","2":"2024-01-10 13:36:00","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:00","2":"2024-01-10 13:36:00","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:00.583812+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:01.584783+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:01.585322+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:01","2":"2024-01-10 13:36:01","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:01","2":"2024-01-10 13:36:01","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:01.585957+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:02.586602+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:02.588123+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:02","2":"2024-01-10 13:36:02","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:02","2":"2024-01-10 13:36:02","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:02.590650+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:03.592525+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:03.594177+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:03","2":"2024-01-10 13:36:03","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:03","2":"2024-01-10 13:36:03","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:03.596478+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:04.598383+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:04.599382+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:04","2":"2024-01-10 13:36:04","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:04","2":"2024-01-10 13:36:04","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:04.600983+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:05.602174+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:05.602504+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:05","2":"2024-01-10 13:36:05","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:05","2":"2024-01-10 13:36:05","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:05.602926+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:06.603263+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:06.603641+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:06","2":"2024-01-10 13:36:06","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:06","2":"2024-01-10 13:36:06","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:06.604281+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:07.604758+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:07.605342+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:07","2":"2024-01-10 13:36:07","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:07","2":"2024-01-10 13:36:07","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:07.606301+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:08.606901+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:08.607312+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:08","2":"2024-01-10 13:36:08","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:08","2":"2024-01-10 13:36:08","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:08.608016+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:09.608521+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:09.608880+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:09","2":"2024-01-10 13:36:09","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:09","2":"2024-01-10 13:36:09","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:09.609403+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:10.609892+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:10.611279+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:10","2":"2024-01-10 13:36:10","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:10","2":"2024-01-10 13:36:10","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:10.611776+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:11.612197+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:11.612554+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:11","2":"2024-01-10 13:36:11","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:11","2":"2024-01-10 13:36:11","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:11.613100+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:12.614432+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:12.615852+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:12","2":"2024-01-10 13:36:12","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:12","2":"2024-01-10 13:36:12","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:12.617562+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:13.618979+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:13.619781+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:13","2":"2024-01-10 13:36:13","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:13","2":"2024-01-10 13:36:13","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:13.621023+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:14.622085+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:14.622924+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:14","2":"2024-01-10 13:36:14","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:14","2":"2024-01-10 13:36:14","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:14.624049+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:15.625002+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:15.625975+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:15","2":"2024-01-10 13:36:15","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:15","2":"2024-01-10 13:36:15","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:15.627524+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:16.628689+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:16.629537+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:16","2":"2024-01-10 13:36:16","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:16","2":"2024-01-10 13:36:16","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:16.630805+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:17.631850+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:17.632763+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:17","2":"2024-01-10 13:36:17","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:17","2":"2024-01-10 13:36:17","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:17.634022+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:18.635030+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:18.635875+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:18","2":"2024-01-10 13:36:18","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:18","2":"2024-01-10 13:36:18","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:18.637258+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:19.638147+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:19.638713+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:19","2":"2024-01-10 13:36:19","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:19","2":"2024-01-10 13:36:19","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:19.639581+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:20.640343+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:20.641374+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:20","2":"2024-01-10 13:36:20","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:20","2":"2024-01-10 13:36:20","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:20.643171+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:21.644249+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:21.644869+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:21","2":"2024-01-10 13:36:21","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:21","2":"2024-01-10 13:36:21","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:21.645841+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:22.646956+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:22.650069+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:22","2":"2024-01-10 13:36:22","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:22","2":"2024-01-10 13:36:22","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:22.654647+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:23.656427+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:23.657554+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:23","2":"2024-01-10 13:36:23","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:23","2":"2024-01-10 13:36:23","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:23.659355+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:24.660910+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:24.662364+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:24","2":"2024-01-10 13:36:24","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:24","2":"2024-01-10 13:36:24","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:24.664663+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:25.666363+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:25.667548+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:25","2":"2024-01-10 13:36:25","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:25","2":"2024-01-10 13:36:25","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:25.669630+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:26.671087+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:26.672741+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:26","2":"2024-01-10 13:36:26","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:26","2":"2024-01-10 13:36:26","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:26.675167+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:27.677500+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:27.680656+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:27","2":"2024-01-10 13:36:27","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:27","2":"2024-01-10 13:36:27","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:27.683205+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:28.684830+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:28.686142+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:28","2":"2024-01-10 13:36:28","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:28","2":"2024-01-10 13:36:28","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:28.689882+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:29.691899+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:29.693195+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:29","2":"2024-01-10 13:36:29","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:29","2":"2024-01-10 13:36:29","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:29.694916+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:30.696471+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:30.697566+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:30","2":"2024-01-10 13:36:30","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:30","2":"2024-01-10 13:36:30","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:30.699182+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:31.700453+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:31.702068+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:31","2":"2024-01-10 13:36:31","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:31","2":"2024-01-10 13:36:31","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:31.704207+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:32.705954+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:32.707737+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:32","2":"2024-01-10 13:36:32","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:32","2":"2024-01-10 13:36:32","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:32.709411+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:33.710793+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:33.712210+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:33","2":"2024-01-10 13:36:33","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:33","2":"2024-01-10 13:36:33","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:33.714157+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:34.715692+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:34.717303+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:34","2":"2024-01-10 13:36:34","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:34","2":"2024-01-10 13:36:34","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:34.720087+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:35.722797+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:35.724061+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:35","2":"2024-01-10 13:36:35","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:35","2":"2024-01-10 13:36:35","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:35.726030+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:36.727557+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:36.728621+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:36","2":"2024-01-10 13:36:36","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:36","2":"2024-01-10 13:36:36","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:36.730173+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:37.731403+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:37.731752+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:37","2":"2024-01-10 13:36:37","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:37","2":"2024-01-10 13:36:37","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:37.732265+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:38.732798+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:38.733912+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:38","2":"2024-01-10 13:36:38","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:38","2":"2024-01-10 13:36:38","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:38.735544+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:39.736768+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:39.737225+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:39","2":"2024-01-10 13:36:39","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:39","2":"2024-01-10 13:36:39","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:39.737808+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:40.738450+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:40.740018+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:40","2":"2024-01-10 13:36:40","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:40","2":"2024-01-10 13:36:40","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:40.741978+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:41.743260+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:41.744555+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:41","2":"2024-01-10 13:36:41","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:41","2":"2024-01-10 13:36:41","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:41.745835+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:42.746939+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:42.748039+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:42","2":"2024-01-10 13:36:42","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:42","2":"2024-01-10 13:36:42","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:42.749654+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:43.751047+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:43.752249+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:43","2":"2024-01-10 13:36:43","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:43","2":"2024-01-10 13:36:43","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:43.754150+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:44.755493+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:44.757136+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:44","2":"2024-01-10 13:36:44","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:44","2":"2024-01-10 13:36:44","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:44.760015+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:45.761482+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:45.763337+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:45","2":"2024-01-10 13:36:45","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:45","2":"2024-01-10 13:36:45","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:45.765446+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:46.767224+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:46.768610+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:46","2":"2024-01-10 13:36:46","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:46","2":"2024-01-10 13:36:46","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:46.770641+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:47.772524+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:47.774084+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:47","2":"2024-01-10 13:36:47","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:47","2":"2024-01-10 13:36:47","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:47.776949+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:48.778358+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:48.779836+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:48","2":"2024-01-10 13:36:48","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:48","2":"2024-01-10 13:36:48","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:48.783272+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:49.785047+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:49.785452+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:49","2":"2024-01-10 13:36:49","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:49","2":"2024-01-10 13:36:49","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:49.786152+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:50.786655+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:50.787924+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:50","2":"2024-01-10 13:36:50","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:50","2":"2024-01-10 13:36:50","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:50.789130+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:51.790567+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:51.791610+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:51","2":"2024-01-10 13:36:51","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:51","2":"2024-01-10 13:36:51","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:51.793264+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:52.794511+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:52.795377+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:52","2":"2024-01-10 13:36:52","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:52","2":"2024-01-10 13:36:52","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:52.796789+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:53.797900+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:53.799021+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:53","2":"2024-01-10 13:36:53","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:53","2":"2024-01-10 13:36:53","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:53.801005+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:54.802158+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:54.803142+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:54","2":"2024-01-10 13:36:54","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:54","2":"2024-01-10 13:36:54","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:54.804704+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:55.805759+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:55.807071+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:55","2":"2024-01-10 13:36:55","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:55","2":"2024-01-10 13:36:55","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:55.808949+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:56.810382+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:56.811608+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:56","2":"2024-01-10 13:36:56","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:56","2":"2024-01-10 13:36:56","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:56.813314+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:57.814654+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:57.815931+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:57","2":"2024-01-10 13:36:57","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:57","2":"2024-01-10 13:36:57","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:57.817892+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:58.819361+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:58.819903+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:58","2":"2024-01-10 13:36:58","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:58","2":"2024-01-10 13:36:58","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:58.820891+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:59.821825+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:59.823102+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:59","2":"2024-01-10 13:36:59","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:59","2":"2024-01-10 13:36:59","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:59.825209+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:37:00.826737+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:37:00.829814+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:37:00","2":"2024-01-10 13:37:00","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:37:00","2":"2024-01-10 13:37:00","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:37:00.833273+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:37:01.836203+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:37:01.838582+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:37:01","2":"2024-01-10 13:37:01","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:37:01","2":"2024-01-10 13:37:01","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:37:01.842646+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:37:02.845880+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:37:02.848127+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:37:02","2":"2024-01-10 13:37:02","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:37:02","2":"2024-01-10 13:37:02","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:37:02.851717+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:37:03.854519+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:37:03.856099+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:37:03","2":"2024-01-10 13:37:03","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:37:03","2":"2024-01-10 13:37:03","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:37:03.858343+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:37:04.859721+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:37:04.861053+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:37:04","2":"2024-01-10 13:37:04","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:37:04","2":"2024-01-10 13:37:04","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:37:04.863114+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:37:05.864908+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:37:05.866652+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:37:05","2":"2024-01-10 13:37:05","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:37:05","2":"2024-01-10 13:37:05","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:37:05.869454+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:37:06.872259+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:37:06.872800+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:37:06","2":"2024-01-10 13:37:06","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:37:06","2":"2024-01-10 13:37:06","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:37:06.874987+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:37:07.875650+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:37:07.876284+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:37:07","2":"2024-01-10 13:37:07","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:37:07","2":"2024-01-10 13:37:07","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:37:07.877223+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:37:08.878218+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:37:08.879054+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:37:08","2":"2024-01-10 13:37:08","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:37:08","2":"2024-01-10 13:37:08","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:37:08.880396+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:37:09.881385+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:37:09.882273+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:37:09","2":"2024-01-10 13:37:09","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:37:09","2":"2024-01-10 13:37:09","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:37:09.883587+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:37:10.884812+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:37:10.885703+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:37:10","2":"2024-01-10 13:37:10","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:37:10","2":"2024-01-10 13:37:10","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:37:10.887031+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:37:11.888710+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:37:11.890201+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:37:11","2":"2024-01-10 13:37:11","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:37:11","2":"2024-01-10 13:37:11","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:37:11.893256+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:37:12.895868+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:37:12.897167+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:37:12","2":"2024-01-10 13:37:12","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:37:12","2":"2024-01-10 13:37:12","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:37:12.899334+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:37:13.900974+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:37:13.903022+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:37:13","2":"2024-01-10 13:37:13","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:37:13","2":"2024-01-10 13:37:13","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:37:13.905263+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:37:14.906845+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:37:14.907551+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:37:14","2":"2024-01-10 13:37:14","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:37:14","2":"2024-01-10 13:37:14","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:37:14.908666+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:37:15.909558+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:37:15.910547+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:37:15","2":"2024-01-10 13:37:15","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:37:15","2":"2024-01-10 13:37:15","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:37:15.911986+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:37:16.913378+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:37:16.914951+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:37:16","2":"2024-01-10 13:37:16","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:37:16","2":"2024-01-10 13:37:16","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:37:16.917277+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:37:17.919253+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:37:17.920649+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:37:17","2":"2024-01-10 13:37:17","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:37:17","2":"2024-01-10 13:37:17","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:37:17.922617+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:37:18.924072+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:37:18.925497+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:37:18","2":"2024-01-10 13:37:18","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:37:18","2":"2024-01-10 13:37:18","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:37:18.927726+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:37:19.929203+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:37:19.930041+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:37:19","2":"2024-01-10 13:37:19","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:37:19","2":"2024-01-10 13:37:19","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:37:19.931382+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:37:20.932551+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:37:20.934138+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:37:20","2":"2024-01-10 13:37:20","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:37:20","2":"2024-01-10 13:37:20","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:37:20.936547+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:37:21.938498+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:37:21.940042+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:37:21","2":"2024-01-10 13:37:21","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:37:21","2":"2024-01-10 13:37:21","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:37:21.942334+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:37:22.943834+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:37:22.944714+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:37:22","2":"2024-01-10 13:37:22","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:37:22","2":"2024-01-10 13:37:22","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:37:22.946244+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:37:23.947129+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:37:23.947571+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:37:23","2":"2024-01-10 13:37:23","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:37:23","2":"2024-01-10 13:37:23","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:37:23.948208+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:37:24.948650+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:37:24.949022+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:37:24","2":"2024-01-10 13:37:24","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:37:24","2":"2024-01-10 13:37:24","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:37:24.949542+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:37:25.949943+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:37:25.950285+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:37:25","2":"2024-01-10 13:37:25","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:37:25","2":"2024-01-10 13:37:25","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:37:25.950709+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:37:26.951095+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:37:26.951787+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:37:26","2":"2024-01-10 13:37:26","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:37:26","2":"2024-01-10 13:37:26","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:37:26.952558+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:37:27.953301+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:37:27.954351+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:37:27","2":"2024-01-10 13:37:27","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:37:27","2":"2024-01-10 13:37:27","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:37:27.955734+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:37:28.956838+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:37:28.957556+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:37:28","2":"2024-01-10 13:37:28","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:37:28","2":"2024-01-10 13:37:28","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:37:28.958659+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:37:29.959522+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:37:29.960440+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:37:29","2":"2024-01-10 13:37:29","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:37:29","2":"2024-01-10 13:37:29","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:37:29.961958+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:37:30.963254+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:37:30.964425+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:37:30","2":"2024-01-10 13:37:30","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:37:30","2":"2024-01-10 13:37:30","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:37:30.966013+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:37:31.967157+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:37:31.968564+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:37:31","2":"2024-01-10 13:37:31","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:37:31","2":"2024-01-10 13:37:31","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:37:31.970079+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:37:32.971323+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:37:32.972539+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:37:32","2":"2024-01-10 13:37:32","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:37:32","2":"2024-01-10 13:37:32","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:37:32.974104+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:37:33.975196+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:37:33.976424+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:37:33","2":"2024-01-10 13:37:33","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:37:33","2":"2024-01-10 13:37:33","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:37:33.978124+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:37:34.979826+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:37:34.981609+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:37:34","2":"2024-01-10 13:37:34","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:37:34","2":"2024-01-10 13:37:34","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:37:34.983964+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:37:35.985473+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:37:35.986839+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:37:35","2":"2024-01-10 13:37:35","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:37:35","2":"2024-01-10 13:37:35","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:37:35.989155+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:37:36.991804+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:37:36.993508+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:37:36","2":"2024-01-10 13:37:36","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:37:36","2":"2024-01-10 13:37:36","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:37:36.996442+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:37:37.999516+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:37:38.000981+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:37:38","2":"2024-01-10 13:37:38","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:37:38","2":"2024-01-10 13:37:38","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:37:38.003062+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:37:39.004630+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:37:39.006971+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:37:39","2":"2024-01-10 13:37:39","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:37:39","2":"2024-01-10 13:37:39","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:37:39.008420+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:37:40.009582+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:37:40.009914+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:37:40","2":"2024-01-10 13:37:40","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:37:40","2":"2024-01-10 13:37:40","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:37:40.010387+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:37:41.010791+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:37:41.011536+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:37:41","2":"2024-01-10 13:37:41","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:37:41","2":"2024-01-10 13:37:41","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:37:41.012687+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:37:42.013669+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:37:42.014792+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:37:42","2":"2024-01-10 13:37:42","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:37:42","2":"2024-01-10 13:37:42","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:37:42.016869+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:38:38.130777+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:38:38.131541+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:38:38.131591+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:38:38.131635+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:38:38.131686+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Console\Helper\HelperSet::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Console\\Helper\\HelperSet::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Helper/HelperSet.php:94)"} []
[2024-01-10T13:38:38.154184+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:38:38.157606+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:38:38.164821+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:38:38","2":"2024-01-10 13:38:38","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:38:38","2":"2024-01-10 13:38:38","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:38:38.165975+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:38:39.166674+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:38:39.167558+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:38:39","2":"2024-01-10 13:38:39","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:38:39","2":"2024-01-10 13:38:39","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:38:39.168990+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:38:40.170263+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:38:40.171527+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:38:40","2":"2024-01-10 13:38:40","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:38:40","2":"2024-01-10 13:38:40","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:38:40.173303+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:38:41.174613+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:38:41.175134+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:38:41","2":"2024-01-10 13:38:41","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:38:41","2":"2024-01-10 13:38:41","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:38:41.176045+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:38:42.176710+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:38:42.177799+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:38:42","2":"2024-01-10 13:38:42","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:38:42","2":"2024-01-10 13:38:42","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:38:42.179431+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:38:43.180733+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:38:43.182170+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:38:43","2":"2024-01-10 13:38:43","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:38:43","2":"2024-01-10 13:38:43","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:38:43.184246+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:38:44.185872+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:38:44.187048+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:38:44","2":"2024-01-10 13:38:44","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:38:44","2":"2024-01-10 13:38:44","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:38:44.189042+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:38:45.190529+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:38:45.191780+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:38:45","2":"2024-01-10 13:38:45","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:38:45","2":"2024-01-10 13:38:45","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:38:45.193841+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:38:46.195142+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:38:46.196280+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:38:46","2":"2024-01-10 13:38:46","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:38:46","2":"2024-01-10 13:38:46","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:38:46.197997+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:38:47.199235+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:38:47.200600+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:38:47","2":"2024-01-10 13:38:47","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:38:47","2":"2024-01-10 13:38:47","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:38:47.202757+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:38:48.204136+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:38:48.205625+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:38:48","2":"2024-01-10 13:38:48","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:38:48","2":"2024-01-10 13:38:48","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:38:48.207608+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:38:49.209267+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:38:49.210734+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:38:49","2":"2024-01-10 13:38:49","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:38:49","2":"2024-01-10 13:38:49","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:38:49.211771+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:38:50.212334+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:38:50.213867+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:38:50","2":"2024-01-10 13:38:50","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:38:50","2":"2024-01-10 13:38:50","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:38:50.216171+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:38:51.217844+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:38:51.219076+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:38:51","2":"2024-01-10 13:38:51","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:38:51","2":"2024-01-10 13:38:51","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:38:51.221079+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:38:52.222532+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:38:52.223869+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:38:52","2":"2024-01-10 13:38:52","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:38:52","2":"2024-01-10 13:38:52","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:38:52.226279+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:38:53.227658+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:38:53.228658+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:38:53","2":"2024-01-10 13:38:53","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:38:53","2":"2024-01-10 13:38:53","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:38:53.229702+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:38:54.230621+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:38:54.231920+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:38:54","2":"2024-01-10 13:38:54","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:38:54","2":"2024-01-10 13:38:54","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:38:54.233800+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:38:55.235629+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:38:55.236999+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:38:55","2":"2024-01-10 13:38:55","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:38:55","2":"2024-01-10 13:38:55","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:38:55.238999+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:38:56.240788+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:38:56.242166+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:38:56","2":"2024-01-10 13:38:56","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:38:56","2":"2024-01-10 13:38:56","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:38:56.244093+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:38:57.245660+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:38:57.246975+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:38:57","2":"2024-01-10 13:38:57","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:38:57","2":"2024-01-10 13:38:57","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:38:57.249021+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:38:58.250528+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:38:58.251895+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:38:58","2":"2024-01-10 13:38:58","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:38:58","2":"2024-01-10 13:38:58","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:38:58.253998+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:38:59.255476+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:38:59.256908+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:38:59","2":"2024-01-10 13:38:59","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:38:59","2":"2024-01-10 13:38:59","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:38:59.258806+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:39:00.260535+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:39:00.261943+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:39:00","2":"2024-01-10 13:39:00","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:39:00","2":"2024-01-10 13:39:00","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:39:00.263903+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:39:01.265375+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:39:01.266896+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:39:01","2":"2024-01-10 13:39:01","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:39:01","2":"2024-01-10 13:39:01","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:39:01.269424+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:39:02.271367+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:39:02.272846+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:39:02","2":"2024-01-10 13:39:02","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:39:02","2":"2024-01-10 13:39:02","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:39:02.274793+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:39:03.276530+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:39:03.277840+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:39:03","2":"2024-01-10 13:39:03","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:39:03","2":"2024-01-10 13:39:03","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:39:03.279779+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:39:04.281286+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:39:04.282674+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:39:04","2":"2024-01-10 13:39:04","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:39:04","2":"2024-01-10 13:39:04","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:39:04.284639+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:39:05.286113+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:39:05.287541+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:39:05","2":"2024-01-10 13:39:05","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:39:05","2":"2024-01-10 13:39:05","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:39:05.289576+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:39:06.290934+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:39:06.291540+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:39:06","2":"2024-01-10 13:39:06","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:39:06","2":"2024-01-10 13:39:06","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:39:06.292288+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:39:07.293357+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:39:07.294987+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:39:07","2":"2024-01-10 13:39:07","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:39:07","2":"2024-01-10 13:39:07","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:39:07.296885+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:39:08.298509+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:39:08.299814+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:39:08","2":"2024-01-10 13:39:08","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:39:08","2":"2024-01-10 13:39:08","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:39:08.301825+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:39:09.303411+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:39:09.304736+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:39:09","2":"2024-01-10 13:39:09","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:39:09","2":"2024-01-10 13:39:09","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:39:09.306660+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:39:10.308634+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:39:10.310007+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:39:10","2":"2024-01-10 13:39:10","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:39:10","2":"2024-01-10 13:39:10","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:39:10.311831+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:39:11.313384+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:39:11.314666+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:39:11","2":"2024-01-10 13:39:11","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:39:11","2":"2024-01-10 13:39:11","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:39:11.316615+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:39:12.318262+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:39:12.319694+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:39:12","2":"2024-01-10 13:39:12","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:39:12","2":"2024-01-10 13:39:12","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:39:12.321766+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:39:13.323531+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:39:13.324919+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:39:13","2":"2024-01-10 13:39:13","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:39:13","2":"2024-01-10 13:39:13","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:39:13.326772+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:39:14.328524+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:39:14.329923+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:39:14","2":"2024-01-10 13:39:14","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:39:14","2":"2024-01-10 13:39:14","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:39:14.331893+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:39:15.333491+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:39:15.334850+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:39:15","2":"2024-01-10 13:39:15","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:39:15","2":"2024-01-10 13:39:15","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:39:15.336820+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:39:16.338108+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:39:16.338449+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:39:16","2":"2024-01-10 13:39:16","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:39:16","2":"2024-01-10 13:39:16","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:39:16.338947+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:39:17.339479+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:39:17.340959+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:39:17","2":"2024-01-10 13:39:17","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:39:17","2":"2024-01-10 13:39:17","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:39:17.342950+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:39:18.344576+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:39:18.345977+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:39:18","2":"2024-01-10 13:39:18","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:39:18","2":"2024-01-10 13:39:18","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:39:18.347846+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:39:19.349405+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:39:19.350655+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:39:19","2":"2024-01-10 13:39:19","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:39:19","2":"2024-01-10 13:39:19","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:39:19.352598+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:39:20.354244+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:39:20.355706+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:39:20","2":"2024-01-10 13:39:20","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:39:20","2":"2024-01-10 13:39:20","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:39:20.357703+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:39:21.359077+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:39:21.360744+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:39:21","2":"2024-01-10 13:39:21","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:39:21","2":"2024-01-10 13:39:21","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:39:21.363196+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:39:22.365053+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:39:22.366565+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:39:22","2":"2024-01-10 13:39:22","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:39:22","2":"2024-01-10 13:39:22","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:39:22.368537+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:39:23.370248+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:39:23.371559+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:39:23","2":"2024-01-10 13:39:23","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:39:23","2":"2024-01-10 13:39:23","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:39:23.373510+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:39:24.375268+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:39:24.376675+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:39:24","2":"2024-01-10 13:39:24","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:39:24","2":"2024-01-10 13:39:24","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:39:24.379009+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:39:25.380606+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:39:25.381927+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:39:25","2":"2024-01-10 13:39:25","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:39:25","2":"2024-01-10 13:39:25","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:39:25.383692+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:39:26.385132+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:39:26.386522+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:39:26","2":"2024-01-10 13:39:26","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:39:26","2":"2024-01-10 13:39:26","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:39:26.388543+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:39:27.390184+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:39:27.391603+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:39:27","2":"2024-01-10 13:39:27","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:39:27","2":"2024-01-10 13:39:27","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:39:27.393398+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:39:28.395061+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:39:28.396314+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:39:28","2":"2024-01-10 13:39:28","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:39:28","2":"2024-01-10 13:39:28","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:39:28.398104+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:39:29.399422+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:39:29.400871+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:39:29","2":"2024-01-10 13:39:29","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:39:29","2":"2024-01-10 13:39:29","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:39:29.402840+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:39:30.404522+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:39:30.405863+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:39:30","2":"2024-01-10 13:39:30","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:39:30","2":"2024-01-10 13:39:30","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:39:30.407635+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:39:31.409497+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:39:31.410852+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:39:31","2":"2024-01-10 13:39:31","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:39:31","2":"2024-01-10 13:39:31","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:39:31.412638+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:39:32.414220+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:39:32.415499+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:39:32","2":"2024-01-10 13:39:32","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:39:32","2":"2024-01-10 13:39:32","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:39:32.417484+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:39:33.419330+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:39:33.420877+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:39:33","2":"2024-01-10 13:39:33","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:39:33","2":"2024-01-10 13:39:33","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:39:33.423032+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:39:34.424421+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:39:34.425972+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:39:34","2":"2024-01-10 13:39:34","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:39:34","2":"2024-01-10 13:39:34","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:39:34.428082+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:39:35.430247+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:39:35.431701+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:39:35","2":"2024-01-10 13:39:35","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:39:35","2":"2024-01-10 13:39:35","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:39:35.433712+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:39:36.435252+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:39:36.435580+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:39:36","2":"2024-01-10 13:39:36","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:39:36","2":"2024-01-10 13:39:36","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:39:36.436008+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:39:37.436518+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:39:37.438042+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:39:37","2":"2024-01-10 13:39:37","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:39:37","2":"2024-01-10 13:39:37","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:39:37.440180+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:39:38.441784+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:39:38.443223+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:39:38","2":"2024-01-10 13:39:38","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:39:38","2":"2024-01-10 13:39:38","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:39:38.445166+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:39:39.446567+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:39:39.447319+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:39:39","2":"2024-01-10 13:39:39","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:39:39","2":"2024-01-10 13:39:39","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:39:39.448390+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:39:40.449243+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:39:40.450739+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:39:40","2":"2024-01-10 13:39:40","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:39:40","2":"2024-01-10 13:39:40","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:39:40.452731+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:39:41.454238+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:39:41.455858+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:39:41","2":"2024-01-10 13:39:41","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:39:41","2":"2024-01-10 13:39:41","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:39:41.457430+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:39:42.458798+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:39:42.460213+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:39:42","2":"2024-01-10 13:39:42","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:39:42","2":"2024-01-10 13:39:42","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:39:42.462257+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:39:43.464014+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:39:43.465369+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:39:43","2":"2024-01-10 13:39:43","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:39:43","2":"2024-01-10 13:39:43","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:39:43.467366+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:39:44.468747+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:39:44.469089+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:39:44","2":"2024-01-10 13:39:44","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:39:44","2":"2024-01-10 13:39:44","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:39:44.469608+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:39:45.470356+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:39:45.471677+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:39:45","2":"2024-01-10 13:39:45","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:39:45","2":"2024-01-10 13:39:45","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:39:45.473502+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:39:46.475573+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:39:46.477044+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:39:46","2":"2024-01-10 13:39:46","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:39:46","2":"2024-01-10 13:39:46","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:39:46.479120+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:39:47.480830+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:39:47.482161+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:39:47","2":"2024-01-10 13:39:47","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:39:47","2":"2024-01-10 13:39:47","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:39:47.483964+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:39:48.485871+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:39:48.487302+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:39:48","2":"2024-01-10 13:39:48","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:39:48","2":"2024-01-10 13:39:48","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:39:48.489278+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:39:49.491007+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:39:49.491440+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:39:49","2":"2024-01-10 13:39:49","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:39:49","2":"2024-01-10 13:39:49","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:39:49.492056+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:39:50.492659+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:39:50.494070+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:39:50","2":"2024-01-10 13:39:50","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:39:50","2":"2024-01-10 13:39:50","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:39:50.495948+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:39:51.497642+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:39:51.498866+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:39:51","2":"2024-01-10 13:39:51","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:39:51","2":"2024-01-10 13:39:51","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:39:51.500790+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:39:52.502433+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:39:52.503842+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:39:52","2":"2024-01-10 13:39:52","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:39:52","2":"2024-01-10 13:39:52","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:39:52.505737+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:39:53.507100+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:39:53.508455+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:39:53","2":"2024-01-10 13:39:53","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:39:53","2":"2024-01-10 13:39:53","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:39:53.510244+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:39:54.511868+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:39:54.512285+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:39:54","2":"2024-01-10 13:39:54","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:39:54","2":"2024-01-10 13:39:54","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:39:54.512897+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:39:55.513506+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:39:55.515074+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:39:55","2":"2024-01-10 13:39:55","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:39:55","2":"2024-01-10 13:39:55","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:39:55.517162+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:39:56.518747+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:39:56.520003+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:39:56","2":"2024-01-10 13:39:56","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:39:56","2":"2024-01-10 13:39:56","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:39:56.521862+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:39:57.523493+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:39:57.524824+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:39:57","2":"2024-01-10 13:39:57","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:39:57","2":"2024-01-10 13:39:57","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:39:57.526422+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:39:58.528053+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:39:58.529527+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:39:58","2":"2024-01-10 13:39:58","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:39:58","2":"2024-01-10 13:39:58","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:39:58.531570+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:39:59.533407+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:39:59.534835+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:39:59","2":"2024-01-10 13:39:59","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:39:59","2":"2024-01-10 13:39:59","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:39:59.537003+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:40:00.538771+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:40:00.540006+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:40:00","2":"2024-01-10 13:40:00","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:40:00","2":"2024-01-10 13:40:00","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:40:00.541863+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:40:01.543320+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:40:01.544794+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:40:01","2":"2024-01-10 13:40:01","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:40:01","2":"2024-01-10 13:40:01","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:40:01.546890+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:40:02.548677+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:40:02.550074+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:40:02","2":"2024-01-10 13:40:02","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:40:02","2":"2024-01-10 13:40:02","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:40:02.552202+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:40:03.554152+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:40:03.555391+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:40:03","2":"2024-01-10 13:40:03","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:40:03","2":"2024-01-10 13:40:03","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:40:03.557748+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:40:04.559615+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:40:04.561039+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:40:04","2":"2024-01-10 13:40:04","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:40:04","2":"2024-01-10 13:40:04","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:40:04.562908+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:40:05.564548+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:40:05.565782+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:40:05","2":"2024-01-10 13:40:05","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:40:05","2":"2024-01-10 13:40:05","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:40:05.567520+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:40:06.569293+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:40:06.570666+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:40:06","2":"2024-01-10 13:40:06","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:40:06","2":"2024-01-10 13:40:06","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:40:06.572638+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:40:07.574353+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:40:07.575788+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:40:07","2":"2024-01-10 13:40:07","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:40:07","2":"2024-01-10 13:40:07","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:40:07.577808+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:40:08.579555+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:40:08.580980+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:40:08","2":"2024-01-10 13:40:08","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:40:08","2":"2024-01-10 13:40:08","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:40:08.582799+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:40:09.584450+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:40:09.585878+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:40:09","2":"2024-01-10 13:40:09","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:40:09","2":"2024-01-10 13:40:09","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:40:09.587824+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:40:10.589510+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:40:10.590887+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:40:10","2":"2024-01-10 13:40:10","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:40:10","2":"2024-01-10 13:40:10","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:40:10.592969+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:40:11.594686+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:40:11.596153+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:40:11","2":"2024-01-10 13:40:11","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:40:11","2":"2024-01-10 13:40:11","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:40:11.598193+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:40:12.599725+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:40:12.601057+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:40:12","2":"2024-01-10 13:40:12","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:40:12","2":"2024-01-10 13:40:12","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:40:12.603089+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:40:13.604758+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:40:13.606091+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:40:13","2":"2024-01-10 13:40:13","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:40:13","2":"2024-01-10 13:40:13","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:40:13.607904+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:40:14.609725+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:40:14.611148+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:40:14","2":"2024-01-10 13:40:14","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:40:14","2":"2024-01-10 13:40:14","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:40:14.612992+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:40:15.614567+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:40:15.615892+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:40:15","2":"2024-01-10 13:40:15","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:40:15","2":"2024-01-10 13:40:15","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:40:15.617894+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:40:16.619680+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:40:16.621107+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:40:16","2":"2024-01-10 13:40:16","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:40:16","2":"2024-01-10 13:40:16","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:40:16.623037+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:40:17.624839+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:40:17.626274+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:40:17","2":"2024-01-10 13:40:17","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:40:17","2":"2024-01-10 13:40:17","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:40:17.628250+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:40:18.629721+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:40:18.630967+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:40:18","2":"2024-01-10 13:40:18","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:40:18","2":"2024-01-10 13:40:18","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:40:18.633073+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:40:19.634654+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:40:19.635348+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:40:19","2":"2024-01-10 13:40:19","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:40:19","2":"2024-01-10 13:40:19","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:40:19.636324+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:40:20.636958+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:40:20.638234+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:40:20","2":"2024-01-10 13:40:20","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:40:20","2":"2024-01-10 13:40:20","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:40:20.640035+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:40:21.641605+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:40:21.642994+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:40:21","2":"2024-01-10 13:40:21","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:40:21","2":"2024-01-10 13:40:21","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:40:21.645060+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:40:22.646580+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:40:22.647951+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:40:22","2":"2024-01-10 13:40:22","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:40:22","2":"2024-01-10 13:40:22","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:40:22.649871+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:40:23.651290+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:40:23.652679+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:40:23","2":"2024-01-10 13:40:23","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:40:23","2":"2024-01-10 13:40:23","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:40:23.654458+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:40:24.656122+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:40:24.657736+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:40:24","2":"2024-01-10 13:40:24","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:40:24","2":"2024-01-10 13:40:24","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:40:24.660051+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:40:25.662174+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:40:25.663639+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:40:25","2":"2024-01-10 13:40:25","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:40:25","2":"2024-01-10 13:40:25","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:40:25.665694+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:40:26.667459+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:40:26.668838+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:40:26","2":"2024-01-10 13:40:26","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:40:26","2":"2024-01-10 13:40:26","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:40:26.670862+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:40:27.672317+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:40:27.673879+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:40:27","2":"2024-01-10 13:40:27","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:40:27","2":"2024-01-10 13:40:27","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:40:27.676174+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:40:28.678007+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:40:28.679343+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:40:28","2":"2024-01-10 13:40:28","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:40:28","2":"2024-01-10 13:40:28","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:40:28.681463+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:40:29.683183+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:40:29.684693+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:40:29","2":"2024-01-10 13:40:29","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:40:29","2":"2024-01-10 13:40:29","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:40:29.686815+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:40:30.688600+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:40:30.689933+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:40:30","2":"2024-01-10 13:40:30","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:40:30","2":"2024-01-10 13:40:30","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:40:30.691843+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:40:31.693611+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:40:31.694478+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:40:31","2":"2024-01-10 13:40:31","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:40:31","2":"2024-01-10 13:40:31","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:40:31.695944+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:40:32.697202+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:40:32.698142+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:40:32","2":"2024-01-10 13:40:32","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:40:32","2":"2024-01-10 13:40:32","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:40:32.699700+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:40:33.700889+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:40:33.702196+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:40:33","2":"2024-01-10 13:40:33","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:40:33","2":"2024-01-10 13:40:33","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:40:33.704763+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:40:34.706745+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:40:34.708239+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:40:34","2":"2024-01-10 13:40:34","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:40:34","2":"2024-01-10 13:40:34","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:40:34.710696+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:40:35.712305+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:40:35.713403+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:40:35","2":"2024-01-10 13:40:35","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:40:35","2":"2024-01-10 13:40:35","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:40:35.715503+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:40:36.717020+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:40:36.719131+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:40:36","2":"2024-01-10 13:40:36","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:40:36","2":"2024-01-10 13:40:36","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:40:36.721550+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:40:37.723211+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:40:37.723598+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:40:37","2":"2024-01-10 13:40:37","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:40:37","2":"2024-01-10 13:40:37","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:40:37.724149+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:40:38.724697+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:40:38.725799+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:40:38","2":"2024-01-10 13:40:38","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:40:38","2":"2024-01-10 13:40:38","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:40:38.727384+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:40:39.728837+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:40:39.730297+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:40:39","2":"2024-01-10 13:40:39","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:40:39","2":"2024-01-10 13:40:39","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:40:39.732281+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:40:40.733856+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:40:40.734958+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:40:40","2":"2024-01-10 13:40:40","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:40:40","2":"2024-01-10 13:40:40","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:40:40.737535+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:40:41.738792+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:40:41.740168+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:40:41","2":"2024-01-10 13:40:41","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:40:41","2":"2024-01-10 13:40:41","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:40:41.742420+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:40:42.743889+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:40:42.745323+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:40:42","2":"2024-01-10 13:40:42","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:40:42","2":"2024-01-10 13:40:42","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:40:42.747189+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:40:43.748612+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:40:43.748989+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:40:43","2":"2024-01-10 13:40:43","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:40:43","2":"2024-01-10 13:40:43","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:40:43.749488+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:40:44.750093+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:40:44.751943+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:40:44","2":"2024-01-10 13:40:44","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:40:44","2":"2024-01-10 13:40:44","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:40:44.755397+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:40:44.785572+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:40:44.786776+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:40:44.787154+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:40:44.787422+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:40:44.792563+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Routing\RouteCollection::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Routing\\RouteCollection::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/routing/RouteCollection.php:59)"} []
[2024-01-10T13:40:44.792782+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Routing\RouteCollection::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Routing\\RouteCollection::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/routing/RouteCollection.php:69)"} []
[2024-01-10T13:40:44.813673+00:00] request.INFO: Matched route "newsletters_send". {"route":"newsletters_send","route_parameters":{"_route":"newsletters_send","_controller":"App\\Controller\\NewslettersController::send","id":"1"},"request_uri":"http://localhost:8001/newsletters/send/1","method":"GET"} []
[2024-01-10T13:40:44.819946+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:40:44.821236+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ? (parameters: array{"1":"1"}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ?","params":{"1":"1"},"types":{"1":1}} []
[2024-01-10T13:40:44.824051+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:40:44.825204+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:40:44.826981+00:00] messenger.INFO: Sending message App\Message\SendNewsletterMessage with async sender using Symfony\Component\Messenger\Bridge\Doctrine\Transport\DoctrineTransport {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage","alias":"async","sender":"Symfony\\Component\\Messenger\\Bridge\\Doctrine\\Transport\\DoctrineTransport"} []
[2024-01-10T13:40:44.827299+00:00] doctrine.DEBUG: Executing statement: INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?) (parameters: array{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:1:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"default","4":"2024-01-10 13:40:44","5":"2024-01-10 13:40:44"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?)","params":{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:1:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"default","4":"2024-01-10 13:40:44","5":"2024-01-10 13:40:44"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2024-01-10T13:40:44.834629+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:40:44.834748+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:40:44.834824+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:40:44.834907+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:40:44.834974+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:40:44.835040+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:40:44.836169+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:40:44.836271+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:40:44.836448+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:40:44.836527+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:40:44.837002+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:40:44.837583+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:40:44.837882+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:40:44.838871+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:40:44.839111+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:40:44.840376+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:40:44.840565+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:40:44.841676+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:40:44.841915+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:40:44.843103+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:40:44.845048+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:40:44.845252+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:40:44.846741+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:40:44.847830+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:40:44.862386+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:40:44.862480+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:40:44.877990+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:40:44.881437+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:40:44.881551+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:40:44.881602+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:40:44.881656+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:40:44.882566+00:00] request.INFO: Matched route "newsletters_list". {"route":"newsletters_list","route_parameters":{"_route":"newsletters_list","_controller":"App\\Controller\\NewslettersController::list"},"request_uri":"http://localhost:8001/newsletters/list","method":"GET"} []
[2024-01-10T13:40:44.885343+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:40:44.886214+00:00] doctrine.DEBUG: Executing query: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0"} []
[2024-01-10T13:40:44.888085+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:40:44.888797+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:40:44.890311+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:40:44.890387+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:40:44.890436+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:40:44.890490+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:40:44.890543+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:40:44.890596+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:40:44.891004+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:40:44.891092+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:40:44.891185+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:40:44.891256+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:40:44.891567+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:40:44.891895+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:40:44.892158+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:40:44.893591+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:40:44.893795+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:40:44.894924+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:40:44.895205+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:40:44.896216+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:40:44.896514+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:40:44.897717+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:40:44.899647+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:40:44.899958+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:40:44.901588+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:40:44.902603+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:40:44.918177+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:40:44.918312+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:40:44.941254+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:40:44.963151+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:40:44.963339+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:40:44.963415+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:40:44.963480+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:40:44.965445+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"b3a060"},"request_uri":"http://localhost:8001/_wdt/b3a060","method":"GET"} []
[2024-01-10T13:40:44.967690+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:40:44.967819+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:40:44.967906+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:40:44.967986+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:40:44.968062+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:40:44.968137+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:40:44.969648+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:40:44.969789+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:40:44.969901+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:40:44.969971+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:40:45.757692+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:40:45.758552+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:40:45","2":"2024-01-10 13:40:45","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:40:45","2":"2024-01-10 13:40:45","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:40:45.760191+00:00] doctrine.DEBUG: Executing statement: UPDATE messenger_messages SET delivered_at = ? WHERE id = ? (parameters: array{"1":"2024-01-10 13:40:45","2":14}, types: array{"1":2,"2":2}) {"sql":"UPDATE messenger_messages SET delivered_at = ? WHERE id = ?","params":{"1":"2024-01-10 13:40:45","2":14},"types":{"1":2,"2":2}} []
[2024-01-10T13:40:45.761482+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:40:45.782510+00:00] messenger.INFO: Received message App\Message\SendNewsletterMessage {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage"} []
[2024-01-10T13:40:45.871779+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:40:45.877989+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ? (parameters: array{"1":1}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ?","params":{"1":1},"types":{"1":1}} []
[2024-01-10T13:40:48.931568+00:00] app.DEBUG: Email transport "Symfony\Component\Mailer\Transport\Smtp\SmtpTransport" starting [] []
[2024-01-10T13:40:49.034286+00:00] app.DEBUG: Email transport "Symfony\Component\Mailer\Transport\Smtp\SmtpTransport" started [] []
[2024-01-10T13:40:49.090030+00:00] messenger.INFO: Message Symfony\Component\Mailer\Messenger\SendEmailMessage handled by Symfony\Component\Mailer\Messenger\MessageHandler::__invoke {"message":{"Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage":[]},"class":"Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage","handler":"Symfony\\Component\\Mailer\\Messenger\\MessageHandler::__invoke"} []
[2024-01-10T13:40:49.090548+00:00] messenger.INFO: Message App\Message\SendNewsletterMessage handled by App\MessageHandler\SendNewsletterMessageHandler::__invoke {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage","handler":"App\\MessageHandler\\SendNewsletterMessageHandler::__invoke"} []
[2024-01-10T13:40:49.092449+00:00] messenger.INFO: App\Message\SendNewsletterMessage was handled successfully (acknowledging to transport). {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage"} []
[2024-01-10T13:40:49.092862+00:00] doctrine.DEBUG: Executing statement: DELETE FROM messenger_messages WHERE id = ? (parameters: array{"1":"14"}, types: array{"1":2}) {"sql":"DELETE FROM messenger_messages WHERE id = ?","params":{"1":"14"},"types":{"1":2}} []
[2024-01-10T13:40:49.100540+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:40:49.102310+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:40:49","2":"2024-01-10 13:40:49","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:40:49","2":"2024-01-10 13:40:49","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:40:49.104797+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:40:50.106245+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:40:50.106748+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:40:50","2":"2024-01-10 13:40:50","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:40:50","2":"2024-01-10 13:40:50","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:40:50.107377+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:40:51.107861+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:40:51.108819+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:40:51","2":"2024-01-10 13:40:51","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:40:51","2":"2024-01-10 13:40:51","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:40:51.110278+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:40:52.111286+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:40:52.112676+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:40:52","2":"2024-01-10 13:40:52","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:40:52","2":"2024-01-10 13:40:52","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:40:52.115263+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:40:53.116832+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:40:53.118086+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:40:53","2":"2024-01-10 13:40:53","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:40:53","2":"2024-01-10 13:40:53","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:40:53.120058+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:40:54.121640+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:40:54.122561+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:40:54","2":"2024-01-10 13:40:54","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:40:54","2":"2024-01-10 13:40:54","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:40:54.123876+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:40:55.124860+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:40:55.125804+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:40:55","2":"2024-01-10 13:40:55","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:40:55","2":"2024-01-10 13:40:55","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:40:55.127575+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:40:56.129081+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:40:56.130617+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:40:56","2":"2024-01-10 13:40:56","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:40:56","2":"2024-01-10 13:40:56","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:40:56.133305+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:40:57.134568+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:40:57.136021+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:40:57","2":"2024-01-10 13:40:57","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:40:57","2":"2024-01-10 13:40:57","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:40:57.138347+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:40:58.139818+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:40:58.140623+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:40:58","2":"2024-01-10 13:40:58","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:40:58","2":"2024-01-10 13:40:58","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:40:58.141957+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:40:59.143103+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:40:59.143919+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:40:59","2":"2024-01-10 13:40:59","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:40:59","2":"2024-01-10 13:40:59","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:40:59.145172+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:41:00.146448+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:41:00.147281+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:41:00","2":"2024-01-10 13:41:00","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:41:00","2":"2024-01-10 13:41:00","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:41:00.148831+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:41:01.149834+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:41:01.151181+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:41:01","2":"2024-01-10 13:41:01","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:41:01","2":"2024-01-10 13:41:01","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:41:01.152876+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:41:02.154026+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:41:02.154839+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:41:02","2":"2024-01-10 13:41:02","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:41:02","2":"2024-01-10 13:41:02","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:41:02.156257+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:41:03.157434+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:41:03.158355+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:41:03","2":"2024-01-10 13:41:03","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:41:03","2":"2024-01-10 13:41:03","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:41:03.159657+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:41:04.160846+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:41:04.161817+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:41:04","2":"2024-01-10 13:41:04","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:41:04","2":"2024-01-10 13:41:04","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:41:04.163318+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:41:05.164598+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:41:05.165965+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:41:05","2":"2024-01-10 13:41:05","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:41:05","2":"2024-01-10 13:41:05","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:41:05.167598+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:41:06.168972+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:41:06.170202+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:41:06","2":"2024-01-10 13:41:06","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:41:06","2":"2024-01-10 13:41:06","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:41:06.172023+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:41:07.173313+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:41:07.174273+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:41:07","2":"2024-01-10 13:41:07","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:41:07","2":"2024-01-10 13:41:07","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:41:07.175522+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:41:08.176980+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:41:08.178510+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:41:08","2":"2024-01-10 13:41:08","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:41:08","2":"2024-01-10 13:41:08","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:41:08.179946+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:41:09.181083+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:41:09.182175+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:41:09","2":"2024-01-10 13:41:09","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:41:09","2":"2024-01-10 13:41:09","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:41:09.183751+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:41:10.184882+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:41:10.186012+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:41:10","2":"2024-01-10 13:41:10","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:41:10","2":"2024-01-10 13:41:10","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:41:10.187706+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:41:11.189508+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:41:11.190781+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:41:11","2":"2024-01-10 13:41:11","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:41:11","2":"2024-01-10 13:41:11","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:41:11.192691+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:41:12.194234+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:41:12.195561+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:41:12","2":"2024-01-10 13:41:12","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:41:12","2":"2024-01-10 13:41:12","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:41:12.197599+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:41:13.199101+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:41:13.200946+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:41:13","2":"2024-01-10 13:41:13","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:41:13","2":"2024-01-10 13:41:13","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:41:13.203601+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:41:14.205527+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:41:14.207102+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:41:14","2":"2024-01-10 13:41:14","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:41:14","2":"2024-01-10 13:41:14","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:41:14.209824+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:41:15.211489+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:41:15.212763+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:41:15","2":"2024-01-10 13:41:15","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:41:15","2":"2024-01-10 13:41:15","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:41:15.215193+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:41:16.217284+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:41:16.218402+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:41:16","2":"2024-01-10 13:41:16","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:41:16","2":"2024-01-10 13:41:16","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:41:16.220484+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:41:17.222094+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:41:17.223080+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:41:17","2":"2024-01-10 13:41:17","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:41:17","2":"2024-01-10 13:41:17","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:41:17.224750+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:41:18.226026+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:41:18.227161+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:41:18","2":"2024-01-10 13:41:18","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:41:18","2":"2024-01-10 13:41:18","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:41:18.228826+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:41:19.230035+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:41:19.231354+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:41:19","2":"2024-01-10 13:41:19","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:41:19","2":"2024-01-10 13:41:19","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:41:19.233452+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:41:20.235027+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:41:20.236331+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:41:20","2":"2024-01-10 13:41:20","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:41:20","2":"2024-01-10 13:41:20","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:41:20.238276+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:41:21.239613+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:41:21.240813+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:41:21","2":"2024-01-10 13:41:21","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:41:21","2":"2024-01-10 13:41:21","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:41:21.242601+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:41:22.243880+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:41:22.245171+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:41:22","2":"2024-01-10 13:41:22","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:41:22","2":"2024-01-10 13:41:22","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:41:22.247093+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:41:23.248893+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:41:23.250224+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:41:23","2":"2024-01-10 13:41:23","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:41:23","2":"2024-01-10 13:41:23","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:41:23.252119+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:41:23.787894+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:41:23.788334+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:41:23.788553+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:41:23.788708+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:41:23.791003+00:00] request.INFO: Matched route "newsletters_unsubscribe". {"route":"newsletters_unsubscribe","route_parameters":{"_route":"newsletters_unsubscribe","_controller":"App\\Controller\\NewslettersController::unsubscribe","id":"2","newsletter":"1","token":"a54261a9980eeb979d2344eb219f60971c062cc84085865b77949498b4dfc427"},"request_uri":"http://localhost:8001/newsletters/unsubscribe/2/1/a54261a9980eeb979d2344eb219f60971c062cc84085865b77949498b4dfc427","method":"GET"} []
[2024-01-10T13:41:23.800598+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:41:23.802253+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 WHERE t0.id = ? (parameters: array{"1":"2"}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 WHERE t0.id = ?","params":{"1":"2"},"types":{"1":1}} []
[2024-01-10T13:41:23.804674+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ? (parameters: array{"1":"1"}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ?","params":{"1":"1"},"types":{"1":1}} []
[2024-01-10T13:41:23.807904+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 INNER JOIN users_categories ON t0.id = users_categories.categories_id WHERE users_categories.users_id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 INNER JOIN users_categories ON t0.id = users_categories.categories_id WHERE users_categories.users_id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:41:23.809242+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:41:23.817332+00:00] doctrine.DEBUG: Executing statement: DELETE FROM users_categories WHERE users_id = ? AND categories_id = ? (parameters: array{"1":2,"2":2}, types: array{"1":1,"2":1}) {"sql":"DELETE FROM users_categories WHERE users_id = ? AND categories_id = ?","params":{"1":2,"2":2},"types":{"1":1,"2":1}} []
[2024-01-10T13:41:23.818235+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:41:23.822840+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:41:23.823006+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:41:23.823215+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:41:23.823316+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:41:23.826814+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:41:23.826971+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:41:23.827110+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:41:23.827232+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:41:23.827342+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:41:23.827474+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:41:23.829999+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:41:23.831224+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:41:23.831768+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:41:23.834443+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:41:23.834926+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:41:23.837867+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:41:23.838314+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:41:23.840450+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:41:23.840897+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:41:23.843228+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:41:23.847319+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:41:23.847895+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:41:23.851131+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:41:23.853110+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:41:23.875955+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:41:23.876146+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:41:23.897820+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:41:23.902855+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:41:23.903010+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:41:23.903076+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:41:23.903137+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:41:23.903747+00:00] request.INFO: Matched route "app_home". {"route":"app_home","route_parameters":{"_route":"app_home","_controller":"App\\Controller\\MainController::index"},"request_uri":"http://localhost:8001/","method":"GET"} []
[2024-01-10T13:41:23.906695+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:41:23.906837+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:41:23.906984+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:41:23.907081+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:41:23.907971+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:41:23.908078+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:41:23.908170+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:41:23.908262+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:41:23.908333+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:41:23.908454+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:41:23.909488+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:41:23.910181+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:41:23.910868+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:41:23.911121+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:41:23.912500+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:41:23.912747+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:41:23.914476+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:41:23.914774+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:41:23.916281+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:41:23.916506+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:41:23.918022+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:41:23.921077+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:41:23.921312+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:41:23.922438+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:41:23.923219+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:41:23.939886+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:41:23.939987+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:41:23.962758+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:41:23.967063+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:41:23.967215+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:41:23.967274+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:41:23.967327+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:41:23.967832+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"f49684"},"request_uri":"http://localhost:8001/_wdt/f49684","method":"GET"} []
[2024-01-10T13:41:23.968967+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:41:23.969108+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:41:23.969201+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:41:23.969296+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:41:23.969372+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:41:23.969446+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:41:23.970776+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:41:23.970882+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:41:23.970969+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:41:23.971047+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:41:24.253588+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:41:24.254916+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:41:24","2":"2024-01-10 13:41:24","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:41:24","2":"2024-01-10 13:41:24","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:41:24.256910+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:41:25.258321+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:41:25.259746+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:41:25","2":"2024-01-10 13:41:25","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:41:25","2":"2024-01-10 13:41:25","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:41:25.261938+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:41:26.263428+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:41:26.264821+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:41:26","2":"2024-01-10 13:41:26","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:41:26","2":"2024-01-10 13:41:26","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:41:26.267770+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:41:27.269587+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:41:27.270856+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:41:27","2":"2024-01-10 13:41:27","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:41:27","2":"2024-01-10 13:41:27","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:41:27.272979+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:41:28.274302+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:41:28.275546+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:41:28","2":"2024-01-10 13:41:28","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:41:28","2":"2024-01-10 13:41:28","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:41:28.277100+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:41:29.278300+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:41:29.279304+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:41:29","2":"2024-01-10 13:41:29","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:41:29","2":"2024-01-10 13:41:29","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:41:29.280947+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:41:30.282242+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:41:30.283232+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:41:30","2":"2024-01-10 13:41:30","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:41:30","2":"2024-01-10 13:41:30","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:41:30.284689+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:41:31.285889+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:41:31.287448+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:41:31","2":"2024-01-10 13:41:31","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:41:31","2":"2024-01-10 13:41:31","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:41:31.290420+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:41:32.293354+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:41:32.294951+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:41:32","2":"2024-01-10 13:41:32","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:41:32","2":"2024-01-10 13:41:32","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:41:32.297460+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:41:33.299141+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:41:33.299568+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:41:33","2":"2024-01-10 13:41:33","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:41:33","2":"2024-01-10 13:41:33","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:41:33.300134+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:41:34.300633+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:41:34.301462+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:41:34","2":"2024-01-10 13:41:34","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:41:34","2":"2024-01-10 13:41:34","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:41:34.302682+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:41:35.303640+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:41:35.304615+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:41:35","2":"2024-01-10 13:41:35","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:41:35","2":"2024-01-10 13:41:35","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:41:35.306178+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:41:36.307280+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:41:36.308501+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:41:36","2":"2024-01-10 13:41:36","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:41:36","2":"2024-01-10 13:41:36","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:41:36.310510+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:41:37.312290+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:41:37.313817+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:41:37","2":"2024-01-10 13:41:37","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:41:37","2":"2024-01-10 13:41:37","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:41:37.315851+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:41:38.317188+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:41:38.318008+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:41:38","2":"2024-01-10 13:41:38","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:41:38","2":"2024-01-10 13:41:38","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:41:38.319322+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:41:39.320313+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:41:39.320791+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:41:39","2":"2024-01-10 13:41:39","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:41:39","2":"2024-01-10 13:41:39","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:41:39.321527+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:41:40.322073+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:41:40.322618+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:41:40","2":"2024-01-10 13:41:40","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:41:40","2":"2024-01-10 13:41:40","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:41:40.323574+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:41:41.324314+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:41:41.325722+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:41:41","2":"2024-01-10 13:41:41","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:41:41","2":"2024-01-10 13:41:41","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:41:41.327806+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:41:42.329390+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:41:42.330474+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:41:42","2":"2024-01-10 13:41:42","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:41:42","2":"2024-01-10 13:41:42","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:41:42.332082+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:41:43.333348+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:41:43.333651+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:41:43","2":"2024-01-10 13:41:43","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:41:43","2":"2024-01-10 13:41:43","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:41:43.334084+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:41:44.334564+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:41:44.335562+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:41:44","2":"2024-01-10 13:41:44","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:41:44","2":"2024-01-10 13:41:44","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:41:44.337134+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:41:45.338397+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:41:45.339622+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:41:45","2":"2024-01-10 13:41:45","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:41:45","2":"2024-01-10 13:41:45","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:41:45.341970+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:41:46.343953+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:41:46.345479+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:41:46","2":"2024-01-10 13:41:46","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:41:46","2":"2024-01-10 13:41:46","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:41:46.347095+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:41:47.348477+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:41:47.349775+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:41:47","2":"2024-01-10 13:41:47","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:41:47","2":"2024-01-10 13:41:47","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:41:47.351558+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:41:48.352916+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:41:48.354178+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:41:48","2":"2024-01-10 13:41:48","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:41:48","2":"2024-01-10 13:41:48","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:41:48.355933+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:41:49.357401+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:41:49.358379+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:41:49","2":"2024-01-10 13:41:49","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:41:49","2":"2024-01-10 13:41:49","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:41:49.359838+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:41:50.360990+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:41:50.362331+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:41:50","2":"2024-01-10 13:41:50","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:41:50","2":"2024-01-10 13:41:50","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:41:50.365041+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:41:51.366404+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:41:51.366881+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:41:51","2":"2024-01-10 13:41:51","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:41:51","2":"2024-01-10 13:41:51","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:41:51.367657+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:41:52.368406+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:41:52.369357+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:41:52","2":"2024-01-10 13:41:52","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:41:52","2":"2024-01-10 13:41:52","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:41:52.371377+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:41:53.372816+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:41:53.374231+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:41:53","2":"2024-01-10 13:41:53","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:41:53","2":"2024-01-10 13:41:53","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:41:53.376157+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:41:54.377906+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:41:54.378894+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:41:54","2":"2024-01-10 13:41:54","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:41:54","2":"2024-01-10 13:41:54","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:41:54.380321+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:41:55.381603+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:41:55.382783+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:41:55","2":"2024-01-10 13:41:55","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:41:55","2":"2024-01-10 13:41:55","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:41:55.384640+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:41:56.386460+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:41:56.387536+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:41:56","2":"2024-01-10 13:41:56","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:41:56","2":"2024-01-10 13:41:56","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:41:56.389421+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:41:57.390574+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:41:57.391892+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:41:57","2":"2024-01-10 13:41:57","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:41:57","2":"2024-01-10 13:41:57","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:41:57.393778+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:41:58.395327+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:41:58.397046+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:41:58","2":"2024-01-10 13:41:58","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:41:58","2":"2024-01-10 13:41:58","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:41:58.398551+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:41:59.399382+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:41:59.401031+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:41:59","2":"2024-01-10 13:41:59","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:41:59","2":"2024-01-10 13:41:59","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:41:59.403547+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:42:00.405322+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:42:00.406352+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:42:00","2":"2024-01-10 13:42:00","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:42:00","2":"2024-01-10 13:42:00","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:42:00.407922+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:42:01.409089+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:42:01.410021+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:42:01","2":"2024-01-10 13:42:01","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:42:01","2":"2024-01-10 13:42:01","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:42:01.411623+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:42:02.412687+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:42:02.413302+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:42:02","2":"2024-01-10 13:42:02","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:42:02","2":"2024-01-10 13:42:02","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:42:02.414132+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:42:03.414855+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:42:03.416604+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:42:03","2":"2024-01-10 13:42:03","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:42:03","2":"2024-01-10 13:42:03","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:42:03.418493+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:42:04.419756+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:42:04.420131+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:42:04","2":"2024-01-10 13:42:04","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:42:04","2":"2024-01-10 13:42:04","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:42:04.420741+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:42:05.421384+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:42:05.424740+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:42:05","2":"2024-01-10 13:42:05","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:42:05","2":"2024-01-10 13:42:05","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:42:05.429387+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:42:06.432132+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:42:06.433212+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:42:06","2":"2024-01-10 13:42:06","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:42:06","2":"2024-01-10 13:42:06","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:42:06.434865+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:42:07.436170+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:42:07.437293+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:42:07","2":"2024-01-10 13:42:07","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:42:07","2":"2024-01-10 13:42:07","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:42:07.439194+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:42:08.440635+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:42:08.441734+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:42:08","2":"2024-01-10 13:42:08","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:42:08","2":"2024-01-10 13:42:08","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:42:08.443392+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:42:09.444317+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:42:09.445116+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:42:09","2":"2024-01-10 13:42:09","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:42:09","2":"2024-01-10 13:42:09","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:42:09.446716+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:42:10.447889+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:42:10.449239+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:42:10","2":"2024-01-10 13:42:10","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:42:10","2":"2024-01-10 13:42:10","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:42:10.451210+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:42:11.452618+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:42:11.453688+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:42:11","2":"2024-01-10 13:42:11","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:42:11","2":"2024-01-10 13:42:11","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:42:11.455557+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:42:12.457082+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:42:12.458243+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:42:12","2":"2024-01-10 13:42:12","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:42:12","2":"2024-01-10 13:42:12","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:42:12.460088+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:42:13.461483+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:42:13.462012+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:42:13","2":"2024-01-10 13:42:13","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:42:13","2":"2024-01-10 13:42:13","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:42:13.462613+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:42:14.463112+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:42:14.464457+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:42:14","2":"2024-01-10 13:42:14","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:42:14","2":"2024-01-10 13:42:14","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:42:14.466177+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:42:15.467630+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:42:15.469037+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:42:15","2":"2024-01-10 13:42:15","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:42:15","2":"2024-01-10 13:42:15","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:42:15.471250+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:42:16.472853+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:42:16.473957+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:42:16","2":"2024-01-10 13:42:16","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:42:16","2":"2024-01-10 13:42:16","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:42:16.475614+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:42:17.477303+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:42:17.478822+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:42:17","2":"2024-01-10 13:42:17","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:42:17","2":"2024-01-10 13:42:17","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:42:17.480701+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:42:18.481934+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:42:18.482795+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:42:18","2":"2024-01-10 13:42:18","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:42:18","2":"2024-01-10 13:42:18","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:42:18.483916+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:42:19.485104+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:42:19.485436+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:42:19","2":"2024-01-10 13:42:19","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:42:19","2":"2024-01-10 13:42:19","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:42:19.485900+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:42:20.486356+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:42:20.487350+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:42:20","2":"2024-01-10 13:42:20","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:42:20","2":"2024-01-10 13:42:20","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:42:20.489231+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:42:21.490662+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:42:21.491583+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:42:21","2":"2024-01-10 13:42:21","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:42:21","2":"2024-01-10 13:42:21","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:42:21.493155+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:42:22.494430+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:42:22.495683+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:42:22","2":"2024-01-10 13:42:22","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:42:22","2":"2024-01-10 13:42:22","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:42:22.497894+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:42:23.499429+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:42:23.499960+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:42:23","2":"2024-01-10 13:42:23","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:42:23","2":"2024-01-10 13:42:23","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:42:23.500676+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:42:24.501238+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:42:24.501567+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:42:24","2":"2024-01-10 13:42:24","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:42:24","2":"2024-01-10 13:42:24","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:42:24.502047+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:42:25.502471+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:42:25.503353+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:42:25","2":"2024-01-10 13:42:25","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:42:25","2":"2024-01-10 13:42:25","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:42:25.504810+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:42:26.505699+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:42:26.507223+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:42:26","2":"2024-01-10 13:42:26","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:42:26","2":"2024-01-10 13:42:26","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:42:26.509416+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:42:27.510835+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:42:27.512020+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:42:27","2":"2024-01-10 13:42:27","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:42:27","2":"2024-01-10 13:42:27","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:42:27.513920+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:42:28.515061+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:42:28.516276+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:42:28","2":"2024-01-10 13:42:28","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:42:28","2":"2024-01-10 13:42:28","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:42:28.518585+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:42:29.520655+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:42:29.521094+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:42:29","2":"2024-01-10 13:42:29","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:42:29","2":"2024-01-10 13:42:29","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:42:29.521705+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:42:30.522306+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:42:30.523952+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:42:30","2":"2024-01-10 13:42:30","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:42:30","2":"2024-01-10 13:42:30","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:42:30.527528+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:42:31.530353+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:42:31.531676+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:42:31","2":"2024-01-10 13:42:31","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:42:31","2":"2024-01-10 13:42:31","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:42:31.533710+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:42:32.535129+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:42:32.535425+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:42:32","2":"2024-01-10 13:42:32","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:42:32","2":"2024-01-10 13:42:32","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:42:32.536021+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:42:33.536572+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:42:33.537923+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:42:33","2":"2024-01-10 13:42:33","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:42:33","2":"2024-01-10 13:42:33","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:42:33.539644+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:42:34.540830+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:42:34.541360+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:42:34","2":"2024-01-10 13:42:34","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:42:34","2":"2024-01-10 13:42:34","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:42:34.541977+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:42:35.542525+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:42:35.543085+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:42:35","2":"2024-01-10 13:42:35","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:42:35","2":"2024-01-10 13:42:35","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:42:35.544284+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:42:36.545334+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:42:36.546327+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:42:36","2":"2024-01-10 13:42:36","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:42:36","2":"2024-01-10 13:42:36","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:42:36.547539+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:42:37.548525+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:42:37.549403+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:42:37","2":"2024-01-10 13:42:37","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:42:37","2":"2024-01-10 13:42:37","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:42:37.550654+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:42:38.552133+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:42:38.553461+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:42:38","2":"2024-01-10 13:42:38","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:42:38","2":"2024-01-10 13:42:38","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:42:38.555212+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:42:39.556507+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:42:39.557292+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:42:39","2":"2024-01-10 13:42:39","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:42:39","2":"2024-01-10 13:42:39","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:42:39.558540+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:42:40.559542+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:42:40.560751+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:42:40","2":"2024-01-10 13:42:40","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:42:40","2":"2024-01-10 13:42:40","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:42:40.562927+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:42:41.564397+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:42:41.565658+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:42:41","2":"2024-01-10 13:42:41","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:42:41","2":"2024-01-10 13:42:41","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:42:41.567546+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:42:42.569069+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:42:42.570122+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:42:42","2":"2024-01-10 13:42:42","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:42:42","2":"2024-01-10 13:42:42","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:42:42.571722+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:42:43.572856+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:42:43.573535+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:42:43","2":"2024-01-10 13:42:43","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:42:43","2":"2024-01-10 13:42:43","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:42:43.574844+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:42:44.575652+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:42:44.576901+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:42:44","2":"2024-01-10 13:42:44","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:42:44","2":"2024-01-10 13:42:44","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:42:44.578705+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:42:45.579901+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:42:45.580710+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:42:45","2":"2024-01-10 13:42:45","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:42:45","2":"2024-01-10 13:42:45","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:42:45.581870+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:42:46.582645+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:42:46.583187+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:42:46","2":"2024-01-10 13:42:46","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:42:46","2":"2024-01-10 13:42:46","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:42:46.584140+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:42:47.584938+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:42:47.586352+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:42:47","2":"2024-01-10 13:42:47","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:42:47","2":"2024-01-10 13:42:47","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:42:47.588260+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:42:48.589906+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:42:48.591391+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:42:48","2":"2024-01-10 13:42:48","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:42:48","2":"2024-01-10 13:42:48","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:42:48.593446+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:42:49.595225+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:42:49.596311+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:42:49","2":"2024-01-10 13:42:49","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:42:49","2":"2024-01-10 13:42:49","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:42:49.597954+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:42:50.599244+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:42:50.600830+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:42:50","2":"2024-01-10 13:42:50","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:42:50","2":"2024-01-10 13:42:50","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:42:50.602306+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:42:51.603376+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:42:51.604197+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:42:51","2":"2024-01-10 13:42:51","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:42:51","2":"2024-01-10 13:42:51","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:42:51.605594+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:42:52.606532+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:42:52.607446+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:42:52","2":"2024-01-10 13:42:52","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:42:52","2":"2024-01-10 13:42:52","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:42:52.608991+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:42:53.609989+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:42:53.610362+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:42:53","2":"2024-01-10 13:42:53","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:42:53","2":"2024-01-10 13:42:53","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:42:53.611019+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:42:54.611569+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:42:54.612668+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:42:54","2":"2024-01-10 13:42:54","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:42:54","2":"2024-01-10 13:42:54","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:42:54.614613+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:42:55.615732+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:42:55.616851+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:42:55","2":"2024-01-10 13:42:55","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:42:55","2":"2024-01-10 13:42:55","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:42:55.618510+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:42:56.619922+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:42:56.621166+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:42:56","2":"2024-01-10 13:42:56","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:42:56","2":"2024-01-10 13:42:56","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:42:56.622687+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:42:57.624028+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:42:57.625138+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:42:57","2":"2024-01-10 13:42:57","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:42:57","2":"2024-01-10 13:42:57","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:42:57.626635+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:42:58.628135+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:42:58.629498+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:42:58","2":"2024-01-10 13:42:58","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:42:58","2":"2024-01-10 13:42:58","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:42:58.631657+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:42:59.632949+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:42:59.633976+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:42:59","2":"2024-01-10 13:42:59","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:42:59","2":"2024-01-10 13:42:59","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:42:59.635791+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:43:00.637231+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:43:00.638275+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:43:00","2":"2024-01-10 13:43:00","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:43:00","2":"2024-01-10 13:43:00","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:43:00.639916+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:43:01.641190+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:43:01.641566+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:43:01","2":"2024-01-10 13:43:01","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:43:01","2":"2024-01-10 13:43:01","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:43:01.642097+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:43:02.642805+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:43:02.646038+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:43:02","2":"2024-01-10 13:43:02","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:43:02","2":"2024-01-10 13:43:02","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:43:02.648540+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:43:03.650226+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:43:03.651554+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:43:03","2":"2024-01-10 13:43:03","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:43:03","2":"2024-01-10 13:43:03","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:43:03.653596+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:43:04.655104+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:43:04.656479+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:43:04","2":"2024-01-10 13:43:04","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:43:04","2":"2024-01-10 13:43:04","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:43:04.658134+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:43:05.659317+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:43:05.660190+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:43:05","2":"2024-01-10 13:43:05","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:43:05","2":"2024-01-10 13:43:05","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:43:05.661524+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:43:06.662554+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:43:06.664065+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:43:06","2":"2024-01-10 13:43:06","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:43:06","2":"2024-01-10 13:43:06","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:43:06.666308+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:43:07.667880+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:43:07.669428+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:43:07","2":"2024-01-10 13:43:07","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:43:07","2":"2024-01-10 13:43:07","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:43:07.671786+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:43:08.673796+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:43:08.675238+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:43:08","2":"2024-01-10 13:43:08","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:43:08","2":"2024-01-10 13:43:08","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:43:08.677387+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:43:09.678754+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:43:09.679538+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:43:09","2":"2024-01-10 13:43:09","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:43:09","2":"2024-01-10 13:43:09","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:43:09.680725+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:43:10.682134+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:43:10.683472+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:43:10","2":"2024-01-10 13:43:10","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:43:10","2":"2024-01-10 13:43:10","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:43:10.685494+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:43:11.687166+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:43:11.688997+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:43:11","2":"2024-01-10 13:43:11","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:43:11","2":"2024-01-10 13:43:11","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:43:11.691514+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:43:12.692939+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:43:12.694302+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:43:12","2":"2024-01-10 13:43:12","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:43:12","2":"2024-01-10 13:43:12","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:43:12.696615+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:43:13.697934+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:43:13.699259+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:43:13","2":"2024-01-10 13:43:13","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:43:13","2":"2024-01-10 13:43:13","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:43:13.701196+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:43:14.702633+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:43:14.703940+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:43:14","2":"2024-01-10 13:43:14","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:43:14","2":"2024-01-10 13:43:14","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:43:14.706083+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:43:15.707594+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:43:15.708953+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:43:15","2":"2024-01-10 13:43:15","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:43:15","2":"2024-01-10 13:43:15","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:43:15.711010+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:43:16.712352+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:43:16.713799+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:43:16","2":"2024-01-10 13:43:16","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:43:16","2":"2024-01-10 13:43:16","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:43:16.715797+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:43:17.717194+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:43:17.718834+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:43:17","2":"2024-01-10 13:43:17","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:43:17","2":"2024-01-10 13:43:17","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:43:17.721420+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:43:18.723755+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:43:18.725115+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:43:18","2":"2024-01-10 13:43:18","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:43:18","2":"2024-01-10 13:43:18","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:43:18.726974+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:43:19.728182+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:43:19.728986+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:43:19","2":"2024-01-10 13:43:19","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:43:19","2":"2024-01-10 13:43:19","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:43:19.730294+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:43:20.731478+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:43:20.733872+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:43:20","2":"2024-01-10 13:43:20","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:43:20","2":"2024-01-10 13:43:20","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:43:20.736128+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:43:21.737914+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:43:21.739518+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:43:21","2":"2024-01-10 13:43:21","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:43:21","2":"2024-01-10 13:43:21","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:43:21.741450+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:43:22.743214+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:43:22.744672+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:43:22","2":"2024-01-10 13:43:22","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:43:22","2":"2024-01-10 13:43:22","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:43:22.746512+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:43:23.747819+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:43:23.748932+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:43:23","2":"2024-01-10 13:43:23","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:43:23","2":"2024-01-10 13:43:23","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:43:23.750596+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:43:24.751778+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:43:24.752816+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:43:24","2":"2024-01-10 13:43:24","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:43:24","2":"2024-01-10 13:43:24","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:43:24.754482+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:43:25.755704+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:43:25.756839+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:43:25","2":"2024-01-10 13:43:25","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:43:25","2":"2024-01-10 13:43:25","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:43:25.758789+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:43:26.760216+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:43:26.760786+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:43:26","2":"2024-01-10 13:43:26","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:43:26","2":"2024-01-10 13:43:26","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:43:26.761373+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:43:27.761938+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:43:27.762721+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:43:27","2":"2024-01-10 13:43:27","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:43:27","2":"2024-01-10 13:43:27","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:43:27.764009+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:43:28.765057+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:43:28.766413+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:43:28","2":"2024-01-10 13:43:28","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:43:28","2":"2024-01-10 13:43:28","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:43:28.768035+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:43:29.769810+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:43:29.770922+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:43:29","2":"2024-01-10 13:43:29","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:43:29","2":"2024-01-10 13:43:29","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:43:29.772500+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:43:30.773812+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:43:30.774851+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:43:30","2":"2024-01-10 13:43:30","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:43:30","2":"2024-01-10 13:43:30","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:43:30.776617+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:43:31.778147+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:43:31.779255+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:43:31","2":"2024-01-10 13:43:31","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:43:31","2":"2024-01-10 13:43:31","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:43:31.781145+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:43:32.782759+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:43:32.784166+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:43:32","2":"2024-01-10 13:43:32","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:43:32","2":"2024-01-10 13:43:32","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:43:32.787040+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:43:33.789117+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:43:33.790675+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:43:33","2":"2024-01-10 13:43:33","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:43:33","2":"2024-01-10 13:43:33","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:43:33.792832+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:43:34.794305+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:43:34.795179+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:43:34","2":"2024-01-10 13:43:34","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:43:34","2":"2024-01-10 13:43:34","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:43:34.796409+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:43:35.797233+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:43:35.799015+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:43:35","2":"2024-01-10 13:43:35","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:43:35","2":"2024-01-10 13:43:35","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:43:35.802349+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:43:36.803897+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:43:36.806104+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:43:36","2":"2024-01-10 13:43:36","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:43:36","2":"2024-01-10 13:43:36","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:43:36.807894+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:43:37.809467+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:43:37.810708+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:43:37","2":"2024-01-10 13:43:37","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:43:37","2":"2024-01-10 13:43:37","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:43:37.812598+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:43:38.813924+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:43:38.815081+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:43:38","2":"2024-01-10 13:43:38","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:43:38","2":"2024-01-10 13:43:38","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:43:38.817395+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:43:39.818816+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:43:39.819218+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:43:39","2":"2024-01-10 13:43:39","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:43:39","2":"2024-01-10 13:43:39","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:43:39.819903+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:43:40.820485+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:43:40.822130+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:43:40","2":"2024-01-10 13:43:40","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:43:40","2":"2024-01-10 13:43:40","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:43:40.823554+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:43:41.824717+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:43:41.826117+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:43:41","2":"2024-01-10 13:43:41","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:43:41","2":"2024-01-10 13:43:41","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:43:41.828062+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:43:42.829459+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:43:42.830982+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:43:42","2":"2024-01-10 13:43:42","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:43:42","2":"2024-01-10 13:43:42","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:43:42.833008+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:43:43.834387+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:43:43.835553+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:43:43","2":"2024-01-10 13:43:43","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:43:43","2":"2024-01-10 13:43:43","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:43:43.837370+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:43:44.838532+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:43:44.838950+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:43:44","2":"2024-01-10 13:43:44","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:43:44","2":"2024-01-10 13:43:44","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:43:44.839600+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:43:45.840218+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:43:45.841388+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:43:45","2":"2024-01-10 13:43:45","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:43:45","2":"2024-01-10 13:43:45","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:43:45.843656+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:43:46.845231+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:43:46.846852+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:43:46","2":"2024-01-10 13:43:46","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:43:46","2":"2024-01-10 13:43:46","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:43:46.849598+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:43:47.851659+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:43:47.852448+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:43:47","2":"2024-01-10 13:43:47","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:43:47","2":"2024-01-10 13:43:47","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:43:47.853115+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:43:48.853838+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:43:48.854936+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:43:48","2":"2024-01-10 13:43:48","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:43:48","2":"2024-01-10 13:43:48","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:43:48.856147+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:43:49.856868+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:43:49.857810+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:43:49","2":"2024-01-10 13:43:49","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:43:49","2":"2024-01-10 13:43:49","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:43:49.859044+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:43:50.859996+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:43:50.860988+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:43:50","2":"2024-01-10 13:43:50","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:43:50","2":"2024-01-10 13:43:50","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:43:50.862185+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:43:51.863245+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:43:51.863660+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:43:51","2":"2024-01-10 13:43:51","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:43:51","2":"2024-01-10 13:43:51","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:43:51.864295+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:43:52.864909+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:43:52.865871+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:43:52","2":"2024-01-10 13:43:52","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:43:52","2":"2024-01-10 13:43:52","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:43:52.867348+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:43:53.868597+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:43:53.869564+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:43:53","2":"2024-01-10 13:43:53","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:43:53","2":"2024-01-10 13:43:53","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:43:53.872156+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:43:54.873853+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:43:54.875230+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:43:54","2":"2024-01-10 13:43:54","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:43:54","2":"2024-01-10 13:43:54","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:43:54.877263+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:43:55.878513+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:43:55.879154+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:43:55","2":"2024-01-10 13:43:55","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:43:55","2":"2024-01-10 13:43:55","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:43:55.879855+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:43:56.880621+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:43:56.880967+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:43:56","2":"2024-01-10 13:43:56","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:43:56","2":"2024-01-10 13:43:56","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:43:56.881512+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:43:57.881897+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:43:57.882282+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:43:57","2":"2024-01-10 13:43:57","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:43:57","2":"2024-01-10 13:43:57","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:43:57.882782+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:43:58.883252+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:43:58.883719+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:43:58","2":"2024-01-10 13:43:58","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:43:58","2":"2024-01-10 13:43:58","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:43:58.884219+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:43:59.884644+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:43:59.885053+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:43:59","2":"2024-01-10 13:43:59","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:43:59","2":"2024-01-10 13:43:59","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:43:59.885727+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:44:00.886435+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:44:00.887226+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:44:00","2":"2024-01-10 13:44:00","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:44:00","2":"2024-01-10 13:44:00","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:44:00.888570+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:44:01.889515+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:44:01.890478+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:44:01","2":"2024-01-10 13:44:01","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:44:01","2":"2024-01-10 13:44:01","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:44:01.892069+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:44:02.893002+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:44:02.894196+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:44:02","2":"2024-01-10 13:44:02","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:44:02","2":"2024-01-10 13:44:02","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:44:02.896290+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:44:03.897905+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:44:03.898790+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:44:03","2":"2024-01-10 13:44:03","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:44:03","2":"2024-01-10 13:44:03","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:44:03.900047+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:44:04.901141+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:44:04.901974+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:44:04","2":"2024-01-10 13:44:04","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:44:04","2":"2024-01-10 13:44:04","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:44:04.903182+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:44:05.904192+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:44:05.905780+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:44:05","2":"2024-01-10 13:44:05","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:44:05","2":"2024-01-10 13:44:05","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:44:05.907777+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:44:06.909529+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:44:06.910762+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:44:06","2":"2024-01-10 13:44:06","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:44:06","2":"2024-01-10 13:44:06","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:44:06.912297+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:44:07.913537+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:44:07.914584+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:44:07","2":"2024-01-10 13:44:07","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:44:07","2":"2024-01-10 13:44:07","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:44:07.916080+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:44:08.917171+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:44:08.918121+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:44:08","2":"2024-01-10 13:44:08","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:44:08","2":"2024-01-10 13:44:08","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:44:08.919602+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:44:09.920825+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:44:09.922042+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:44:09","2":"2024-01-10 13:44:09","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:44:09","2":"2024-01-10 13:44:09","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:44:09.923758+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:44:10.925229+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:44:10.926687+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:44:10","2":"2024-01-10 13:44:10","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:44:10","2":"2024-01-10 13:44:10","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:44:10.929391+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:44:11.930926+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:44:11.931777+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:44:11","2":"2024-01-10 13:44:11","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:44:11","2":"2024-01-10 13:44:11","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:44:11.933237+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:44:12.934186+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:44:12.935290+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:44:12","2":"2024-01-10 13:44:12","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:44:12","2":"2024-01-10 13:44:12","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:44:12.936884+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:44:13.938029+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:44:13.939230+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:44:13","2":"2024-01-10 13:44:13","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:44:13","2":"2024-01-10 13:44:13","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:44:13.941204+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:44:14.942907+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:44:14.943952+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:44:14","2":"2024-01-10 13:44:14","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:44:14","2":"2024-01-10 13:44:14","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:44:14.945507+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:44:15.946723+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:44:15.948117+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:44:15","2":"2024-01-10 13:44:15","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:44:15","2":"2024-01-10 13:44:15","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:44:15.950143+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:44:16.951633+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:44:16.952923+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:44:16","2":"2024-01-10 13:44:16","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:44:16","2":"2024-01-10 13:44:16","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:44:16.954931+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:44:17.956519+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:44:17.957884+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:44:17","2":"2024-01-10 13:44:17","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:44:17","2":"2024-01-10 13:44:17","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:44:17.960165+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:44:18.962001+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:44:18.962997+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:44:18","2":"2024-01-10 13:44:18","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:44:18","2":"2024-01-10 13:44:18","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:44:18.964860+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:44:19.966292+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:44:19.967452+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:44:19","2":"2024-01-10 13:44:19","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:44:19","2":"2024-01-10 13:44:19","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:44:19.968975+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:44:20.970358+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:44:20.972222+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:44:20","2":"2024-01-10 13:44:20","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:44:20","2":"2024-01-10 13:44:20","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:44:20.974050+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:44:21.975329+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:44:21.976348+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:44:21","2":"2024-01-10 13:44:21","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:44:21","2":"2024-01-10 13:44:21","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:44:21.977990+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:44:22.979225+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:44:22.980898+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:44:22","2":"2024-01-10 13:44:22","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:44:22","2":"2024-01-10 13:44:22","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:44:22.982945+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:44:23.984137+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:44:23.985245+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:44:23","2":"2024-01-10 13:44:23","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:44:23","2":"2024-01-10 13:44:23","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:44:23.986916+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:44:24.988271+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:44:24.989757+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:44:24","2":"2024-01-10 13:44:24","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:44:24","2":"2024-01-10 13:44:24","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:44:24.992081+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:44:25.993468+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:44:25.994004+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:44:25","2":"2024-01-10 13:44:25","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:44:25","2":"2024-01-10 13:44:25","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:44:25.994649+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:44:26.995394+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:44:26.996609+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:44:26","2":"2024-01-10 13:44:26","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:44:26","2":"2024-01-10 13:44:26","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:44:26.998235+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:44:27.999541+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:44:28.000300+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:44:28","2":"2024-01-10 13:44:28","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:44:28","2":"2024-01-10 13:44:28","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:44:28.001700+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:44:29.002817+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:44:29.004057+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:44:29","2":"2024-01-10 13:44:29","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:44:29","2":"2024-01-10 13:44:29","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:44:29.005982+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:44:30.007394+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:44:30.008431+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:44:30","2":"2024-01-10 13:44:30","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:44:30","2":"2024-01-10 13:44:30","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:44:30.010096+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:44:31.011345+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:44:31.012558+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:44:31","2":"2024-01-10 13:44:31","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:44:31","2":"2024-01-10 13:44:31","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:44:31.014489+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:44:32.015935+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:44:32.017482+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:44:32","2":"2024-01-10 13:44:32","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:44:32","2":"2024-01-10 13:44:32","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:44:32.019433+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:44:32.754172+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:44:32.755016+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:44:32.755430+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:44:32.755692+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:44:32.758955+00:00] request.INFO: Matched route "newsletters_send". {"route":"newsletters_send","route_parameters":{"_route":"newsletters_send","_controller":"App\\Controller\\NewslettersController::send","id":"1"},"request_uri":"http://localhost:8001/newsletters/send/1","method":"GET"} []
[2024-01-10T13:44:32.775824+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:44:32.777998+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ? (parameters: array{"1":"1"}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ?","params":{"1":"1"},"types":{"1":1}} []
[2024-01-10T13:44:32.782272+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:44:32.784720+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:44:32.787223+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:44:32.787337+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:44:32.787414+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:44:32.787480+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:44:32.787541+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:44:32.787599+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:44:32.788835+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:44:32.788940+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:44:32.789069+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:44:32.789139+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:44:32.789609+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:44:32.790445+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:44:32.790886+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:44:32.792757+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:44:32.793110+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:44:32.795462+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:44:32.795725+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:44:32.797340+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:44:32.797690+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:44:32.799208+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:44:32.801979+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:44:32.802265+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:44:32.803542+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:44:32.804456+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:44:32.822429+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:44:32.822533+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:44:32.837009+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:44:32.840840+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:44:32.840979+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:44:32.841054+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:44:32.841114+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:44:32.841648+00:00] request.INFO: Matched route "newsletters_list". {"route":"newsletters_list","route_parameters":{"_route":"newsletters_list","_controller":"App\\Controller\\NewslettersController::list"},"request_uri":"http://localhost:8001/newsletters/list","method":"GET"} []
[2024-01-10T13:44:32.844938+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:44:32.845608+00:00] doctrine.DEBUG: Executing query: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0"} []
[2024-01-10T13:44:32.847578+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:44:32.848293+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:44:32.849601+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:44:32.849696+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:44:32.849764+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:44:32.849834+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:44:32.849900+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:44:32.849966+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:44:32.850531+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:44:32.850606+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:44:32.850680+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:44:32.850742+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:44:32.851055+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:44:32.851431+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:44:32.851664+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:44:32.852825+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:44:32.852999+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:44:32.854275+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:44:32.854451+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:44:32.855852+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:44:32.856060+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:44:32.857456+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:44:32.860095+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:44:32.860351+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:44:32.861775+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:44:32.862623+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:44:32.878448+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:44:32.878582+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:44:32.900347+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:44:32.927790+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:44:32.927996+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:44:32.928072+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:44:32.928122+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:44:32.929131+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"8e2101"},"request_uri":"http://localhost:8001/_wdt/8e2101","method":"GET"} []
[2024-01-10T13:44:32.930616+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:44:32.930760+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:44:32.930851+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:44:32.930945+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:44:32.931026+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:44:32.931092+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:44:32.932471+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:44:32.932597+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:44:32.932686+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:44:32.932769+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:44:33.020694+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:44:33.021732+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:44:33","2":"2024-01-10 13:44:33","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:44:33","2":"2024-01-10 13:44:33","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:44:33.023476+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:44:34.024896+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:44:34.025654+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:44:34","2":"2024-01-10 13:44:34","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:44:34","2":"2024-01-10 13:44:34","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:44:34.026846+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:44:35.027849+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:44:35.029498+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:44:35","2":"2024-01-10 13:44:35","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:44:35","2":"2024-01-10 13:44:35","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:44:35.031831+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:44:36.033672+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:44:36.034955+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:44:36","2":"2024-01-10 13:44:36","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:44:36","2":"2024-01-10 13:44:36","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:44:36.036789+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:44:37.037946+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:44:37.038878+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:44:37","2":"2024-01-10 13:44:37","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:44:37","2":"2024-01-10 13:44:37","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:44:37.040612+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:44:38.041937+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:44:38.042965+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:44:38","2":"2024-01-10 13:44:38","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:44:38","2":"2024-01-10 13:44:38","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:44:38.044545+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:44:39.045803+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:44:39.047254+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:44:39","2":"2024-01-10 13:44:39","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:44:39","2":"2024-01-10 13:44:39","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:44:39.049820+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:44:40.051235+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:44:40.051589+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:44:40","2":"2024-01-10 13:44:40","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:44:40","2":"2024-01-10 13:44:40","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:44:40.052201+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:44:41.052644+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:44:41.053689+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:44:41","2":"2024-01-10 13:44:41","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:44:41","2":"2024-01-10 13:44:41","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:44:41.055327+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:44:42.056352+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:44:42.057556+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:44:42","2":"2024-01-10 13:44:42","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:44:42","2":"2024-01-10 13:44:42","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:44:42.059281+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:44:43.060569+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:44:43.063667+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:44:43","2":"2024-01-10 13:44:43","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:44:43","2":"2024-01-10 13:44:43","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:44:43.067121+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:44:44.069799+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:44:44.071361+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:44:44","2":"2024-01-10 13:44:44","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:44:44","2":"2024-01-10 13:44:44","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:44:44.073074+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:44:44.392644+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:44:44.393459+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:44:44.393803+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:44:44.394166+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:44:44.397778+00:00] request.INFO: Matched route "newsletters_send". {"route":"newsletters_send","route_parameters":{"_route":"newsletters_send","_controller":"App\\Controller\\NewslettersController::send","id":"1"},"request_uri":"http://localhost:8001/newsletters/send/1","method":"GET"} []
[2024-01-10T13:44:44.414751+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:44:44.416764+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ? (parameters: array{"1":"1"}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ?","params":{"1":"1"},"types":{"1":1}} []
[2024-01-10T13:44:44.421893+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:44:44.423803+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:44:44.428547+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:44:44.428884+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:44:44.429127+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:44:44.429353+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:44:44.429523+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:44:44.429676+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:44:44.432537+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:44:44.432778+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:44:44.433069+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:44:44.433250+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:44:44.434411+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:44:44.435660+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:44:44.436100+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:44:44.438682+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:44:44.438989+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:44:44.441303+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:44:44.441764+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:44:44.444042+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:44:44.444452+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:44:44.447206+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:44:44.451194+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:44:44.451519+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:44:44.453515+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:44:44.454476+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:44:44.468624+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:44:44.468712+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:44:44.482341+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:44:44.485481+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:44:44.485587+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:44:44.485635+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:44:44.485666+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:44:44.486025+00:00] request.INFO: Matched route "newsletters_list". {"route":"newsletters_list","route_parameters":{"_route":"newsletters_list","_controller":"App\\Controller\\NewslettersController::list"},"request_uri":"http://localhost:8001/newsletters/list","method":"GET"} []
[2024-01-10T13:44:44.488153+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:44:44.488761+00:00] doctrine.DEBUG: Executing query: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0"} []
[2024-01-10T13:44:44.491093+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:44:44.491972+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:44:44.493114+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:44:44.493196+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:44:44.493265+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:44:44.493338+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:44:44.493405+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:44:44.493472+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:44:44.493899+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:44:44.493969+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:44:44.494052+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:44:44.494119+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:44:44.494406+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:44:44.494779+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:44:44.495032+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:44:44.495972+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:44:44.496174+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:44:44.497189+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:44:44.497484+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:44:44.498526+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:44:44.498798+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:44:44.500120+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:44:44.501850+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:44:44.502044+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:44:44.503042+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:44:44.503944+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:44:44.519360+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:44:44.519484+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:44:44.537453+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:44:44.576598+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:44:44.576798+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:44:44.576876+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:44:44.576932+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:44:44.577598+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"9197c7"},"request_uri":"http://localhost:8001/_wdt/9197c7","method":"GET"} []
[2024-01-10T13:44:44.578905+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:44:44.579029+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:44:44.579133+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:44:44.579245+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:44:44.579342+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:44:44.579442+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:44:44.580928+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:44:44.581050+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:44:44.581138+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:44:44.581220+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:44:45.074238+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:44:45.075332+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:44:45","2":"2024-01-10 13:44:45","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:44:45","2":"2024-01-10 13:44:45","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:44:45.076984+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:44:46.078091+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:44:46.079203+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:44:46","2":"2024-01-10 13:44:46","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:44:46","2":"2024-01-10 13:44:46","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:44:46.081087+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:44:47.082390+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:44:47.083625+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:44:47","2":"2024-01-10 13:44:47","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:44:47","2":"2024-01-10 13:44:47","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:44:47.085618+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:44:48.087015+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:44:48.087876+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:44:48","2":"2024-01-10 13:44:48","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:44:48","2":"2024-01-10 13:44:48","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:44:48.089712+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:44:49.090892+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:44:49.091799+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:44:49","2":"2024-01-10 13:44:49","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:44:49","2":"2024-01-10 13:44:49","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:44:49.093329+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:44:50.094463+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:44:50.095368+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:44:50","2":"2024-01-10 13:44:50","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:44:50","2":"2024-01-10 13:44:50","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:44:50.096790+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:44:51.097912+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:44:51.099316+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:44:51","2":"2024-01-10 13:44:51","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:44:51","2":"2024-01-10 13:44:51","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:44:51.101414+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:44:51.829802+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:44:51.829985+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:44:51.830065+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:44:51.830124+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:44:51.830874+00:00] request.INFO: Matched route "newsletters_list". {"route":"newsletters_list","route_parameters":{"_route":"newsletters_list","_controller":"App\\Controller\\NewslettersController::list"},"request_uri":"http://localhost:8001/newsletters/list","method":"GET"} []
[2024-01-10T13:44:51.836243+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:44:51.837105+00:00] doctrine.DEBUG: Executing query: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0"} []
[2024-01-10T13:44:51.839285+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:44:51.840416+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:44:51.842245+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:44:51.842357+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:44:51.842430+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:44:51.842507+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:44:51.842578+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:44:51.842647+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:44:51.843382+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:44:51.843473+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:44:51.843603+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:44:51.843676+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:44:51.844018+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:44:51.844644+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:44:51.845006+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:44:51.846356+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:44:51.846577+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:44:51.847659+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:44:51.847943+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:44:51.849109+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:44:51.849414+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:44:51.850829+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:44:51.852862+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:44:51.853198+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:44:51.854307+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:44:51.855245+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:44:51.869764+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:44:51.869861+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:44:51.902640+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:44:51.920029+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:44:51.920395+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:44:51.920624+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:44:51.920830+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:44:51.921754+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"785a22"},"request_uri":"http://localhost:8001/_wdt/785a22","method":"GET"} []
[2024-01-10T13:44:51.923063+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:44:51.923337+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:44:51.923435+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:44:51.923511+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:44:51.923598+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:44:51.923667+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:44:51.925162+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:44:51.925265+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:44:51.925348+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:44:51.925537+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:44:52.102878+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:44:52.104480+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:44:52","2":"2024-01-10 13:44:52","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:44:52","2":"2024-01-10 13:44:52","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:44:52.106911+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:44:53.108467+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:44:53.109871+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:44:53","2":"2024-01-10 13:44:53","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:44:53","2":"2024-01-10 13:44:53","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:44:53.111775+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:44:54.113294+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:44:54.114545+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:44:54","2":"2024-01-10 13:44:54","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:44:54","2":"2024-01-10 13:44:54","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:44:54.116334+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:44:55.117659+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:44:55.118556+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:44:55","2":"2024-01-10 13:44:55","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:44:55","2":"2024-01-10 13:44:55","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:44:55.119729+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:44:56.120652+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:44:56.121707+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:44:56","2":"2024-01-10 13:44:56","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:44:56","2":"2024-01-10 13:44:56","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:44:56.123348+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:44:57.124548+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:44:57.125329+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:44:57","2":"2024-01-10 13:44:57","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:44:57","2":"2024-01-10 13:44:57","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:44:57.126614+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:44:58.127723+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:44:58.128103+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:44:58","2":"2024-01-10 13:44:58","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:44:58","2":"2024-01-10 13:44:58","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:44:58.128688+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:44:59.129217+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:44:59.130503+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:44:59","2":"2024-01-10 13:44:59","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:44:59","2":"2024-01-10 13:44:59","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:44:59.132524+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:45:00.133725+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:45:00.134607+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:45:00","2":"2024-01-10 13:45:00","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:45:00","2":"2024-01-10 13:45:00","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:45:00.136411+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:45:01.138208+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:45:01.140219+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:45:01","2":"2024-01-10 13:45:01","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:45:01","2":"2024-01-10 13:45:01","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:45:01.142280+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:45:02.143768+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:45:02.144943+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:45:02","2":"2024-01-10 13:45:02","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:45:02","2":"2024-01-10 13:45:02","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:45:02.146777+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:45:03.148022+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:45:03.149052+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:45:03","2":"2024-01-10 13:45:03","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:45:03","2":"2024-01-10 13:45:03","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:45:03.150483+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:45:04.151564+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:45:04.152919+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:45:04","2":"2024-01-10 13:45:04","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:45:04","2":"2024-01-10 13:45:04","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:45:04.155021+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:45:05.156658+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:45:05.157064+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:45:05","2":"2024-01-10 13:45:05","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:45:05","2":"2024-01-10 13:45:05","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:45:05.157673+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:45:06.158361+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:45:06.159364+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:45:06","2":"2024-01-10 13:45:06","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:45:06","2":"2024-01-10 13:45:06","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:45:06.160925+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:45:07.162177+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:45:07.162962+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:45:07","2":"2024-01-10 13:45:07","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:45:07","2":"2024-01-10 13:45:07","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:45:07.164433+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:45:08.165451+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:45:08.166241+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:45:08","2":"2024-01-10 13:45:08","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:45:08","2":"2024-01-10 13:45:08","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:45:08.167497+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:45:09.168523+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:45:09.169546+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:45:09","2":"2024-01-10 13:45:09","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:45:09","2":"2024-01-10 13:45:09","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:45:09.170709+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:45:10.171587+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:45:10.172076+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:45:10","2":"2024-01-10 13:45:10","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:45:10","2":"2024-01-10 13:45:10","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:45:10.172747+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:45:11.173368+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:45:11.174588+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:45:11","2":"2024-01-10 13:45:11","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:45:11","2":"2024-01-10 13:45:11","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:45:11.175897+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:45:12.176904+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:45:12.177785+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:45:12","2":"2024-01-10 13:45:12","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:45:12","2":"2024-01-10 13:45:12","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:45:12.179165+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:45:13.180199+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:45:13.181131+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:45:13","2":"2024-01-10 13:45:13","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:45:13","2":"2024-01-10 13:45:13","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:45:13.182642+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:45:13.602686+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:45:13.603243+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:45:13.603420+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:45:13.603587+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:45:13.606678+00:00] request.INFO: Matched route "newsletters_send". {"route":"newsletters_send","route_parameters":{"_route":"newsletters_send","_controller":"App\\Controller\\NewslettersController::send","id":"1"},"request_uri":"http://localhost:8001/newsletters/send/1","method":"GET"} []
[2024-01-10T13:45:13.626246+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:45:13.629942+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ? (parameters: array{"1":"1"}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ?","params":{"1":"1"},"types":{"1":1}} []
[2024-01-10T13:45:13.638021+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:45:13.641975+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:45:13.648753+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:45:13.649105+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:45:13.649318+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:45:13.649557+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:45:13.649795+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:45:13.649970+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:45:13.652957+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:45:13.653278+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:45:13.653717+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:45:13.654025+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:45:13.655924+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:45:13.658611+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:45:13.659785+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:45:13.665869+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:45:13.666779+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:45:13.671957+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:45:13.672943+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:45:13.678878+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:45:13.679867+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:45:13.684482+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:45:13.692889+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:45:13.694032+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:45:13.700581+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:45:13.706070+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:45:13.754212+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:45:13.754365+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:45:13.770751+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:45:13.775148+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:45:13.775282+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:45:13.775351+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:45:13.775399+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:45:13.775838+00:00] request.INFO: Matched route "newsletters_list". {"route":"newsletters_list","route_parameters":{"_route":"newsletters_list","_controller":"App\\Controller\\NewslettersController::list"},"request_uri":"http://localhost:8001/newsletters/list","method":"GET"} []
[2024-01-10T13:45:13.778280+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:45:13.778903+00:00] doctrine.DEBUG: Executing query: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0"} []
[2024-01-10T13:45:13.781006+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:45:13.782020+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:45:13.783316+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:45:13.783420+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:45:13.783496+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:45:13.783571+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:45:13.783641+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:45:13.783709+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:45:13.784261+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:45:13.784350+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:45:13.784503+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:45:13.784578+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:45:13.784919+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:45:13.785313+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:45:13.785649+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:45:13.786691+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:45:13.786967+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:45:13.787964+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:45:13.788224+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:45:13.789906+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:45:13.790158+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:45:13.791380+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:45:13.793098+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:45:13.793337+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:45:13.794315+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:45:13.794967+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:45:13.810364+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:45:13.810484+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:45:13.830479+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:45:13.856413+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:45:13.856665+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:45:13.856765+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:45:13.856842+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:45:13.857695+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"698d62"},"request_uri":"http://localhost:8001/_wdt/698d62","method":"GET"} []
[2024-01-10T13:45:13.858930+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:45:13.859058+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:45:13.859162+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:45:13.859273+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:45:13.859381+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:45:13.859487+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:45:13.861129+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:45:13.861246+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:45:13.861352+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:45:13.861456+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:45:14.183842+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:45:14.185098+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:45:14","2":"2024-01-10 13:45:14","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:45:14","2":"2024-01-10 13:45:14","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:45:14.186811+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:45:15.188402+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:45:15.189295+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:45:15","2":"2024-01-10 13:45:15","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:45:15","2":"2024-01-10 13:45:15","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:45:15.191012+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:45:16.192169+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:45:16.193270+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:45:16","2":"2024-01-10 13:45:16","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:45:16","2":"2024-01-10 13:45:16","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:45:16.194785+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:45:16.282006+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:45:16.282241+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:45:16.282314+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:45:16.282360+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:45:16.283182+00:00] request.INFO: Matched route "newsletters_list". {"route":"newsletters_list","route_parameters":{"_route":"newsletters_list","_controller":"App\\Controller\\NewslettersController::list"},"request_uri":"http://localhost:8001/newsletters/list","method":"GET"} []
[2024-01-10T13:45:16.289509+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:45:16.290667+00:00] doctrine.DEBUG: Executing query: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0"} []
[2024-01-10T13:45:16.293954+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:45:16.294902+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:45:16.296526+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:45:16.296615+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:45:16.296674+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:45:16.296725+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:45:16.296772+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:45:16.296818+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:45:16.297506+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:45:16.297580+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:45:16.297679+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:45:16.297731+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:45:16.298054+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:45:16.298643+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:45:16.298901+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:45:16.300517+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:45:16.300727+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:45:16.302422+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:45:16.302610+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:45:16.303553+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:45:16.303742+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:45:16.305059+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:45:16.308067+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:45:16.308320+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:45:16.309896+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:45:16.310702+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:45:16.325267+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:45:16.325388+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:45:16.347716+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:45:16.367673+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:45:16.367873+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:45:16.367952+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:45:16.368004+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:45:16.368847+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"d03bb7"},"request_uri":"http://localhost:8001/_wdt/d03bb7","method":"GET"} []
[2024-01-10T13:45:16.370100+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:45:16.370382+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:45:16.370617+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:45:16.370829+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:45:16.371033+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:45:16.371469+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:45:16.372910+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:45:16.373173+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:45:16.373372+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:45:16.373582+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:45:17.196036+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:45:17.197329+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:45:17","2":"2024-01-10 13:45:17","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:45:17","2":"2024-01-10 13:45:17","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:45:17.199655+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:45:18.201449+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:45:18.202957+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:45:18","2":"2024-01-10 13:45:18","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:45:18","2":"2024-01-10 13:45:18","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:45:18.205262+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:45:19.206982+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:45:19.208019+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:45:19","2":"2024-01-10 13:45:19","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:45:19","2":"2024-01-10 13:45:19","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:45:19.209768+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:45:20.211150+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:45:20.212037+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:45:20","2":"2024-01-10 13:45:20","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:45:20","2":"2024-01-10 13:45:20","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:45:20.213598+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:45:21.214879+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:45:21.216157+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:45:21","2":"2024-01-10 13:45:21","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:45:21","2":"2024-01-10 13:45:21","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:45:21.218744+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:45:22.220526+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:45:22.222010+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:45:22","2":"2024-01-10 13:45:22","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:45:22","2":"2024-01-10 13:45:22","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:45:22.224315+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:45:23.226014+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:45:23.227116+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:45:23","2":"2024-01-10 13:45:23","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:45:23","2":"2024-01-10 13:45:23","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:45:23.228762+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:45:24.229956+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:45:24.230800+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:45:24","2":"2024-01-10 13:45:24","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:45:24","2":"2024-01-10 13:45:24","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:45:24.232054+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:45:25.233189+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:45:25.234272+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:45:25","2":"2024-01-10 13:45:25","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:45:25","2":"2024-01-10 13:45:25","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:45:25.235975+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:45:26.237485+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:45:26.239045+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:45:26","2":"2024-01-10 13:45:26","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:45:26","2":"2024-01-10 13:45:26","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:45:26.241630+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:45:27.243153+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:45:27.244245+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:45:27","2":"2024-01-10 13:45:27","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:45:27","2":"2024-01-10 13:45:27","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:45:27.246130+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:45:28.247444+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:45:28.248961+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:45:28","2":"2024-01-10 13:45:28","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:45:28","2":"2024-01-10 13:45:28","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:45:28.251464+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:45:29.253317+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:45:29.254410+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:45:29","2":"2024-01-10 13:45:29","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:45:29","2":"2024-01-10 13:45:29","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:45:29.256091+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:45:30.257718+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:45:30.259024+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:45:30","2":"2024-01-10 13:45:30","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:45:30","2":"2024-01-10 13:45:30","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:45:30.260947+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:45:31.262100+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:45:31.263252+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:45:31","2":"2024-01-10 13:45:31","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:45:31","2":"2024-01-10 13:45:31","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:45:31.265109+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:45:32.266447+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:45:32.268006+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:45:32","2":"2024-01-10 13:45:32","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:45:32","2":"2024-01-10 13:45:32","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:45:32.270748+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:45:33.272436+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:45:33.272892+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:45:33","2":"2024-01-10 13:45:33","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:45:33","2":"2024-01-10 13:45:33","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:45:33.273583+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:45:34.274275+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:45:34.275741+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:45:34","2":"2024-01-10 13:45:34","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:45:34","2":"2024-01-10 13:45:34","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:45:34.277757+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:45:35.279411+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:45:35.280256+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:45:35","2":"2024-01-10 13:45:35","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:45:35","2":"2024-01-10 13:45:35","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:45:35.281838+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:45:36.282978+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:45:36.284273+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:45:36","2":"2024-01-10 13:45:36","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:45:36","2":"2024-01-10 13:45:36","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:45:36.285674+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:45:37.286890+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:45:37.288211+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:45:37","2":"2024-01-10 13:45:37","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:45:37","2":"2024-01-10 13:45:37","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:45:37.289915+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:45:38.291100+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:45:38.292338+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:45:38","2":"2024-01-10 13:45:38","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:45:38","2":"2024-01-10 13:45:38","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:45:38.294294+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:45:39.295829+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:45:39.296196+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:45:39","2":"2024-01-10 13:45:39","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:45:39","2":"2024-01-10 13:45:39","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:45:39.296670+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:45:40.297063+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:45:40.297424+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:45:40","2":"2024-01-10 13:45:40","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:45:40","2":"2024-01-10 13:45:40","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:45:40.297878+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:45:41.298342+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:45:41.299415+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:45:41","2":"2024-01-10 13:45:41","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:45:41","2":"2024-01-10 13:45:41","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:45:41.301259+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:45:42.302542+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:45:42.303803+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:45:42","2":"2024-01-10 13:45:42","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:45:42","2":"2024-01-10 13:45:42","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:45:42.306926+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:45:43.308742+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:45:43.310579+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:45:43","2":"2024-01-10 13:45:43","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:45:43","2":"2024-01-10 13:45:43","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:45:43.313280+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:45:44.314687+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:45:44.315810+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:45:44","2":"2024-01-10 13:45:44","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:45:44","2":"2024-01-10 13:45:44","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:45:44.317412+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:45:45.318663+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:45:45.319511+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:45:45","2":"2024-01-10 13:45:45","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:45:45","2":"2024-01-10 13:45:45","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:45:45.321072+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:45:46.322079+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:45:46.323443+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:45:46","2":"2024-01-10 13:45:46","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:45:46","2":"2024-01-10 13:45:46","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:45:46.325180+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:45:47.327163+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:45:47.328800+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:45:47","2":"2024-01-10 13:45:47","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:45:47","2":"2024-01-10 13:45:47","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:45:47.330725+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:45:48.331986+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:45:48.333299+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:45:48","2":"2024-01-10 13:45:48","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:45:48","2":"2024-01-10 13:45:48","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:45:48.335272+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:45:48.826704+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:45:48.827065+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:45:48.827215+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:45:48.827326+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:45:48.828762+00:00] request.INFO: Matched route "newsletters_list". {"route":"newsletters_list","route_parameters":{"_route":"newsletters_list","_controller":"App\\Controller\\NewslettersController::list"},"request_uri":"http://localhost:8001/newsletters/list","method":"GET"} []
[2024-01-10T13:45:48.838789+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:45:48.839846+00:00] doctrine.DEBUG: Executing query: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0"} []
[2024-01-10T13:45:48.842820+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":1}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":1},"types":{"1":1}} []
[2024-01-10T13:45:48.843993+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":1}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":1},"types":{"1":1}} []
[2024-01-10T13:45:48.846158+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:45:48.846309+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:45:48.846434+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:45:48.846559+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:45:48.846667+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:45:48.846777+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:45:48.847738+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:45:48.847871+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:45:48.848074+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:45:48.848188+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:45:48.848816+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:45:48.849718+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:45:48.850130+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:45:48.852135+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:45:48.852469+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:45:48.854755+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:45:48.855170+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:45:48.857837+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:45:48.858193+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:45:48.860686+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:45:48.863287+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:45:48.863671+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:45:48.865404+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:45:48.867121+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:45:48.887017+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:45:48.887148+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:45:48.912373+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:45:48.930886+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:45:48.931116+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:45:48.931217+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:45:48.931322+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:45:48.932027+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"616170"},"request_uri":"http://localhost:8001/_wdt/616170","method":"GET"} []
[2024-01-10T13:45:48.933114+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:45:48.933251+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:45:48.933335+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:45:48.933428+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:45:48.933501+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:45:48.933565+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:45:48.935367+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:45:48.935493+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:45:48.935597+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:45:48.935669+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:45:49.336877+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:45:49.338911+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:45:49","2":"2024-01-10 13:45:49","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:45:49","2":"2024-01-10 13:45:49","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:45:49.344599+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:45:50.229578+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:45:50.229880+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:45:50.229965+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:45:50.230033+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:45:50.230927+00:00] request.INFO: Matched route "newsletters_send". {"route":"newsletters_send","route_parameters":{"_route":"newsletters_send","_controller":"App\\Controller\\NewslettersController::send","id":"1"},"request_uri":"http://localhost:8001/newsletters/send/1","method":"GET"} []
[2024-01-10T13:45:50.234781+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:45:50.235961+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ? (parameters: array{"1":"1"}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ?","params":{"1":"1"},"types":{"1":1}} []
[2024-01-10T13:45:50.238386+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":1}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":1},"types":{"1":1}} []
[2024-01-10T13:45:50.239962+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":1}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":1},"types":{"1":1}} []
[2024-01-10T13:45:50.241670+00:00] messenger.INFO: Sending message App\Message\SendNewsletterMessage with async sender using Symfony\Component\Messenger\Bridge\Doctrine\Transport\DoctrineTransport {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage","alias":"async","sender":"Symfony\\Component\\Messenger\\Bridge\\Doctrine\\Transport\\DoctrineTransport"} []
[2024-01-10T13:45:50.241980+00:00] doctrine.DEBUG: Executing statement: INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?) (parameters: array{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:1:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"default","4":"2024-01-10 13:45:50","5":"2024-01-10 13:45:50"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?)","params":{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:1:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"default","4":"2024-01-10 13:45:50","5":"2024-01-10 13:45:50"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2024-01-10T13:45:50.248137+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:45:50.248287+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:45:50.248626+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:45:50.248788+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:45:50.248911+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:45:50.249016+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:45:50.250273+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:45:50.250428+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:45:50.250614+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:45:50.250729+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:45:50.251275+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:45:50.251788+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:45:50.252169+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:45:50.253950+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:45:50.254290+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:45:50.256427+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:45:50.256767+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:45:50.258282+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:45:50.258562+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:45:50.260873+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:45:50.263349+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:45:50.263650+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:45:50.265467+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:45:50.266535+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:45:50.280697+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:45:50.280785+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:45:50.293458+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:45:50.296511+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:45:50.296615+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:45:50.296652+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:45:50.296681+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:45:50.297053+00:00] request.INFO: Matched route "newsletters_list". {"route":"newsletters_list","route_parameters":{"_route":"newsletters_list","_controller":"App\\Controller\\NewslettersController::list"},"request_uri":"http://localhost:8001/newsletters/list","method":"GET"} []
[2024-01-10T13:45:50.299532+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:45:50.300398+00:00] doctrine.DEBUG: Executing query: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0"} []
[2024-01-10T13:45:50.302130+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":1}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":1},"types":{"1":1}} []
[2024-01-10T13:45:50.302876+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":1}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":1},"types":{"1":1}} []
[2024-01-10T13:45:50.304421+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:45:50.304541+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:45:50.304620+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:45:50.304666+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:45:50.304717+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:45:50.304755+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:45:50.305302+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:45:50.305370+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:45:50.305423+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:45:50.305487+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:45:50.305891+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:45:50.306364+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:45:50.306658+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:45:50.308105+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:45:50.308304+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:45:50.309279+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:45:50.309515+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:45:50.310500+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:45:50.310716+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:45:50.311900+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:45:50.313771+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:45:50.314072+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:45:50.315166+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:45:50.315987+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:45:50.332573+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:45:50.332689+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:45:50.347801+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:45:50.348179+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:45:50","2":"2024-01-10 13:45:50","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:45:50","2":"2024-01-10 13:45:50","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:45:50.349082+00:00] doctrine.DEBUG: Executing statement: UPDATE messenger_messages SET delivered_at = ? WHERE id = ? (parameters: array{"1":"2024-01-10 13:45:50","2":15}, types: array{"1":2,"2":2}) {"sql":"UPDATE messenger_messages SET delivered_at = ? WHERE id = ?","params":{"1":"2024-01-10 13:45:50","2":15},"types":{"1":2,"2":2}} []
[2024-01-10T13:45:50.349608+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:45:50.352651+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:45:50.353365+00:00] messenger.INFO: Received message App\Message\SendNewsletterMessage {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage"} []
[2024-01-10T13:45:50.353561+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:45:50.354259+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ? (parameters: array{"1":1}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ?","params":{"1":1},"types":{"1":1}} []
[2024-01-10T13:45:50.383821+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:45:50.384064+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:45:50.384148+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:45:50.384231+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:45:50.385039+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"846e93"},"request_uri":"http://localhost:8001/_wdt/846e93","method":"GET"} []
[2024-01-10T13:45:50.386111+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:45:50.386261+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:45:50.386364+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:45:50.386454+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:45:50.386550+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:45:50.386634+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:45:50.388006+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:45:50.388126+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:45:50.388216+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:45:50.388300+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:45:53.360987+00:00] app.DEBUG: Email transport "Symfony\Component\Mailer\Transport\Smtp\SmtpTransport" stopping [] []
[2024-01-10T13:45:53.361183+00:00] app.DEBUG: Email transport "Symfony\Component\Mailer\Transport\Smtp\SmtpTransport" stopped [] []
[2024-01-10T13:45:53.361246+00:00] app.DEBUG: Email transport "Symfony\Component\Mailer\Transport\Smtp\SmtpTransport" starting [] []
[2024-01-10T13:45:53.465156+00:00] app.DEBUG: Email transport "Symfony\Component\Mailer\Transport\Smtp\SmtpTransport" started [] []
[2024-01-10T13:45:53.518209+00:00] messenger.INFO: Message Symfony\Component\Mailer\Messenger\SendEmailMessage handled by Symfony\Component\Mailer\Messenger\MessageHandler::__invoke {"message":{"Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage":[]},"class":"Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage","handler":"Symfony\\Component\\Mailer\\Messenger\\MessageHandler::__invoke"} []
[2024-01-10T13:45:53.518800+00:00] messenger.INFO: Message App\Message\SendNewsletterMessage handled by App\MessageHandler\SendNewsletterMessageHandler::__invoke {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage","handler":"App\\MessageHandler\\SendNewsletterMessageHandler::__invoke"} []
[2024-01-10T13:45:53.519518+00:00] messenger.INFO: App\Message\SendNewsletterMessage was handled successfully (acknowledging to transport). {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage"} []
[2024-01-10T13:45:53.520085+00:00] doctrine.DEBUG: Executing statement: DELETE FROM messenger_messages WHERE id = ? (parameters: array{"1":"15"}, types: array{"1":2}) {"sql":"DELETE FROM messenger_messages WHERE id = ?","params":{"1":"15"},"types":{"1":2}} []
[2024-01-10T13:45:53.530724+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:45:53.532195+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:45:53","2":"2024-01-10 13:45:53","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:45:53","2":"2024-01-10 13:45:53","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:45:53.534427+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:45:54.536210+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:45:54.536697+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:45:54","2":"2024-01-10 13:45:54","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:45:54","2":"2024-01-10 13:45:54","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:45:54.537263+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:45:55.537629+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:45:55.538134+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:45:55","2":"2024-01-10 13:45:55","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:45:55","2":"2024-01-10 13:45:55","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:45:55.538822+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:45:56.539626+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:45:56.540664+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:45:56","2":"2024-01-10 13:45:56","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:45:56","2":"2024-01-10 13:45:56","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:45:56.542123+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:45:57.543208+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:45:57.544020+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:45:57","2":"2024-01-10 13:45:57","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:45:57","2":"2024-01-10 13:45:57","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:45:57.545480+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:45:58.546613+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:45:58.547911+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:45:58","2":"2024-01-10 13:45:58","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:45:58","2":"2024-01-10 13:45:58","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:45:58.549996+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:45:59.551456+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:45:59.552756+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:45:59","2":"2024-01-10 13:45:59","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:45:59","2":"2024-01-10 13:45:59","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:45:59.554740+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:46:00.556095+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:46:00.556598+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:46:00","2":"2024-01-10 13:46:00","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:46:00","2":"2024-01-10 13:46:00","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:46:00.557375+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:46:01.558121+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:46:01.559136+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:46:01","2":"2024-01-10 13:46:01","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:46:01","2":"2024-01-10 13:46:01","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:46:01.560703+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:46:02.562499+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:46:02.563818+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:46:02","2":"2024-01-10 13:46:02","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:46:02","2":"2024-01-10 13:46:02","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:46:02.566062+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:46:03.567475+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:46:03.568021+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:46:03","2":"2024-01-10 13:46:03","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:46:03","2":"2024-01-10 13:46:03","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:46:03.568924+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:46:04.569685+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:46:04.570725+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:46:04","2":"2024-01-10 13:46:04","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:46:04","2":"2024-01-10 13:46:04","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:46:04.572534+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:46:05.573713+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:46:05.574924+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:46:05","2":"2024-01-10 13:46:05","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:46:05","2":"2024-01-10 13:46:05","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:46:05.577399+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:46:06.579834+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:46:06.581000+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:46:06","2":"2024-01-10 13:46:06","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:46:06","2":"2024-01-10 13:46:06","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:46:06.582787+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:46:07.584052+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:46:07.585412+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:46:07","2":"2024-01-10 13:46:07","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:46:07","2":"2024-01-10 13:46:07","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:46:07.587447+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:46:08.589725+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:46:08.590754+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:46:08","2":"2024-01-10 13:46:08","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:46:08","2":"2024-01-10 13:46:08","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:46:08.592685+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:46:09.593879+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:46:09.594336+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:46:09","2":"2024-01-10 13:46:09","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:46:09","2":"2024-01-10 13:46:09","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:46:09.595014+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:46:10.595646+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:46:10.596685+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:46:10","2":"2024-01-10 13:46:10","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:46:10","2":"2024-01-10 13:46:10","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:46:10.598273+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:46:10.840300+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:46:10.840999+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:46:10.841260+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:46:10.841474+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:46:10.845461+00:00] request.INFO: Matched route "newsletters_send". {"route":"newsletters_send","route_parameters":{"_route":"newsletters_send","_controller":"App\\Controller\\NewslettersController::send","id":"1"},"request_uri":"http://localhost:8001/newsletters/send/1","method":"GET"} []
[2024-01-10T13:46:10.862980+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:46:10.864780+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ? (parameters: array{"1":"1"}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ?","params":{"1":"1"},"types":{"1":1}} []
[2024-01-10T13:46:10.869861+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":1}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":1},"types":{"1":1}} []
[2024-01-10T13:46:10.872137+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":1}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":1},"types":{"1":1}} []
[2024-01-10T13:46:10.874469+00:00] messenger.INFO: Sending message App\Message\SendNewsletterMessage with async sender using Symfony\Component\Messenger\Bridge\Doctrine\Transport\DoctrineTransport {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage","alias":"async","sender":"Symfony\\Component\\Messenger\\Bridge\\Doctrine\\Transport\\DoctrineTransport"} []
[2024-01-10T13:46:10.874837+00:00] doctrine.DEBUG: Executing statement: INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?) (parameters: array{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:1:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"default","4":"2024-01-10 13:46:10","5":"2024-01-10 13:46:10"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?)","params":{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:1:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"default","4":"2024-01-10 13:46:10","5":"2024-01-10 13:46:10"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2024-01-10T13:46:10.880331+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:46:10.880493+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:46:10.880604+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:46:10.880770+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:46:10.881127+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:46:10.881358+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:46:10.883071+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:46:10.883212+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:46:10.883405+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:46:10.883499+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:46:10.884081+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:46:10.884955+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:46:10.885319+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:46:10.887293+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:46:10.887570+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:46:10.889186+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:46:10.889432+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:46:10.890785+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:46:10.891232+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:46:10.893541+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:46:10.896952+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:46:10.897792+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:46:10.900051+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:46:10.901617+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:46:10.915899+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:46:10.915981+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:46:10.928724+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:46:10.932889+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:46:10.933025+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:46:10.933064+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:46:10.933093+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:46:10.933471+00:00] request.INFO: Matched route "newsletters_list". {"route":"newsletters_list","route_parameters":{"_route":"newsletters_list","_controller":"App\\Controller\\NewslettersController::list"},"request_uri":"http://localhost:8001/newsletters/list","method":"GET"} []
[2024-01-10T13:46:10.935625+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:46:10.936198+00:00] doctrine.DEBUG: Executing query: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0"} []
[2024-01-10T13:46:10.938457+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":1}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":1},"types":{"1":1}} []
[2024-01-10T13:46:10.939235+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":1}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":1},"types":{"1":1}} []
[2024-01-10T13:46:10.940628+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:46:10.940718+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:46:10.940785+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:46:10.940853+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:46:10.940915+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:46:10.940983+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:46:10.941506+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:46:10.941582+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:46:10.941656+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:46:10.941725+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:46:10.942034+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:46:10.942334+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:46:10.942553+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:46:10.943573+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:46:10.943844+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:46:10.945170+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:46:10.945453+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:46:10.946527+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:46:10.946840+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:46:10.948018+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:46:10.950072+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:46:10.950324+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:46:10.951415+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:46:10.952076+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:46:10.968326+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:46:10.968463+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:46:10.994341+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:46:11.017657+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:46:11.017992+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:46:11.018181+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:46:11.018357+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:46:11.019529+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"838ffd"},"request_uri":"http://localhost:8001/_wdt/838ffd","method":"GET"} []
[2024-01-10T13:46:11.021110+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:46:11.021394+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:46:11.021617+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:46:11.021842+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:46:11.022084+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:46:11.022282+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:46:11.025352+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:46:11.025608+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:46:11.025852+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:46:11.026050+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:46:11.599469+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:46:11.600524+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:46:11","2":"2024-01-10 13:46:11","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:46:11","2":"2024-01-10 13:46:11","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:46:11.602585+00:00] doctrine.DEBUG: Executing statement: UPDATE messenger_messages SET delivered_at = ? WHERE id = ? (parameters: array{"1":"2024-01-10 13:46:11","2":16}, types: array{"1":2,"2":2}) {"sql":"UPDATE messenger_messages SET delivered_at = ? WHERE id = ?","params":{"1":"2024-01-10 13:46:11","2":16},"types":{"1":2,"2":2}} []
[2024-01-10T13:46:11.603956+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:46:11.613543+00:00] messenger.INFO: Received message App\Message\SendNewsletterMessage {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage"} []
[2024-01-10T13:46:11.613974+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:46:11.615608+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ? (parameters: array{"1":1}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ?","params":{"1":1},"types":{"1":1}} []
[2024-01-10T13:46:14.670183+00:00] messenger.INFO: Message Symfony\Component\Mailer\Messenger\SendEmailMessage handled by Symfony\Component\Mailer\Messenger\MessageHandler::__invoke {"message":{"Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage":[]},"class":"Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage","handler":"Symfony\\Component\\Mailer\\Messenger\\MessageHandler::__invoke"} []
[2024-01-10T13:46:14.670752+00:00] messenger.INFO: Message App\Message\SendNewsletterMessage handled by App\MessageHandler\SendNewsletterMessageHandler::__invoke {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage","handler":"App\\MessageHandler\\SendNewsletterMessageHandler::__invoke"} []
[2024-01-10T13:46:14.671614+00:00] messenger.INFO: App\Message\SendNewsletterMessage was handled successfully (acknowledging to transport). {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage"} []
[2024-01-10T13:46:14.672008+00:00] doctrine.DEBUG: Executing statement: DELETE FROM messenger_messages WHERE id = ? (parameters: array{"1":"16"}, types: array{"1":2}) {"sql":"DELETE FROM messenger_messages WHERE id = ?","params":{"1":"16"},"types":{"1":2}} []
[2024-01-10T13:46:14.680716+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:46:14.681996+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:46:14","2":"2024-01-10 13:46:14","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:46:14","2":"2024-01-10 13:46:14","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:46:14.684182+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:46:15.685810+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:46:15.686219+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:46:15","2":"2024-01-10 13:46:15","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:46:15","2":"2024-01-10 13:46:15","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:46:15.686826+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:46:16.687503+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:46:16.688242+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:46:16","2":"2024-01-10 13:46:16","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:46:16","2":"2024-01-10 13:46:16","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:46:16.689360+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:46:17.690193+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:46:17.690521+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:46:17","2":"2024-01-10 13:46:17","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:46:17","2":"2024-01-10 13:46:17","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:46:17.690946+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:46:18.691361+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:46:18.692804+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:46:18","2":"2024-01-10 13:46:18","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:46:18","2":"2024-01-10 13:46:18","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:46:18.695006+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:46:19.696601+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:46:19.698998+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:46:19","2":"2024-01-10 13:46:19","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:46:19","2":"2024-01-10 13:46:19","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:46:19.700927+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:46:20.702451+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:46:20.703669+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:46:20","2":"2024-01-10 13:46:20","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:46:20","2":"2024-01-10 13:46:20","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:46:20.705943+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:46:21.707521+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:46:21.709268+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:46:21","2":"2024-01-10 13:46:21","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:46:21","2":"2024-01-10 13:46:21","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:46:21.711800+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:46:22.713780+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:46:22.715030+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:46:22","2":"2024-01-10 13:46:22","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:46:22","2":"2024-01-10 13:46:22","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:46:22.716902+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:46:23.718217+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:46:23.719831+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:46:23","2":"2024-01-10 13:46:23","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:46:23","2":"2024-01-10 13:46:23","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:46:23.722400+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:46:24.724110+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:46:24.725365+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:46:24","2":"2024-01-10 13:46:24","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:46:24","2":"2024-01-10 13:46:24","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:46:24.727291+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:46:25.728900+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:46:25.731968+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:46:25","2":"2024-01-10 13:46:25","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:46:25","2":"2024-01-10 13:46:25","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:46:25.734172+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:46:26.735817+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:46:26.736884+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:46:26","2":"2024-01-10 13:46:26","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:46:26","2":"2024-01-10 13:46:26","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:46:26.738373+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:46:27.739568+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:46:27.740539+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:46:27","2":"2024-01-10 13:46:27","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:46:27","2":"2024-01-10 13:46:27","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:46:27.742016+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:46:28.743084+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:46:28.743926+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:46:28","2":"2024-01-10 13:46:28","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:46:28","2":"2024-01-10 13:46:28","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:46:28.745474+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:46:29.746682+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:46:29.747485+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:46:29","2":"2024-01-10 13:46:29","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:46:29","2":"2024-01-10 13:46:29","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:46:29.748947+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:46:30.750113+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:46:30.751475+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:46:30","2":"2024-01-10 13:46:30","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:46:30","2":"2024-01-10 13:46:30","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:46:30.753432+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:46:31.754933+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:46:31.756316+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:46:31","2":"2024-01-10 13:46:31","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:46:31","2":"2024-01-10 13:46:31","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:46:31.757837+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:46:32.759014+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:46:32.759966+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:46:32","2":"2024-01-10 13:46:32","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:46:32","2":"2024-01-10 13:46:32","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:46:32.761540+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:46:33.762670+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:46:33.763731+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:46:33","2":"2024-01-10 13:46:33","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:46:33","2":"2024-01-10 13:46:33","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:46:33.765351+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:46:34.766485+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:46:34.767433+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:46:34","2":"2024-01-10 13:46:34","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:46:34","2":"2024-01-10 13:46:34","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:46:34.769030+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:46:35.770286+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:46:35.771447+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:46:35","2":"2024-01-10 13:46:35","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:46:35","2":"2024-01-10 13:46:35","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:46:35.773215+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:46:36.774512+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:46:36.775865+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:46:36","2":"2024-01-10 13:46:36","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:46:36","2":"2024-01-10 13:46:36","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:46:36.778750+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:46:37.782367+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:46:37.783640+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:46:37","2":"2024-01-10 13:46:37","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:46:37","2":"2024-01-10 13:46:37","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:46:37.786288+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:46:38.788133+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:46:38.788860+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:46:38","2":"2024-01-10 13:46:38","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:46:38","2":"2024-01-10 13:46:38","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:46:38.789865+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:46:39.790763+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:46:39.791699+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:46:39","2":"2024-01-10 13:46:39","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:46:39","2":"2024-01-10 13:46:39","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:46:39.793989+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:46:40.795173+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:46:40.796748+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:46:40","2":"2024-01-10 13:46:40","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:46:40","2":"2024-01-10 13:46:40","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:46:40.799361+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:46:41.801263+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:46:41.802316+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:46:41","2":"2024-01-10 13:46:41","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:46:41","2":"2024-01-10 13:46:41","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:46:41.803918+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:46:42.805248+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:46:42.806824+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:46:42","2":"2024-01-10 13:46:42","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:46:42","2":"2024-01-10 13:46:42","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:46:42.810078+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:46:43.812141+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:46:43.815337+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:46:43","2":"2024-01-10 13:46:43","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:46:43","2":"2024-01-10 13:46:43","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:46:43.821595+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:46:44.822806+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:46:44.823218+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:46:44","2":"2024-01-10 13:46:44","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:46:44","2":"2024-01-10 13:46:44","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:46:44.823922+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:46:45.824628+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:46:45.826385+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:46:45","2":"2024-01-10 13:46:45","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:46:45","2":"2024-01-10 13:46:45","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:46:45.828846+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:46:46.830451+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:46:46.831790+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:46:46","2":"2024-01-10 13:46:46","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:46:46","2":"2024-01-10 13:46:46","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:46:46.834200+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:46:47.836284+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:46:47.837414+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:46:47","2":"2024-01-10 13:46:47","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:46:47","2":"2024-01-10 13:46:47","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:46:47.838999+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:46:48.840147+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:46:48.842098+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:46:48","2":"2024-01-10 13:46:48","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:46:48","2":"2024-01-10 13:46:48","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:46:48.844126+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:46:49.845774+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:46:49.847174+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:46:49","2":"2024-01-10 13:46:49","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:46:49","2":"2024-01-10 13:46:49","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:46:49.849187+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:46:50.851434+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:46:50.853069+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:46:50","2":"2024-01-10 13:46:50","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:46:50","2":"2024-01-10 13:46:50","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:46:50.855930+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:46:51.858226+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:46:51.859160+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:46:51","2":"2024-01-10 13:46:51","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:46:51","2":"2024-01-10 13:46:51","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:46:51.860995+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:46:52.862211+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:46:52.863493+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:46:52","2":"2024-01-10 13:46:52","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:46:52","2":"2024-01-10 13:46:52","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:46:52.865687+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:46:53.867027+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:46:53.867934+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:46:53","2":"2024-01-10 13:46:53","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:46:53","2":"2024-01-10 13:46:53","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:46:53.869434+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:46:54.870572+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:46:54.872156+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:46:54","2":"2024-01-10 13:46:54","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:46:54","2":"2024-01-10 13:46:54","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:46:54.875051+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:46:55.877557+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:46:55.878858+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:46:55","2":"2024-01-10 13:46:55","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:46:55","2":"2024-01-10 13:46:55","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:46:55.880746+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:46:56.881974+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:46:56.882999+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:46:56","2":"2024-01-10 13:46:56","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:46:56","2":"2024-01-10 13:46:56","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:46:56.884543+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:46:57.885659+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:46:57.886511+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:46:57","2":"2024-01-10 13:46:57","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:46:57","2":"2024-01-10 13:46:57","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:46:57.887877+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:46:58.888811+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:46:58.889739+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:46:58","2":"2024-01-10 13:46:58","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:46:58","2":"2024-01-10 13:46:58","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:46:58.891326+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:46:59.892501+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:46:59.893762+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:46:59","2":"2024-01-10 13:46:59","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:46:59","2":"2024-01-10 13:46:59","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:46:59.895814+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:47:00.897223+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:47:00.898843+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:47:00","2":"2024-01-10 13:47:00","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:47:00","2":"2024-01-10 13:47:00","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:47:00.901102+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:47:01.902610+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:47:01.903897+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:47:01","2":"2024-01-10 13:47:01","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:47:01","2":"2024-01-10 13:47:01","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:47:01.905900+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:47:02.907625+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:47:02.909079+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:47:02","2":"2024-01-10 13:47:02","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:47:02","2":"2024-01-10 13:47:02","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:47:02.911079+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:47:03.912561+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:47:03.913935+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:47:03","2":"2024-01-10 13:47:03","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:47:03","2":"2024-01-10 13:47:03","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:47:03.915814+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:47:04.917157+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:47:04.917655+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:47:04","2":"2024-01-10 13:47:04","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:47:04","2":"2024-01-10 13:47:04","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:47:04.918267+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:47:05.918959+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:47:05.920129+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:47:05","2":"2024-01-10 13:47:05","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:47:05","2":"2024-01-10 13:47:05","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:47:05.922001+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:47:06.923659+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:47:06.925464+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:47:06","2":"2024-01-10 13:47:06","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:47:06","2":"2024-01-10 13:47:06","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:47:06.927337+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:47:07.928772+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:47:07.930113+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:47:07","2":"2024-01-10 13:47:07","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:47:07","2":"2024-01-10 13:47:07","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:47:07.931936+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:47:08.933292+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:47:08.934609+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:47:08","2":"2024-01-10 13:47:08","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:47:08","2":"2024-01-10 13:47:08","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:47:08.936907+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:47:09.938505+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:47:09.939074+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:47:09","2":"2024-01-10 13:47:09","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:47:09","2":"2024-01-10 13:47:09","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:47:09.939855+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:47:10.940603+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:47:10.941925+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:47:10","2":"2024-01-10 13:47:10","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:47:10","2":"2024-01-10 13:47:10","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:47:10.943929+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:47:11.945702+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:47:11.946866+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:47:11","2":"2024-01-10 13:47:11","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:47:11","2":"2024-01-10 13:47:11","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:47:11.949092+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:47:12.950633+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:47:12.951376+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:47:12","2":"2024-01-10 13:47:12","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:47:12","2":"2024-01-10 13:47:12","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:47:12.952559+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:47:13.953635+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:47:13.955422+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:47:13","2":"2024-01-10 13:47:13","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:47:13","2":"2024-01-10 13:47:13","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:47:13.957503+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:47:14.959046+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:47:14.960301+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:47:14","2":"2024-01-10 13:47:14","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:47:14","2":"2024-01-10 13:47:14","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:47:14.962379+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:47:15.963911+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:47:15.965056+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:47:15","2":"2024-01-10 13:47:15","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:47:15","2":"2024-01-10 13:47:15","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:47:15.967484+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:47:16.969402+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:47:16.970751+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:47:16","2":"2024-01-10 13:47:16","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:47:16","2":"2024-01-10 13:47:16","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:47:16.972408+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:47:17.973901+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:47:17.974884+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:47:17","2":"2024-01-10 13:47:17","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:47:17","2":"2024-01-10 13:47:17","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:47:17.976280+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:47:18.977592+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:47:18.978777+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:47:18","2":"2024-01-10 13:47:18","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:47:18","2":"2024-01-10 13:47:18","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:47:18.980991+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:47:19.983026+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:47:19.984330+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:47:19","2":"2024-01-10 13:47:19","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:47:19","2":"2024-01-10 13:47:19","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:47:19.986305+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:47:20.987722+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:47:20.988800+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:47:20","2":"2024-01-10 13:47:20","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:47:20","2":"2024-01-10 13:47:20","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:47:20.990699+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:47:21.992150+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:47:21.993263+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:47:21","2":"2024-01-10 13:47:21","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:47:21","2":"2024-01-10 13:47:21","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:47:21.994921+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:47:22.996492+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:47:22.997914+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:47:22","2":"2024-01-10 13:47:22","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:47:22","2":"2024-01-10 13:47:22","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:47:23.000175+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:47:24.001606+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:47:24.003200+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:47:24","2":"2024-01-10 13:47:24","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:47:24","2":"2024-01-10 13:47:24","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:47:24.005909+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:47:25.007956+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:47:25.009398+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:47:25","2":"2024-01-10 13:47:25","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:47:25","2":"2024-01-10 13:47:25","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:47:25.011500+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:47:26.013465+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:47:26.014775+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:47:26","2":"2024-01-10 13:47:26","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:47:26","2":"2024-01-10 13:47:26","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:47:26.017232+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:47:27.019220+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:47:27.021000+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:47:27","2":"2024-01-10 13:47:27","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:47:27","2":"2024-01-10 13:47:27","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:47:27.023303+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:47:28.024905+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:47:28.025965+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:47:28","2":"2024-01-10 13:47:28","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:47:28","2":"2024-01-10 13:47:28","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:47:28.027748+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:47:29.029201+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:47:29.029697+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:47:29","2":"2024-01-10 13:47:29","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:47:29","2":"2024-01-10 13:47:29","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:47:29.030432+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:47:30.031209+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:47:30.033087+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:47:30","2":"2024-01-10 13:47:30","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:47:30","2":"2024-01-10 13:47:30","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:47:30.034937+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:47:31.036625+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:47:31.037997+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:47:31","2":"2024-01-10 13:47:31","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:47:31","2":"2024-01-10 13:47:31","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:47:31.040279+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:47:32.041786+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:47:32.042854+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:47:32","2":"2024-01-10 13:47:32","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:47:32","2":"2024-01-10 13:47:32","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:47:32.044484+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:47:33.045695+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:47:33.046905+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:47:33","2":"2024-01-10 13:47:33","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:47:33","2":"2024-01-10 13:47:33","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:47:33.048733+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:47:34.050048+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:47:34.051371+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:47:34","2":"2024-01-10 13:47:34","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:47:34","2":"2024-01-10 13:47:34","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:47:34.053475+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:47:35.055221+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:47:35.056336+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:47:35","2":"2024-01-10 13:47:35","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:47:35","2":"2024-01-10 13:47:35","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:47:35.058275+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:47:36.059593+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:47:36.060777+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:47:36","2":"2024-01-10 13:47:36","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:47:36","2":"2024-01-10 13:47:36","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:47:36.062649+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:47:37.064149+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:47:37.066087+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:47:37","2":"2024-01-10 13:47:37","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:47:37","2":"2024-01-10 13:47:37","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:47:37.068270+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:47:38.069773+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:47:38.071368+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:47:38","2":"2024-01-10 13:47:38","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:47:38","2":"2024-01-10 13:47:38","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:47:38.074728+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:47:39.076553+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:47:39.078451+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:47:39","2":"2024-01-10 13:47:39","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:47:39","2":"2024-01-10 13:47:39","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:47:39.080453+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:47:40.081754+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:47:40.082119+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:47:40","2":"2024-01-10 13:47:40","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:47:40","2":"2024-01-10 13:47:40","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:47:40.082721+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:47:41.083738+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:47:41.085245+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:47:41","2":"2024-01-10 13:47:41","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:47:41","2":"2024-01-10 13:47:41","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:47:41.087225+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:47:42.088657+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:47:42.091429+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:47:42","2":"2024-01-10 13:47:42","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:47:42","2":"2024-01-10 13:47:42","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:47:42.093970+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:47:43.096169+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:47:43.097566+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:47:43","2":"2024-01-10 13:47:43","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:47:43","2":"2024-01-10 13:47:43","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:47:43.099478+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:47:44.101031+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:47:44.102166+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:47:44","2":"2024-01-10 13:47:44","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:47:44","2":"2024-01-10 13:47:44","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:47:44.103892+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:47:45.105240+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:47:45.106783+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:47:45","2":"2024-01-10 13:47:45","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:47:45","2":"2024-01-10 13:47:45","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:47:45.108689+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:47:46.111045+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:47:46.113747+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:47:46","2":"2024-01-10 13:47:46","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:47:46","2":"2024-01-10 13:47:46","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:47:46.115562+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:47:47.116795+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:47:47.117790+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:47:47","2":"2024-01-10 13:47:47","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:47:47","2":"2024-01-10 13:47:47","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:47:47.119296+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:47:48.120514+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:47:48.121756+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:47:48","2":"2024-01-10 13:47:48","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:47:48","2":"2024-01-10 13:47:48","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:47:48.123260+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:47:49.124386+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:47:49.124963+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:47:49","2":"2024-01-10 13:47:49","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:47:49","2":"2024-01-10 13:47:49","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:47:49.125726+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:47:50.126409+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:47:50.129054+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:47:50","2":"2024-01-10 13:47:50","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:47:50","2":"2024-01-10 13:47:50","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:47:50.131453+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:47:51.133376+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:47:51.134693+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:47:51","2":"2024-01-10 13:47:51","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:47:51","2":"2024-01-10 13:47:51","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:47:51.136727+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:47:51.532937+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:47:51.533895+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:47:51.534214+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:47:51.534474+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:47:51.538937+00:00] request.INFO: Matched route "newsletters_send". {"route":"newsletters_send","route_parameters":{"_route":"newsletters_send","_controller":"App\\Controller\\NewslettersController::send","id":"1"},"request_uri":"http://localhost:8001/newsletters/send/1","method":"GET"} []
[2024-01-10T13:47:51.562967+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:47:51.565927+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ? (parameters: array{"1":"1"}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ?","params":{"1":"1"},"types":{"1":1}} []
[2024-01-10T13:47:51.571741+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":1}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":1},"types":{"1":1}} []
[2024-01-10T13:47:51.573555+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":1}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":1},"types":{"1":1}} []
[2024-01-10T13:47:51.576088+00:00] messenger.INFO: Sending message App\Message\SendNewsletterMessage with async sender using Symfony\Component\Messenger\Bridge\Doctrine\Transport\DoctrineTransport {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage","alias":"async","sender":"Symfony\\Component\\Messenger\\Bridge\\Doctrine\\Transport\\DoctrineTransport"} []
[2024-01-10T13:47:51.576561+00:00] doctrine.DEBUG: Executing statement: INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?) (parameters: array{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:1:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"default","4":"2024-01-10 13:47:51","5":"2024-01-10 13:47:51"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?)","params":{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:1:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"default","4":"2024-01-10 13:47:51","5":"2024-01-10 13:47:51"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2024-01-10T13:47:51.583672+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:47:51.583907+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:47:51.584126+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:47:51.584322+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:47:51.584527+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:47:51.584669+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:47:51.586267+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:47:51.586426+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:47:51.586689+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:47:51.586843+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:47:51.587628+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:47:51.588857+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:47:51.589308+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:47:51.592425+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:47:51.593017+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:47:51.596696+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:47:51.597258+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:47:51.600556+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:47:51.601089+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:47:51.603478+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:47:51.607901+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:47:51.608313+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:47:51.610349+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:47:51.611878+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:47:51.640863+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:47:51.641028+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:47:51.672819+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:47:51.677325+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:47:51.677460+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:47:51.677535+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:47:51.677575+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:47:51.678060+00:00] request.INFO: Matched route "newsletters_list". {"route":"newsletters_list","route_parameters":{"_route":"newsletters_list","_controller":"App\\Controller\\NewslettersController::list"},"request_uri":"http://localhost:8001/newsletters/list","method":"GET"} []
[2024-01-10T13:47:51.680960+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:47:51.681656+00:00] doctrine.DEBUG: Executing query: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0"} []
[2024-01-10T13:47:51.684214+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":1}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":1},"types":{"1":1}} []
[2024-01-10T13:47:51.685187+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":1}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":1},"types":{"1":1}} []
[2024-01-10T13:47:51.686598+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:47:51.686688+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:47:51.686766+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:47:51.686846+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:47:51.686922+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:47:51.686995+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:47:51.687619+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:47:51.687708+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:47:51.687802+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:47:51.687883+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:47:51.688264+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:47:51.688635+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:47:51.688884+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:47:51.689886+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:47:51.690054+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:47:51.691357+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:47:51.691533+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:47:51.692863+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:47:51.693055+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:47:51.694114+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:47:51.695677+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:47:51.695880+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:47:51.697092+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:47:51.697866+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:47:51.713911+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:47:51.714034+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:47:51.736726+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:47:51.769050+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:47:51.769369+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:47:51.769569+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:47:51.769740+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:47:51.770762+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"76d7e5"},"request_uri":"http://localhost:8001/_wdt/76d7e5","method":"GET"} []
[2024-01-10T13:47:51.771939+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:47:51.772176+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:47:51.772373+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:47:51.772560+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:47:51.772735+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:47:51.772927+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:47:51.774451+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:47:51.774657+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:47:51.774876+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:47:51.775089+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:47:52.139005+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:47:52.140303+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:47:52","2":"2024-01-10 13:47:52","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:47:52","2":"2024-01-10 13:47:52","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:47:52.142797+00:00] doctrine.DEBUG: Executing statement: UPDATE messenger_messages SET delivered_at = ? WHERE id = ? (parameters: array{"1":"2024-01-10 13:47:52","2":17}, types: array{"1":2,"2":2}) {"sql":"UPDATE messenger_messages SET delivered_at = ? WHERE id = ?","params":{"1":"2024-01-10 13:47:52","2":17},"types":{"1":2,"2":2}} []
[2024-01-10T13:47:52.145042+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:47:52.153780+00:00] messenger.INFO: Received message App\Message\SendNewsletterMessage {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage"} []
[2024-01-10T13:47:52.154719+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:47:52.157475+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ? (parameters: array{"1":1}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ?","params":{"1":1},"types":{"1":1}} []
[2024-01-10T13:47:55.165160+00:00] app.DEBUG: Email transport "Symfony\Component\Mailer\Transport\Smtp\SmtpTransport" stopping [] []
[2024-01-10T13:47:55.165866+00:00] app.DEBUG: Email transport "Symfony\Component\Mailer\Transport\Smtp\SmtpTransport" stopped [] []
[2024-01-10T13:47:55.166171+00:00] app.DEBUG: Email transport "Symfony\Component\Mailer\Transport\Smtp\SmtpTransport" starting [] []
[2024-01-10T13:47:55.271839+00:00] app.DEBUG: Email transport "Symfony\Component\Mailer\Transport\Smtp\SmtpTransport" started [] []
[2024-01-10T13:47:55.325616+00:00] messenger.INFO: Message Symfony\Component\Mailer\Messenger\SendEmailMessage handled by Symfony\Component\Mailer\Messenger\MessageHandler::__invoke {"message":{"Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage":[]},"class":"Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage","handler":"Symfony\\Component\\Mailer\\Messenger\\MessageHandler::__invoke"} []
[2024-01-10T13:47:55.326196+00:00] messenger.INFO: Message App\Message\SendNewsletterMessage handled by App\MessageHandler\SendNewsletterMessageHandler::__invoke {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage","handler":"App\\MessageHandler\\SendNewsletterMessageHandler::__invoke"} []
[2024-01-10T13:47:55.326871+00:00] messenger.INFO: App\Message\SendNewsletterMessage was handled successfully (acknowledging to transport). {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage"} []
[2024-01-10T13:47:55.327237+00:00] doctrine.DEBUG: Executing statement: DELETE FROM messenger_messages WHERE id = ? (parameters: array{"1":"17"}, types: array{"1":2}) {"sql":"DELETE FROM messenger_messages WHERE id = ?","params":{"1":"17"},"types":{"1":2}} []
[2024-01-10T13:47:55.335171+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:47:55.336250+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:47:55","2":"2024-01-10 13:47:55","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:47:55","2":"2024-01-10 13:47:55","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:47:55.338247+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:47:56.340128+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:47:56.341900+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:47:56","2":"2024-01-10 13:47:56","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:47:56","2":"2024-01-10 13:47:56","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:47:56.344325+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:47:57.345975+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:47:57.347267+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:47:57","2":"2024-01-10 13:47:57","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:47:57","2":"2024-01-10 13:47:57","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:47:57.349259+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:47:58.350676+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:47:58.351570+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:47:58","2":"2024-01-10 13:47:58","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:47:58","2":"2024-01-10 13:47:58","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:47:58.352926+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:47:59.353989+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:47:59.355036+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:47:59","2":"2024-01-10 13:47:59","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:47:59","2":"2024-01-10 13:47:59","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:47:59.356945+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:48:00.358540+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:48:00.359682+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:48:00","2":"2024-01-10 13:48:00","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:48:00","2":"2024-01-10 13:48:00","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:48:00.361356+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:48:01.362699+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:48:01.363994+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:48:01","2":"2024-01-10 13:48:01","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:48:01","2":"2024-01-10 13:48:01","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:48:01.366349+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:48:02.367853+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:48:02.369005+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:48:02","2":"2024-01-10 13:48:02","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:48:02","2":"2024-01-10 13:48:02","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:48:02.370934+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:48:03.372463+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:48:03.373816+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:48:03","2":"2024-01-10 13:48:03","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:48:03","2":"2024-01-10 13:48:03","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:48:03.375682+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:48:04.377446+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:48:04.378822+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:48:04","2":"2024-01-10 13:48:04","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:48:04","2":"2024-01-10 13:48:04","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:48:04.380861+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:48:05.382292+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:48:05.383773+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:48:05","2":"2024-01-10 13:48:05","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:48:05","2":"2024-01-10 13:48:05","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:48:05.386102+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:48:06.387970+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:48:06.388451+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:48:06","2":"2024-01-10 13:48:06","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:48:06","2":"2024-01-10 13:48:06","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:48:06.389134+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:48:07.389807+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:48:07.391038+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:48:07","2":"2024-01-10 13:48:07","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:48:07","2":"2024-01-10 13:48:07","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:48:07.392794+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:48:08.394109+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:48:08.395556+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:48:08","2":"2024-01-10 13:48:08","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:48:08","2":"2024-01-10 13:48:08","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:48:08.398121+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:48:09.399978+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:48:09.401339+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:48:09","2":"2024-01-10 13:48:09","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:48:09","2":"2024-01-10 13:48:09","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:48:09.403041+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:48:10.404254+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:48:10.405941+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:48:10","2":"2024-01-10 13:48:10","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:48:10","2":"2024-01-10 13:48:10","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:48:10.408353+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:48:11.410145+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:48:11.411421+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:48:11","2":"2024-01-10 13:48:11","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:48:11","2":"2024-01-10 13:48:11","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:48:11.413410+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:48:12.415745+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:48:12.417204+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:48:12","2":"2024-01-10 13:48:12","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:48:12","2":"2024-01-10 13:48:12","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:48:12.419478+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:48:13.420926+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:48:13.421228+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:48:13","2":"2024-01-10 13:48:13","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:48:13","2":"2024-01-10 13:48:13","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:48:13.421717+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:48:14.422199+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:48:14.423719+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:48:14","2":"2024-01-10 13:48:14","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:48:14","2":"2024-01-10 13:48:14","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:48:14.426260+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:48:15.428022+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:48:15.429278+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:48:15","2":"2024-01-10 13:48:15","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:48:15","2":"2024-01-10 13:48:15","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:48:15.431167+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:48:16.432560+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:48:16.433892+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:48:16","2":"2024-01-10 13:48:16","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:48:16","2":"2024-01-10 13:48:16","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:48:16.436132+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:48:17.437441+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:48:17.437792+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:48:17","2":"2024-01-10 13:48:17","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:48:17","2":"2024-01-10 13:48:17","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:48:17.438355+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:48:18.439044+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:48:18.440512+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:48:18","2":"2024-01-10 13:48:18","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:48:18","2":"2024-01-10 13:48:18","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:48:18.442498+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:48:19.444165+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:48:19.444700+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:48:19","2":"2024-01-10 13:48:19","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:48:19","2":"2024-01-10 13:48:19","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:48:19.445839+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:48:20.446652+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:48:20.448126+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:48:20","2":"2024-01-10 13:48:20","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:48:20","2":"2024-01-10 13:48:20","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:48:20.450548+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:48:21.452076+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:48:21.452483+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:48:21","2":"2024-01-10 13:48:21","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:48:21","2":"2024-01-10 13:48:21","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:48:21.452983+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:48:22.453446+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:48:22.454303+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:48:22","2":"2024-01-10 13:48:22","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:48:22","2":"2024-01-10 13:48:22","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:48:22.455681+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:48:23.456656+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:48:23.457511+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:48:23","2":"2024-01-10 13:48:23","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:48:23","2":"2024-01-10 13:48:23","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:48:23.458724+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:48:24.459628+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:48:24.460701+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:48:24","2":"2024-01-10 13:48:24","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:48:24","2":"2024-01-10 13:48:24","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:48:24.466156+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:48:25.467728+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:48:25.468688+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:48:25","2":"2024-01-10 13:48:25","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:48:25","2":"2024-01-10 13:48:25","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:48:25.469852+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:48:26.470742+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:48:26.472133+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:48:26","2":"2024-01-10 13:48:26","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:48:26","2":"2024-01-10 13:48:26","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:48:26.474221+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:48:27.475557+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:48:27.476582+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:48:27","2":"2024-01-10 13:48:27","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:48:27","2":"2024-01-10 13:48:27","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:48:27.478181+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:48:28.479794+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:48:28.480196+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:48:28","2":"2024-01-10 13:48:28","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:48:28","2":"2024-01-10 13:48:28","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:48:28.480810+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:48:29.481287+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:48:29.482478+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:48:29","2":"2024-01-10 13:48:29","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:48:29","2":"2024-01-10 13:48:29","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:48:29.485233+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:48:30.486696+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:48:30.487550+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:48:30","2":"2024-01-10 13:48:30","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:48:30","2":"2024-01-10 13:48:30","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:48:30.488879+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:48:31.489797+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:48:31.491071+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:48:31","2":"2024-01-10 13:48:31","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:48:31","2":"2024-01-10 13:48:31","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:48:31.492804+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:48:32.494055+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:48:32.494943+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:48:32","2":"2024-01-10 13:48:32","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:48:32","2":"2024-01-10 13:48:32","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:48:32.496409+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:48:33.497563+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:48:33.499099+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:48:33","2":"2024-01-10 13:48:33","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:48:33","2":"2024-01-10 13:48:33","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:48:33.501787+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:48:34.504520+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:48:34.506003+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:48:34","2":"2024-01-10 13:48:34","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:48:34","2":"2024-01-10 13:48:34","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:48:34.507971+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:48:35.509489+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:48:35.510573+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:48:35","2":"2024-01-10 13:48:35","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:48:35","2":"2024-01-10 13:48:35","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:48:35.512115+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:48:36.513319+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:48:36.514856+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:48:36","2":"2024-01-10 13:48:36","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:48:36","2":"2024-01-10 13:48:36","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:48:36.516969+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:48:37.518324+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:48:37.519793+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:48:37","2":"2024-01-10 13:48:37","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:48:37","2":"2024-01-10 13:48:37","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:48:37.522211+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:48:38.523713+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:48:38.525283+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:48:38","2":"2024-01-10 13:48:38","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:48:38","2":"2024-01-10 13:48:38","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:48:38.527594+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:48:39.529531+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:48:39.530220+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:48:39","2":"2024-01-10 13:48:39","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:48:39","2":"2024-01-10 13:48:39","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:48:39.530718+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:48:40.531232+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:48:40.532402+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:48:40","2":"2024-01-10 13:48:40","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:48:40","2":"2024-01-10 13:48:40","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:48:40.534080+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:48:41.535214+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:48:41.536054+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:48:41","2":"2024-01-10 13:48:41","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:48:41","2":"2024-01-10 13:48:41","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:48:41.537401+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:48:42.538457+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:48:42.539386+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:48:42","2":"2024-01-10 13:48:42","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:48:42","2":"2024-01-10 13:48:42","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:48:42.540775+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:48:43.542208+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:48:43.543224+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:48:43","2":"2024-01-10 13:48:43","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:48:43","2":"2024-01-10 13:48:43","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:48:43.544717+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:48:44.545813+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:48:44.547320+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:48:44","2":"2024-01-10 13:48:44","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:48:44","2":"2024-01-10 13:48:44","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:48:44.549162+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:48:45.550529+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:48:45.550985+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:48:45","2":"2024-01-10 13:48:45","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:48:45","2":"2024-01-10 13:48:45","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:48:45.551574+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:48:46.552197+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:48:46.553030+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:48:46","2":"2024-01-10 13:48:46","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:48:46","2":"2024-01-10 13:48:46","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:48:46.554560+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:48:47.555474+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:48:47.556230+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:48:47","2":"2024-01-10 13:48:47","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:48:47","2":"2024-01-10 13:48:47","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:48:47.557522+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:48:48.558345+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:48:48.559070+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:48:48","2":"2024-01-10 13:48:48","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:48:48","2":"2024-01-10 13:48:48","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:48:48.560189+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:48:49.561045+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:48:49.561564+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:48:49","2":"2024-01-10 13:48:49","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:48:49","2":"2024-01-10 13:48:49","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:48:49.562457+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:48:50.563276+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:48:50.566786+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:48:50","2":"2024-01-10 13:48:50","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:48:50","2":"2024-01-10 13:48:50","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:48:50.570560+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:48:51.572521+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:48:51.574837+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:48:51","2":"2024-01-10 13:48:51","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:48:51","2":"2024-01-10 13:48:51","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:48:51.576579+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:48:52.577794+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:48:52.579107+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:48:52","2":"2024-01-10 13:48:52","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:48:52","2":"2024-01-10 13:48:52","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:48:52.581381+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:48:53.583044+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:48:53.583993+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:48:53","2":"2024-01-10 13:48:53","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:48:53","2":"2024-01-10 13:48:53","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:48:53.585454+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:48:54.586796+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:48:54.587826+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:48:54","2":"2024-01-10 13:48:54","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:48:54","2":"2024-01-10 13:48:54","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:48:54.589360+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:48:55.590591+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:48:55.591506+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:48:55","2":"2024-01-10 13:48:55","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:48:55","2":"2024-01-10 13:48:55","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:48:55.593110+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:48:56.594177+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:48:56.595112+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:48:56","2":"2024-01-10 13:48:56","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:48:56","2":"2024-01-10 13:48:56","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:48:56.596891+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:48:57.598223+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:48:57.599844+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:48:57","2":"2024-01-10 13:48:57","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:48:57","2":"2024-01-10 13:48:57","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:48:57.602926+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:48:58.605215+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:48:58.606674+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:48:58","2":"2024-01-10 13:48:58","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:48:58","2":"2024-01-10 13:48:58","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:48:58.609021+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:48:59.610307+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:48:59.612186+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:48:59","2":"2024-01-10 13:48:59","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:48:59","2":"2024-01-10 13:48:59","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:48:59.614073+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:49:00.615472+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:49:00.616014+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:49:00","2":"2024-01-10 13:49:00","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:49:00","2":"2024-01-10 13:49:00","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:49:00.616838+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:49:01.617566+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:49:01.619175+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:49:01","2":"2024-01-10 13:49:01","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:49:01","2":"2024-01-10 13:49:01","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:49:01.621375+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:49:02.623492+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:49:02.625205+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:49:02","2":"2024-01-10 13:49:02","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:49:02","2":"2024-01-10 13:49:02","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:49:02.626959+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:49:03.628223+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:49:03.629078+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:49:03","2":"2024-01-10 13:49:03","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:49:03","2":"2024-01-10 13:49:03","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:49:03.630224+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:49:04.631158+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:49:04.632317+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:49:04","2":"2024-01-10 13:49:04","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:49:04","2":"2024-01-10 13:49:04","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:49:04.633957+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:49:05.635071+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:49:05.636142+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:49:05","2":"2024-01-10 13:49:05","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:49:05","2":"2024-01-10 13:49:05","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:49:05.637678+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:49:06.639135+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:49:06.640502+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:49:06","2":"2024-01-10 13:49:06","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:49:06","2":"2024-01-10 13:49:06","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:49:06.643104+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:49:07.644903+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:49:07.646348+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:49:07","2":"2024-01-10 13:49:07","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:49:07","2":"2024-01-10 13:49:07","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:49:07.648737+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:49:08.650848+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:49:08.652210+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:49:08","2":"2024-01-10 13:49:08","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:49:08","2":"2024-01-10 13:49:08","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:49:08.654278+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:49:09.656310+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:49:09.657608+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:49:09","2":"2024-01-10 13:49:09","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:49:09","2":"2024-01-10 13:49:09","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:49:09.659004+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:49:10.660081+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:49:10.661252+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:49:10","2":"2024-01-10 13:49:10","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:49:10","2":"2024-01-10 13:49:10","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:49:10.663026+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:49:11.664444+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:49:11.666028+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:49:11","2":"2024-01-10 13:49:11","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:49:11","2":"2024-01-10 13:49:11","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:49:11.668713+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:49:12.670521+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:49:12.671588+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:49:12","2":"2024-01-10 13:49:12","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:49:12","2":"2024-01-10 13:49:12","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:49:12.673232+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:49:13.674388+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:49:13.675332+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:49:13","2":"2024-01-10 13:49:13","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:49:13","2":"2024-01-10 13:49:13","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:49:13.676615+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:49:14.677632+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:49:14.679128+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:49:14","2":"2024-01-10 13:49:14","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:49:14","2":"2024-01-10 13:49:14","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:49:14.681676+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:49:15.683330+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:49:15.684285+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:49:15","2":"2024-01-10 13:49:15","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:49:15","2":"2024-01-10 13:49:15","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:49:15.686002+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:49:16.687337+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:49:16.688532+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:49:16","2":"2024-01-10 13:49:16","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:49:16","2":"2024-01-10 13:49:16","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:49:16.691253+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:49:17.692732+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:49:17.693954+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:49:17","2":"2024-01-10 13:49:17","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:49:17","2":"2024-01-10 13:49:17","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:49:17.695782+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:49:18.697147+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:49:18.697824+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:49:18","2":"2024-01-10 13:49:18","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:49:18","2":"2024-01-10 13:49:18","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:49:18.699074+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:49:19.700080+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:49:19.701218+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:49:19","2":"2024-01-10 13:49:19","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:49:19","2":"2024-01-10 13:49:19","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:49:19.702892+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:49:20.704080+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:49:20.705573+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:49:20","2":"2024-01-10 13:49:20","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:49:20","2":"2024-01-10 13:49:20","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:49:20.707881+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:49:21.709807+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:49:21.710837+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:49:21","2":"2024-01-10 13:49:21","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:49:21","2":"2024-01-10 13:49:21","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:49:21.712518+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:49:22.713944+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:49:22.715132+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:49:22","2":"2024-01-10 13:49:22","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:49:22","2":"2024-01-10 13:49:22","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:49:22.716919+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:49:23.717988+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:49:23.719134+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:49:23","2":"2024-01-10 13:49:23","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:49:23","2":"2024-01-10 13:49:23","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:49:23.720878+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:49:24.722054+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:49:24.722417+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:49:24","2":"2024-01-10 13:49:24","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:49:24","2":"2024-01-10 13:49:24","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:49:24.726927+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:49:25.727490+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:49:25.728636+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:49:25","2":"2024-01-10 13:49:25","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:49:25","2":"2024-01-10 13:49:25","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:49:25.730268+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:49:26.731442+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:49:26.732218+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:49:26","2":"2024-01-10 13:49:26","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:49:26","2":"2024-01-10 13:49:26","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:49:26.733567+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:49:27.734548+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:49:27.735313+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:49:27","2":"2024-01-10 13:49:27","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:49:27","2":"2024-01-10 13:49:27","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:49:27.736553+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:49:28.737530+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:49:28.738621+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:49:28","2":"2024-01-10 13:49:28","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:49:28","2":"2024-01-10 13:49:28","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:49:28.740136+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:49:29.741487+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:49:29.742226+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:49:29","2":"2024-01-10 13:49:29","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:49:29","2":"2024-01-10 13:49:29","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:49:29.743287+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:49:30.744455+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:49:30.745747+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:49:30","2":"2024-01-10 13:49:30","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:49:30","2":"2024-01-10 13:49:30","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:49:30.747580+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:49:31.748968+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:49:31.750411+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:49:31","2":"2024-01-10 13:49:31","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:49:31","2":"2024-01-10 13:49:31","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:49:31.752777+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:49:32.754107+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:49:32.755383+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:49:32","2":"2024-01-10 13:49:32","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:49:32","2":"2024-01-10 13:49:32","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:49:32.757342+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:49:33.758678+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:49:33.759557+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:49:33","2":"2024-01-10 13:49:33","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:49:33","2":"2024-01-10 13:49:33","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:49:33.761265+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:49:34.762838+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:49:34.764052+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:49:34","2":"2024-01-10 13:49:34","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:49:34","2":"2024-01-10 13:49:34","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:49:34.765794+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:49:35.767071+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:49:35.769046+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:49:35","2":"2024-01-10 13:49:35","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:49:35","2":"2024-01-10 13:49:35","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:49:35.771249+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:49:36.772592+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:49:36.773166+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:49:36","2":"2024-01-10 13:49:36","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:49:36","2":"2024-01-10 13:49:36","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:49:36.773919+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:49:37.774517+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:49:37.775455+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:49:37","2":"2024-01-10 13:49:37","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:49:37","2":"2024-01-10 13:49:37","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:49:37.776972+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:49:38.777936+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:49:38.778663+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:49:38","2":"2024-01-10 13:49:38","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:49:38","2":"2024-01-10 13:49:38","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:49:38.780085+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:49:39.781216+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:49:39.781583+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:49:39","2":"2024-01-10 13:49:39","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:49:39","2":"2024-01-10 13:49:39","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:49:39.782149+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:49:40.782702+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:49:40.783922+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:49:40","2":"2024-01-10 13:49:40","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:49:40","2":"2024-01-10 13:49:40","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:49:40.787788+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:49:41.790305+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:49:41.791608+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:49:41","2":"2024-01-10 13:49:41","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:49:41","2":"2024-01-10 13:49:41","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:49:41.793746+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:49:42.795277+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:49:42.796545+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:49:42","2":"2024-01-10 13:49:42","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:49:42","2":"2024-01-10 13:49:42","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:49:42.798966+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:49:43.800668+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:49:43.802044+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:49:43","2":"2024-01-10 13:49:43","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:49:43","2":"2024-01-10 13:49:43","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:49:43.804506+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:49:44.806020+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:49:44.807548+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:49:44","2":"2024-01-10 13:49:44","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:49:44","2":"2024-01-10 13:49:44","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:49:44.810152+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:49:45.811436+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:49:45.812682+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:49:45","2":"2024-01-10 13:49:45","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:49:45","2":"2024-01-10 13:49:45","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:49:45.814804+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:49:46.816345+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:49:46.817385+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:49:46","2":"2024-01-10 13:49:46","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:49:46","2":"2024-01-10 13:49:46","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:49:46.818680+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:49:47.819620+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:49:47.820523+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:49:47","2":"2024-01-10 13:49:47","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:49:47","2":"2024-01-10 13:49:47","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:49:47.822053+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:49:48.823201+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:49:48.823881+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:49:48","2":"2024-01-10 13:49:48","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:49:48","2":"2024-01-10 13:49:48","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:49:48.825049+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:49:49.826010+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:49:49.827690+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:49:49","2":"2024-01-10 13:49:49","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:49:49","2":"2024-01-10 13:49:49","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:49:49.830028+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:49:50.832087+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:49:50.833389+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:49:50","2":"2024-01-10 13:49:50","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:49:50","2":"2024-01-10 13:49:50","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:49:50.835223+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:49:51.836749+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:49:51.838360+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:49:51","2":"2024-01-10 13:49:51","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:49:51","2":"2024-01-10 13:49:51","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:49:51.841483+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:49:52.843648+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:49:52.845449+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:49:52","2":"2024-01-10 13:49:52","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:49:52","2":"2024-01-10 13:49:52","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:49:52.850090+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:49:53.853315+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:49:53.854866+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:49:53","2":"2024-01-10 13:49:53","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:49:53","2":"2024-01-10 13:49:53","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:49:53.857868+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:49:53.895036+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:49:53.896079+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:49:53.897160+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:49:53.897639+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:49:53.904687+00:00] request.INFO: Matched route "newsletters_send". {"route":"newsletters_send","route_parameters":{"_route":"newsletters_send","_controller":"App\\Controller\\NewslettersController::send","id":"1"},"request_uri":"http://localhost:8001/newsletters/send/1","method":"GET"} []
[2024-01-10T13:49:53.924748+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:49:53.926949+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ? (parameters: array{"1":"1"}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ?","params":{"1":"1"},"types":{"1":1}} []
[2024-01-10T13:49:53.933813+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":1}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":1},"types":{"1":1}} []
[2024-01-10T13:49:53.936503+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":1}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":1},"types":{"1":1}} []
[2024-01-10T13:49:53.940150+00:00] messenger.INFO: Sending message App\Message\SendNewsletterMessage with async sender using Symfony\Component\Messenger\Bridge\Doctrine\Transport\DoctrineTransport {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage","alias":"async","sender":"Symfony\\Component\\Messenger\\Bridge\\Doctrine\\Transport\\DoctrineTransport"} []
[2024-01-10T13:49:53.940975+00:00] doctrine.DEBUG: Executing statement: INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?) (parameters: array{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:1:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"default","4":"2024-01-10 13:49:53","5":"2024-01-10 13:49:53"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?)","params":{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:1:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"default","4":"2024-01-10 13:49:53","5":"2024-01-10 13:49:53"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2024-01-10T13:49:53.950813+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:49:53.951151+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:49:53.951420+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:49:53.951704+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:49:53.951952+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:49:53.952152+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:49:53.954279+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:49:53.954473+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:49:53.954787+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:49:53.954951+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:49:53.955971+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:49:53.957650+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:49:53.958327+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:49:53.961523+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:49:53.962205+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:49:53.965738+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:49:53.966315+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:49:53.969585+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:49:53.970259+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:49:53.973751+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:49:53.979022+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:49:53.979702+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:49:53.983649+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:49:53.986849+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:49:54.026410+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:49:54.026747+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:49:54.059056+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:49:54.063829+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:49:54.064034+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:49:54.064108+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:49:54.064167+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:49:54.064887+00:00] request.INFO: Matched route "newsletters_list". {"route":"newsletters_list","route_parameters":{"_route":"newsletters_list","_controller":"App\\Controller\\NewslettersController::list"},"request_uri":"http://localhost:8001/newsletters/list","method":"GET"} []
[2024-01-10T13:49:54.068569+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:49:54.069583+00:00] doctrine.DEBUG: Executing query: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0"} []
[2024-01-10T13:49:54.071508+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":1}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":1},"types":{"1":1}} []
[2024-01-10T13:49:54.072723+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":1}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":1},"types":{"1":1}} []
[2024-01-10T13:49:54.074500+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:49:54.074625+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:49:54.074711+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:49:54.074793+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:49:54.074862+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:49:54.074928+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:49:54.075538+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:49:54.075625+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:49:54.075708+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:49:54.075790+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:49:54.076134+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:49:54.076635+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:49:54.076875+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:49:54.078288+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:49:54.078489+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:49:54.079806+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:49:54.079990+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:49:54.081018+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:49:54.081207+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:49:54.082636+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:49:54.085215+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:49:54.085464+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:49:54.086704+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:49:54.087579+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:49:54.104347+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:49:54.104501+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:49:54.126229+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:49:54.147800+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:49:54.147986+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:49:54.148052+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:49:54.148106+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:49:54.148847+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"1ac0de"},"request_uri":"http://localhost:8001/_wdt/1ac0de","method":"GET"} []
[2024-01-10T13:49:54.150184+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:49:54.150398+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:49:54.150493+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:49:54.151258+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:49:54.151402+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:49:54.151611+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:49:54.154968+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:49:54.155219+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:49:54.155541+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:49:54.155611+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:49:54.860601+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:49:54.862012+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:49:54","2":"2024-01-10 13:49:54","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:49:54","2":"2024-01-10 13:49:54","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:49:54.863730+00:00] doctrine.DEBUG: Executing statement: UPDATE messenger_messages SET delivered_at = ? WHERE id = ? (parameters: array{"1":"2024-01-10 13:49:54","2":18}, types: array{"1":2,"2":2}) {"sql":"UPDATE messenger_messages SET delivered_at = ? WHERE id = ?","params":{"1":"2024-01-10 13:49:54","2":18},"types":{"1":2,"2":2}} []
[2024-01-10T13:49:54.865143+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:49:54.873046+00:00] messenger.INFO: Received message App\Message\SendNewsletterMessage {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage"} []
[2024-01-10T13:49:54.873633+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:49:54.875078+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ? (parameters: array{"1":1}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ?","params":{"1":1},"types":{"1":1}} []
[2024-01-10T13:49:57.880049+00:00] app.DEBUG: Email transport "Symfony\Component\Mailer\Transport\Smtp\SmtpTransport" stopping [] []
[2024-01-10T13:49:57.880625+00:00] app.DEBUG: Email transport "Symfony\Component\Mailer\Transport\Smtp\SmtpTransport" stopped [] []
[2024-01-10T13:49:57.880851+00:00] app.DEBUG: Email transport "Symfony\Component\Mailer\Transport\Smtp\SmtpTransport" starting [] []
[2024-01-10T13:49:57.985340+00:00] app.DEBUG: Email transport "Symfony\Component\Mailer\Transport\Smtp\SmtpTransport" started [] []
[2024-01-10T13:49:58.029728+00:00] messenger.INFO: Message Symfony\Component\Mailer\Messenger\SendEmailMessage handled by Symfony\Component\Mailer\Messenger\MessageHandler::__invoke {"message":{"Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage":[]},"class":"Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage","handler":"Symfony\\Component\\Mailer\\Messenger\\MessageHandler::__invoke"} []
[2024-01-10T13:49:58.030311+00:00] messenger.INFO: Message App\Message\SendNewsletterMessage handled by App\MessageHandler\SendNewsletterMessageHandler::__invoke {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage","handler":"App\\MessageHandler\\SendNewsletterMessageHandler::__invoke"} []
[2024-01-10T13:49:58.030984+00:00] messenger.INFO: App\Message\SendNewsletterMessage was handled successfully (acknowledging to transport). {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage"} []
[2024-01-10T13:49:58.031370+00:00] doctrine.DEBUG: Executing statement: DELETE FROM messenger_messages WHERE id = ? (parameters: array{"1":"18"}, types: array{"1":2}) {"sql":"DELETE FROM messenger_messages WHERE id = ?","params":{"1":"18"},"types":{"1":2}} []
[2024-01-10T13:49:58.039478+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:49:58.040779+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:49:58","2":"2024-01-10 13:49:58","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:49:58","2":"2024-01-10 13:49:58","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:49:58.043232+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:49:59.044686+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:49:59.045950+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:49:59","2":"2024-01-10 13:49:59","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:49:59","2":"2024-01-10 13:49:59","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:49:59.048084+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:50:00.050436+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:50:00.051760+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:50:00","2":"2024-01-10 13:50:00","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:50:00","2":"2024-01-10 13:50:00","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:50:00.054043+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:50:01.055664+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:50:01.057447+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:50:01","2":"2024-01-10 13:50:01","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:50:01","2":"2024-01-10 13:50:01","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:50:01.058999+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:50:02.060347+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:50:02.061233+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:50:02","2":"2024-01-10 13:50:02","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:50:02","2":"2024-01-10 13:50:02","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:50:02.062558+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:50:03.063609+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:50:03.064876+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:50:03","2":"2024-01-10 13:50:03","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:50:03","2":"2024-01-10 13:50:03","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:50:03.066789+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:50:04.068483+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:50:04.070205+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:50:04","2":"2024-01-10 13:50:04","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:50:04","2":"2024-01-10 13:50:04","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:50:04.072235+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:50:05.074697+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:50:05.076177+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:50:05","2":"2024-01-10 13:50:05","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:50:05","2":"2024-01-10 13:50:05","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:50:05.079276+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:50:06.081015+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:50:06.081960+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:50:06","2":"2024-01-10 13:50:06","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:50:06","2":"2024-01-10 13:50:06","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:50:06.083553+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:50:07.084999+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:50:07.085667+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:50:07","2":"2024-01-10 13:50:07","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:50:07","2":"2024-01-10 13:50:07","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:50:07.086912+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:50:08.087802+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:50:08.088853+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:50:08","2":"2024-01-10 13:50:08","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:50:08","2":"2024-01-10 13:50:08","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:50:08.090163+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:50:09.091643+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:50:09.093049+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:50:09","2":"2024-01-10 13:50:09","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:50:09","2":"2024-01-10 13:50:09","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:50:09.094952+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:50:10.096400+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:50:10.097730+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:50:10","2":"2024-01-10 13:50:10","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:50:10","2":"2024-01-10 13:50:10","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:50:10.099501+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:50:11.101048+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:50:11.102562+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:50:11","2":"2024-01-10 13:50:11","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:50:11","2":"2024-01-10 13:50:11","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:50:11.104575+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:50:12.106251+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:50:12.107693+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:50:12","2":"2024-01-10 13:50:12","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:50:12","2":"2024-01-10 13:50:12","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:50:12.109655+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:50:13.111103+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:50:13.112611+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:50:13","2":"2024-01-10 13:50:13","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:50:13","2":"2024-01-10 13:50:13","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:50:13.113778+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:50:14.114720+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:50:14.115174+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:50:14","2":"2024-01-10 13:50:14","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:50:14","2":"2024-01-10 13:50:14","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:50:14.115759+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:50:15.116355+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:50:15.118008+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:50:15","2":"2024-01-10 13:50:15","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:50:15","2":"2024-01-10 13:50:15","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:50:15.120583+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:50:16.122559+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:50:16.122899+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:50:16","2":"2024-01-10 13:50:16","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:50:16","2":"2024-01-10 13:50:16","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:50:16.123367+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:50:17.124133+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:50:17.125715+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:50:17","2":"2024-01-10 13:50:17","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:50:17","2":"2024-01-10 13:50:17","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:50:17.127631+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:50:18.129132+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:50:18.130248+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:50:18","2":"2024-01-10 13:50:18","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:50:18","2":"2024-01-10 13:50:18","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:50:18.131840+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:50:19.132957+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:50:19.134264+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:50:19","2":"2024-01-10 13:50:19","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:50:19","2":"2024-01-10 13:50:19","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:50:19.136854+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:50:20.138410+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:50:20.139626+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:50:20","2":"2024-01-10 13:50:20","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:50:20","2":"2024-01-10 13:50:20","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:50:20.141672+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:50:21.143279+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:50:21.144881+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:50:21","2":"2024-01-10 13:50:21","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:50:21","2":"2024-01-10 13:50:21","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:50:21.146832+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:50:22.148604+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:50:22.149919+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:50:22","2":"2024-01-10 13:50:22","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:50:22","2":"2024-01-10 13:50:22","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:50:22.151865+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:50:23.153331+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:50:23.154665+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:50:23","2":"2024-01-10 13:50:23","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:50:23","2":"2024-01-10 13:50:23","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:50:23.157342+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:50:24.158695+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:50:24.160180+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:50:24","2":"2024-01-10 13:50:24","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:50:24","2":"2024-01-10 13:50:24","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:50:24.162258+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:50:25.163553+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:50:25.164581+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:50:25","2":"2024-01-10 13:50:25","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:50:25","2":"2024-01-10 13:50:25","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:50:25.166938+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:50:26.168580+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:50:26.169927+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:50:26","2":"2024-01-10 13:50:26","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:50:26","2":"2024-01-10 13:50:26","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:50:26.171574+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:50:27.172938+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:50:27.174193+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:50:27","2":"2024-01-10 13:50:27","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:50:27","2":"2024-01-10 13:50:27","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:50:27.176509+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:50:28.177877+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:50:28.179314+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:50:28","2":"2024-01-10 13:50:28","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:50:28","2":"2024-01-10 13:50:28","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:50:28.182706+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:50:29.184517+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:50:29.185838+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:50:29","2":"2024-01-10 13:50:29","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:50:29","2":"2024-01-10 13:50:29","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:50:29.188244+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:50:30.189847+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:50:30.191122+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:50:30","2":"2024-01-10 13:50:30","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:50:30","2":"2024-01-10 13:50:30","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:50:30.193444+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:50:31.195461+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:50:31.197147+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:50:31","2":"2024-01-10 13:50:31","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:50:31","2":"2024-01-10 13:50:31","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:50:31.199643+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:50:32.201197+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:50:32.202383+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:50:32","2":"2024-01-10 13:50:32","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:50:32","2":"2024-01-10 13:50:32","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:50:32.204809+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:50:33.206298+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:50:33.206632+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:50:33","2":"2024-01-10 13:50:33","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:50:33","2":"2024-01-10 13:50:33","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:50:33.207158+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:50:34.207738+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:50:34.209334+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:50:34","2":"2024-01-10 13:50:34","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:50:34","2":"2024-01-10 13:50:34","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:50:34.211863+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:50:35.214740+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:50:35.216079+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:50:35","2":"2024-01-10 13:50:35","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:50:35","2":"2024-01-10 13:50:35","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:50:35.218182+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:50:36.219528+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:50:36.220687+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:50:36","2":"2024-01-10 13:50:36","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:50:36","2":"2024-01-10 13:50:36","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:50:36.222195+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:50:37.223416+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:50:37.225049+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:50:37","2":"2024-01-10 13:50:37","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:50:37","2":"2024-01-10 13:50:37","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:50:37.227182+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:50:38.229100+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:50:38.230218+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:50:38","2":"2024-01-10 13:50:38","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:50:38","2":"2024-01-10 13:50:38","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:50:38.233053+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:50:39.234466+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:50:39.235501+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:50:39","2":"2024-01-10 13:50:39","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:50:39","2":"2024-01-10 13:50:39","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:50:39.237107+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:50:40.238285+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:50:40.239260+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:50:40","2":"2024-01-10 13:50:40","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:50:40","2":"2024-01-10 13:50:40","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:50:40.240809+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:50:41.242019+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:50:41.243278+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:50:41","2":"2024-01-10 13:50:41","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:50:41","2":"2024-01-10 13:50:41","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:50:41.245607+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:50:42.247336+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:50:42.248758+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:50:42","2":"2024-01-10 13:50:42","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:50:42","2":"2024-01-10 13:50:42","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:50:42.251049+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:50:43.252415+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:50:43.253652+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:50:43","2":"2024-01-10 13:50:43","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:50:43","2":"2024-01-10 13:50:43","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:50:43.255455+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:50:44.256598+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:50:44.257528+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:50:44","2":"2024-01-10 13:50:44","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:50:44","2":"2024-01-10 13:50:44","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:50:44.258945+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:50:45.260120+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:50:45.261217+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:50:45","2":"2024-01-10 13:50:45","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:50:45","2":"2024-01-10 13:50:45","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:50:45.262841+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:50:46.264299+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:50:46.265354+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:50:46","2":"2024-01-10 13:50:46","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:50:46","2":"2024-01-10 13:50:46","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:50:46.266842+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:50:47.267805+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:50:47.269408+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:50:47","2":"2024-01-10 13:50:47","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:50:47","2":"2024-01-10 13:50:47","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:50:47.271439+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:50:48.272835+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:50:48.273655+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:50:48","2":"2024-01-10 13:50:48","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:50:48","2":"2024-01-10 13:50:48","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:50:48.274987+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:50:49.276021+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:50:49.277208+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:50:49","2":"2024-01-10 13:50:49","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:50:49","2":"2024-01-10 13:50:49","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:50:49.278901+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:50:50.280079+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:50:50.281200+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:50:50","2":"2024-01-10 13:50:50","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:50:50","2":"2024-01-10 13:50:50","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:50:50.282823+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:50:51.284201+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:50:51.285583+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:50:51","2":"2024-01-10 13:50:51","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:50:51","2":"2024-01-10 13:50:51","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:50:51.287565+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:50:52.289341+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:50:52.290754+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:50:52","2":"2024-01-10 13:50:52","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:50:52","2":"2024-01-10 13:50:52","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:50:52.294463+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:50:53.296476+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:50:53.297577+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:50:53","2":"2024-01-10 13:50:53","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:50:53","2":"2024-01-10 13:50:53","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:50:53.299504+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:50:54.301150+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:50:54.302515+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:50:54","2":"2024-01-10 13:50:54","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:50:54","2":"2024-01-10 13:50:54","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:50:54.304758+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:50:55.306372+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:50:55.307739+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:50:55","2":"2024-01-10 13:50:55","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:50:55","2":"2024-01-10 13:50:55","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:50:55.310340+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:50:56.312217+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:50:56.313343+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:50:56","2":"2024-01-10 13:50:56","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:50:56","2":"2024-01-10 13:50:56","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:50:56.314931+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:50:57.316486+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:50:57.317508+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:50:57","2":"2024-01-10 13:50:57","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:50:57","2":"2024-01-10 13:50:57","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:50:57.319120+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:50:58.320266+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:50:58.321731+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:50:58","2":"2024-01-10 13:50:58","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:50:58","2":"2024-01-10 13:50:58","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:50:58.323685+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:50:59.325294+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:50:59.327267+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:50:59","2":"2024-01-10 13:50:59","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:50:59","2":"2024-01-10 13:50:59","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:50:59.329181+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:51:00.330610+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:51:00.331785+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:51:00","2":"2024-01-10 13:51:00","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:51:00","2":"2024-01-10 13:51:00","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:51:00.333527+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:51:01.334673+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:51:01.335092+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:51:01","2":"2024-01-10 13:51:01","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:51:01","2":"2024-01-10 13:51:01","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:51:01.335815+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:51:02.336400+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:51:02.338441+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:51:02","2":"2024-01-10 13:51:02","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:51:02","2":"2024-01-10 13:51:02","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:51:02.340062+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:51:03.341309+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:51:03.342357+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:51:03","2":"2024-01-10 13:51:03","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:51:03","2":"2024-01-10 13:51:03","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:51:03.343931+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:51:04.345164+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:51:04.346561+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:51:04","2":"2024-01-10 13:51:04","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:51:04","2":"2024-01-10 13:51:04","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:51:04.348038+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:51:05.349017+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:51:05.350062+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:51:05","2":"2024-01-10 13:51:05","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:51:05","2":"2024-01-10 13:51:05","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:51:05.351747+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:51:06.352922+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:51:06.353817+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:51:06","2":"2024-01-10 13:51:06","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:51:06","2":"2024-01-10 13:51:06","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:51:06.355134+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:51:07.356477+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:51:07.357774+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:51:07","2":"2024-01-10 13:51:07","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:51:07","2":"2024-01-10 13:51:07","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:51:07.359698+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:51:08.361069+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:51:08.361833+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:51:08","2":"2024-01-10 13:51:08","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:51:08","2":"2024-01-10 13:51:08","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:51:08.363259+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:51:09.364515+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:51:09.365819+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:51:09","2":"2024-01-10 13:51:09","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:51:09","2":"2024-01-10 13:51:09","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:51:09.367873+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:51:10.369448+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:51:10.370516+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:51:10","2":"2024-01-10 13:51:10","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:51:10","2":"2024-01-10 13:51:10","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:51:10.372038+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:51:11.373513+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:51:11.374561+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:51:11","2":"2024-01-10 13:51:11","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:51:11","2":"2024-01-10 13:51:11","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:51:11.376104+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:51:12.377382+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:51:12.378592+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:51:12","2":"2024-01-10 13:51:12","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:51:12","2":"2024-01-10 13:51:12","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:51:12.380561+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:51:13.381875+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:51:13.382669+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:51:13","2":"2024-01-10 13:51:13","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:51:13","2":"2024-01-10 13:51:13","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:51:13.383897+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:51:14.384944+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:51:14.385441+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:51:14","2":"2024-01-10 13:51:14","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:51:14","2":"2024-01-10 13:51:14","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:51:14.386141+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:51:15.386767+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:51:15.387981+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:51:15","2":"2024-01-10 13:51:15","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:51:15","2":"2024-01-10 13:51:15","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:51:15.389776+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:51:16.391090+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:51:16.392103+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:51:16","2":"2024-01-10 13:51:16","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:51:16","2":"2024-01-10 13:51:16","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:51:16.393777+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:51:17.395049+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:51:17.395923+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:51:17","2":"2024-01-10 13:51:17","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:51:17","2":"2024-01-10 13:51:17","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:51:17.397418+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:51:18.398794+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:51:18.399713+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:51:18","2":"2024-01-10 13:51:18","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:51:18","2":"2024-01-10 13:51:18","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:51:18.401257+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:51:19.402432+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:51:19.404165+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:51:19","2":"2024-01-10 13:51:19","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:51:19","2":"2024-01-10 13:51:19","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:51:19.406166+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:51:20.407801+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:51:20.409323+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:51:20","2":"2024-01-10 13:51:20","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:51:20","2":"2024-01-10 13:51:20","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:51:20.411905+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:51:21.414042+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:51:21.415335+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:51:21","2":"2024-01-10 13:51:21","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:51:21","2":"2024-01-10 13:51:21","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:51:21.417610+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:51:22.419235+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:51:22.420714+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:51:22","2":"2024-01-10 13:51:22","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:51:22","2":"2024-01-10 13:51:22","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:51:22.422674+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:51:23.424153+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:51:23.425144+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:51:23","2":"2024-01-10 13:51:23","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:51:23","2":"2024-01-10 13:51:23","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:51:23.426525+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:51:24.427857+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:51:24.428823+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:51:24","2":"2024-01-10 13:51:24","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:51:24","2":"2024-01-10 13:51:24","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:51:24.430251+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:51:25.431472+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:51:25.432605+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:51:25","2":"2024-01-10 13:51:25","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:51:25","2":"2024-01-10 13:51:25","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:51:25.434246+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:51:26.435566+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:51:26.437317+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:51:26","2":"2024-01-10 13:51:26","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:51:26","2":"2024-01-10 13:51:26","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:51:26.439066+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:51:27.440289+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:51:27.441340+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:51:27","2":"2024-01-10 13:51:27","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:51:27","2":"2024-01-10 13:51:27","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:51:27.443021+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:51:28.444107+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:51:28.444955+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:51:28","2":"2024-01-10 13:51:28","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:51:28","2":"2024-01-10 13:51:28","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:51:28.446360+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:51:29.447464+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:51:29.448484+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:51:29","2":"2024-01-10 13:51:29","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:51:29","2":"2024-01-10 13:51:29","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:51:29.450001+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:51:30.451442+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:51:30.452989+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:51:30","2":"2024-01-10 13:51:30","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:51:30","2":"2024-01-10 13:51:30","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:51:30.455238+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:51:31.457464+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:51:31.458978+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:51:31","2":"2024-01-10 13:51:31","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:51:31","2":"2024-01-10 13:51:31","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:51:31.461251+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:51:32.462653+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:51:32.464026+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:51:32","2":"2024-01-10 13:51:32","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:51:32","2":"2024-01-10 13:51:32","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:51:32.466503+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:51:33.468247+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:51:33.469657+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:51:33","2":"2024-01-10 13:51:33","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:51:33","2":"2024-01-10 13:51:33","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:51:33.471584+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:51:34.473102+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:51:34.474641+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:51:34","2":"2024-01-10 13:51:34","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:51:34","2":"2024-01-10 13:51:34","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:51:34.476650+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:51:35.477998+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:51:35.478445+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:51:35","2":"2024-01-10 13:51:35","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:51:35","2":"2024-01-10 13:51:35","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:51:35.479120+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:51:36.479898+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:51:36.481433+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:51:36","2":"2024-01-10 13:51:36","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:51:36","2":"2024-01-10 13:51:36","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:51:36.483773+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:51:37.485689+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:51:37.487326+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:51:37","2":"2024-01-10 13:51:37","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:51:37","2":"2024-01-10 13:51:37","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:51:37.489851+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:51:38.491590+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:51:38.492819+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:51:38","2":"2024-01-10 13:51:38","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:51:38","2":"2024-01-10 13:51:38","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:51:38.495772+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:51:39.497534+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:51:39.498644+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:51:39","2":"2024-01-10 13:51:39","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:51:39","2":"2024-01-10 13:51:39","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:51:39.500841+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:51:39.735095+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:51:39.735673+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:51:39.735850+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:51:39.736019+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:51:39.738378+00:00] request.INFO: Matched route "newsletters_send". {"route":"newsletters_send","route_parameters":{"_route":"newsletters_send","_controller":"App\\Controller\\NewslettersController::send","id":"1"},"request_uri":"http://localhost:8001/newsletters/send/1","method":"GET"} []
[2024-01-10T13:51:39.760032+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:51:39.763696+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ? (parameters: array{"1":"1"}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ?","params":{"1":"1"},"types":{"1":1}} []
[2024-01-10T13:51:39.771286+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":1}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":1},"types":{"1":1}} []
[2024-01-10T13:51:39.773350+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":1}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":1},"types":{"1":1}} []
[2024-01-10T13:51:39.777993+00:00] messenger.INFO: Sending message App\Message\SendNewsletterMessage with async sender using Symfony\Component\Messenger\Bridge\Doctrine\Transport\DoctrineTransport {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage","alias":"async","sender":"Symfony\\Component\\Messenger\\Bridge\\Doctrine\\Transport\\DoctrineTransport"} []
[2024-01-10T13:51:39.778821+00:00] doctrine.DEBUG: Executing statement: INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?) (parameters: array{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:1:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"default","4":"2024-01-10 13:51:39","5":"2024-01-10 13:51:39"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?)","params":{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:1:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"default","4":"2024-01-10 13:51:39","5":"2024-01-10 13:51:39"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2024-01-10T13:51:39.787176+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:51:39.787363+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:51:39.787512+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:51:39.787671+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:51:39.787806+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:51:39.787939+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:51:39.789576+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:51:39.789737+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:51:39.790003+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:51:39.790148+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:51:39.790914+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:51:39.792458+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:51:39.793109+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:51:39.795541+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:51:39.795906+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:51:39.798000+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:51:39.798340+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:51:39.800049+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:51:39.800578+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:51:39.803072+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:51:39.806447+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:51:39.806975+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:51:39.809683+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:51:39.811452+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:51:39.834458+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:51:39.834623+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:51:39.854566+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:51:39.859116+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:51:39.859250+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:51:39.859298+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:51:39.859334+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:51:39.859947+00:00] request.INFO: Matched route "newsletters_list". {"route":"newsletters_list","route_parameters":{"_route":"newsletters_list","_controller":"App\\Controller\\NewslettersController::list"},"request_uri":"http://localhost:8001/newsletters/list","method":"GET"} []
[2024-01-10T13:51:39.862646+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:51:39.863512+00:00] doctrine.DEBUG: Executing query: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0"} []
[2024-01-10T13:51:39.865370+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":1}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":1},"types":{"1":1}} []
[2024-01-10T13:51:39.866099+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":1}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":1},"types":{"1":1}} []
[2024-01-10T13:51:39.867399+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:51:39.867478+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:51:39.867528+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:51:39.867583+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:51:39.867623+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:51:39.867661+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:51:39.868062+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:51:39.868122+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:51:39.868177+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:51:39.868228+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:51:39.868541+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:51:39.868887+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:51:39.869101+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:51:39.870393+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:51:39.870569+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:51:39.871850+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:51:39.872028+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:51:39.873364+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:51:39.873656+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:51:39.875532+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:51:39.878142+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:51:39.878404+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:51:39.879482+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:51:39.880128+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:51:39.895483+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:51:39.895653+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:51:39.919164+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:51:39.940584+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:51:39.940731+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:51:39.940785+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:51:39.940839+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:51:39.941476+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"43742c"},"request_uri":"http://localhost:8001/_wdt/43742c","method":"GET"} []
[2024-01-10T13:51:39.942610+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:51:39.942758+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:51:39.942849+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:51:39.942931+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:51:39.943031+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:51:39.943221+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:51:39.945058+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:51:39.945188+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:51:39.945284+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:51:39.945372+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:51:40.502341+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:51:40.503302+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:51:40","2":"2024-01-10 13:51:40","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:51:40","2":"2024-01-10 13:51:40","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:51:40.505204+00:00] doctrine.DEBUG: Executing statement: UPDATE messenger_messages SET delivered_at = ? WHERE id = ? (parameters: array{"1":"2024-01-10 13:51:40","2":19}, types: array{"1":2,"2":2}) {"sql":"UPDATE messenger_messages SET delivered_at = ? WHERE id = ?","params":{"1":"2024-01-10 13:51:40","2":19},"types":{"1":2,"2":2}} []
[2024-01-10T13:51:40.506931+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:51:40.514807+00:00] messenger.INFO: Received message App\Message\SendNewsletterMessage {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage"} []
[2024-01-10T13:51:40.515294+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:51:40.517584+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ? (parameters: array{"1":1}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ?","params":{"1":1},"types":{"1":1}} []
[2024-01-10T13:51:43.524842+00:00] app.DEBUG: Email transport "Symfony\Component\Mailer\Transport\Smtp\SmtpTransport" stopping [] []
[2024-01-10T13:51:43.525582+00:00] app.DEBUG: Email transport "Symfony\Component\Mailer\Transport\Smtp\SmtpTransport" stopped [] []
[2024-01-10T13:51:43.525887+00:00] app.DEBUG: Email transport "Symfony\Component\Mailer\Transport\Smtp\SmtpTransport" starting [] []
[2024-01-10T13:51:43.633079+00:00] app.DEBUG: Email transport "Symfony\Component\Mailer\Transport\Smtp\SmtpTransport" started [] []
[2024-01-10T13:51:43.681704+00:00] messenger.INFO: Message Symfony\Component\Mailer\Messenger\SendEmailMessage handled by Symfony\Component\Mailer\Messenger\MessageHandler::__invoke {"message":{"Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage":[]},"class":"Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage","handler":"Symfony\\Component\\Mailer\\Messenger\\MessageHandler::__invoke"} []
[2024-01-10T13:51:43.682260+00:00] messenger.INFO: Message App\Message\SendNewsletterMessage handled by App\MessageHandler\SendNewsletterMessageHandler::__invoke {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage","handler":"App\\MessageHandler\\SendNewsletterMessageHandler::__invoke"} []
[2024-01-10T13:51:43.683031+00:00] messenger.INFO: App\Message\SendNewsletterMessage was handled successfully (acknowledging to transport). {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage"} []
[2024-01-10T13:51:43.683422+00:00] doctrine.DEBUG: Executing statement: DELETE FROM messenger_messages WHERE id = ? (parameters: array{"1":"19"}, types: array{"1":2}) {"sql":"DELETE FROM messenger_messages WHERE id = ?","params":{"1":"19"},"types":{"1":2}} []
[2024-01-10T13:51:43.693777+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:51:43.695002+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:51:43","2":"2024-01-10 13:51:43","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:51:43","2":"2024-01-10 13:51:43","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:51:43.697156+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:51:44.698775+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:51:44.699625+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:51:44","2":"2024-01-10 13:51:44","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:51:44","2":"2024-01-10 13:51:44","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:51:44.700854+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:51:45.701850+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:51:45.702880+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:51:45","2":"2024-01-10 13:51:45","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:51:45","2":"2024-01-10 13:51:45","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:51:45.705042+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:51:46.706749+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:51:46.708502+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:51:46","2":"2024-01-10 13:51:46","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:51:46","2":"2024-01-10 13:51:46","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:51:46.710908+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:51:47.712466+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:51:47.713986+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:51:47","2":"2024-01-10 13:51:47","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:51:47","2":"2024-01-10 13:51:47","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:51:47.716176+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:51:48.718049+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:51:48.720716+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:51:48","2":"2024-01-10 13:51:48","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:51:48","2":"2024-01-10 13:51:48","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:51:48.723861+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:51:49.726586+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:51:49.728263+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:51:49","2":"2024-01-10 13:51:49","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:51:49","2":"2024-01-10 13:51:49","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:51:49.730716+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:51:50.732658+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:51:50.733796+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:51:50","2":"2024-01-10 13:51:50","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:51:50","2":"2024-01-10 13:51:50","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:51:50.735360+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:51:51.736426+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:51:51.736789+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:51:51","2":"2024-01-10 13:51:51","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:51:51","2":"2024-01-10 13:51:51","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:51:51.737217+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:51:52.737695+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:51:52.738775+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:51:52","2":"2024-01-10 13:51:52","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:51:52","2":"2024-01-10 13:51:52","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:51:52.740053+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:51:53.741046+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:51:53.742119+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:51:53","2":"2024-01-10 13:51:53","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:51:53","2":"2024-01-10 13:51:53","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:51:53.743645+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:51:54.744919+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:51:54.745888+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:51:54","2":"2024-01-10 13:51:54","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:51:54","2":"2024-01-10 13:51:54","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:51:54.747106+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:51:55.748099+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:51:55.749520+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:51:55","2":"2024-01-10 13:51:55","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:51:55","2":"2024-01-10 13:51:55","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:51:55.751362+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:51:56.752890+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:51:56.754098+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:51:56","2":"2024-01-10 13:51:56","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:51:56","2":"2024-01-10 13:51:56","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:51:56.756158+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:51:57.757617+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:51:57.758513+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:51:57","2":"2024-01-10 13:51:57","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:51:57","2":"2024-01-10 13:51:57","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:51:57.759742+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:51:58.760719+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:51:58.761778+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:51:58","2":"2024-01-10 13:51:58","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:51:58","2":"2024-01-10 13:51:58","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:51:58.763935+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:51:59.765374+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:51:59.766138+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:51:59","2":"2024-01-10 13:51:59","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:51:59","2":"2024-01-10 13:51:59","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:51:59.767295+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:52:00.768166+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:52:00.769249+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:52:00","2":"2024-01-10 13:52:00","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:52:00","2":"2024-01-10 13:52:00","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:52:00.770819+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:52:01.772067+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:52:01.773265+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:52:01","2":"2024-01-10 13:52:01","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:52:01","2":"2024-01-10 13:52:01","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:52:01.775115+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:52:02.777249+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:52:02.778520+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:52:02","2":"2024-01-10 13:52:02","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:52:02","2":"2024-01-10 13:52:02","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:52:02.781168+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:52:03.785385+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:52:03.786947+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:52:03","2":"2024-01-10 13:52:03","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:52:03","2":"2024-01-10 13:52:03","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:52:03.788941+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:52:04.790255+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:52:04.791391+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:52:04","2":"2024-01-10 13:52:04","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:52:04","2":"2024-01-10 13:52:04","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:52:04.792967+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:52:05.794027+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:52:05.794520+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:52:05","2":"2024-01-10 13:52:05","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:52:05","2":"2024-01-10 13:52:05","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:52:05.795272+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:52:06.795755+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:52:06.796116+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:52:06","2":"2024-01-10 13:52:06","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:52:06","2":"2024-01-10 13:52:06","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:52:06.796625+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:52:07.797086+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:52:07.797419+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:52:07","2":"2024-01-10 13:52:07","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:52:07","2":"2024-01-10 13:52:07","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:52:07.797903+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:52:08.798356+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:52:08.798663+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:52:08","2":"2024-01-10 13:52:08","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:52:08","2":"2024-01-10 13:52:08","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:52:08.799181+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:52:09.799541+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:52:09.800111+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:52:09","2":"2024-01-10 13:52:09","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:52:09","2":"2024-01-10 13:52:09","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:52:09.800658+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:52:10.801111+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:52:10.801421+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:52:10","2":"2024-01-10 13:52:10","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:52:10","2":"2024-01-10 13:52:10","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:52:10.801968+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:52:11.802392+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:52:11.802728+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:52:11","2":"2024-01-10 13:52:11","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:52:11","2":"2024-01-10 13:52:11","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:52:11.803232+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:52:12.803638+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:52:12.804110+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:52:12","2":"2024-01-10 13:52:12","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:52:12","2":"2024-01-10 13:52:12","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:52:12.804900+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:52:13.805502+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:52:13.806581+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:52:13","2":"2024-01-10 13:52:13","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:52:13","2":"2024-01-10 13:52:13","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:52:13.808432+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:52:14.809763+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:52:14.810722+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:52:14","2":"2024-01-10 13:52:14","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:52:14","2":"2024-01-10 13:52:14","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:52:14.812067+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:52:15.813474+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:52:15.814491+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:52:15","2":"2024-01-10 13:52:15","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:52:15","2":"2024-01-10 13:52:15","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:52:15.816012+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:52:16.817223+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:52:16.818364+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:52:16","2":"2024-01-10 13:52:16","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:52:16","2":"2024-01-10 13:52:16","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:52:16.819740+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:52:17.820848+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:52:17.821846+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:52:17","2":"2024-01-10 13:52:17","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:52:17","2":"2024-01-10 13:52:17","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:52:17.823106+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:52:18.823980+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:52:18.824959+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:52:18","2":"2024-01-10 13:52:18","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:52:18","2":"2024-01-10 13:52:18","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:52:18.826755+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:52:19.828032+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:52:19.829094+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:52:19","2":"2024-01-10 13:52:19","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:52:19","2":"2024-01-10 13:52:19","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:52:19.830620+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:52:20.831720+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:52:20.832905+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:52:20","2":"2024-01-10 13:52:20","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:52:20","2":"2024-01-10 13:52:20","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:52:20.834677+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:52:21.836025+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:52:21.836941+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:52:21","2":"2024-01-10 13:52:21","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:52:21","2":"2024-01-10 13:52:21","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:52:21.838473+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:52:22.839581+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:52:22.840501+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:52:22","2":"2024-01-10 13:52:22","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:52:22","2":"2024-01-10 13:52:22","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:52:22.841896+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:52:23.843028+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:52:23.843827+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:52:23","2":"2024-01-10 13:52:23","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:52:23","2":"2024-01-10 13:52:23","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:52:23.845301+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:52:24.846342+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:52:24.847297+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:52:24","2":"2024-01-10 13:52:24","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:52:24","2":"2024-01-10 13:52:24","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:52:24.848824+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:52:25.849956+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:52:25.851207+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:52:25","2":"2024-01-10 13:52:25","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:52:25","2":"2024-01-10 13:52:25","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:52:25.853118+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:52:26.854651+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:52:26.855781+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:52:26","2":"2024-01-10 13:52:26","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:52:26","2":"2024-01-10 13:52:26","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:52:26.858019+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:52:27.859538+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:52:27.861275+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:52:27","2":"2024-01-10 13:52:27","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:52:27","2":"2024-01-10 13:52:27","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:52:27.862779+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:52:28.863996+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:52:28.865335+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:52:28","2":"2024-01-10 13:52:28","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:52:28","2":"2024-01-10 13:52:28","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:52:28.867269+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:52:29.868723+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:52:29.869831+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:52:29","2":"2024-01-10 13:52:29","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:52:29","2":"2024-01-10 13:52:29","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:52:29.871952+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:52:30.873666+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:52:30.874828+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:52:30","2":"2024-01-10 13:52:30","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:52:30","2":"2024-01-10 13:52:30","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:52:30.876750+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:52:31.878024+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:52:31.879592+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:52:31","2":"2024-01-10 13:52:31","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:52:31","2":"2024-01-10 13:52:31","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:52:31.881385+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:52:32.882728+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:52:32.883927+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:52:32","2":"2024-01-10 13:52:32","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:52:32","2":"2024-01-10 13:52:32","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:52:32.885810+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:52:33.887183+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:52:33.888345+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:52:33","2":"2024-01-10 13:52:33","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:52:33","2":"2024-01-10 13:52:33","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:52:33.890279+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:52:34.892243+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:52:34.893655+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:52:34","2":"2024-01-10 13:52:34","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:52:34","2":"2024-01-10 13:52:34","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:52:34.896107+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:52:35.897609+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:52:35.898033+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:52:35","2":"2024-01-10 13:52:35","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:52:35","2":"2024-01-10 13:52:35","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:52:35.898419+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:52:36.899002+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:52:36.900681+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:52:36","2":"2024-01-10 13:52:36","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:52:36","2":"2024-01-10 13:52:36","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:52:36.902535+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:52:37.903699+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:52:37.904069+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:52:37","2":"2024-01-10 13:52:37","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:52:37","2":"2024-01-10 13:52:37","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:52:37.904684+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:52:38.905316+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:52:38.905746+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:52:38","2":"2024-01-10 13:52:38","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:52:38","2":"2024-01-10 13:52:38","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:52:38.906360+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:52:39.906962+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:52:39.908063+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:52:39","2":"2024-01-10 13:52:39","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:52:39","2":"2024-01-10 13:52:39","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:52:39.909830+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:52:40.910883+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:52:40.911422+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:52:40","2":"2024-01-10 13:52:40","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:52:40","2":"2024-01-10 13:52:40","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:52:40.912236+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:52:41.912770+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:52:41.913088+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:52:41","2":"2024-01-10 13:52:41","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:52:41","2":"2024-01-10 13:52:41","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:52:41.913549+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:52:42.913983+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:52:42.915022+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:52:42","2":"2024-01-10 13:52:42","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:52:42","2":"2024-01-10 13:52:42","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:52:42.916583+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:52:43.917702+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:52:43.918926+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:52:43","2":"2024-01-10 13:52:43","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:52:43","2":"2024-01-10 13:52:43","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:52:43.921416+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:52:44.923306+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:52:44.924252+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:52:44","2":"2024-01-10 13:52:44","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:52:44","2":"2024-01-10 13:52:44","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:52:44.925761+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:52:45.927168+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:52:45.928551+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:52:45","2":"2024-01-10 13:52:45","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:52:45","2":"2024-01-10 13:52:45","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:52:45.930478+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:52:46.931682+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:52:46.932680+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:52:46","2":"2024-01-10 13:52:46","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:52:46","2":"2024-01-10 13:52:46","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:52:46.934129+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:52:47.935269+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:52:47.936883+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:52:47","2":"2024-01-10 13:52:47","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:52:47","2":"2024-01-10 13:52:47","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:52:47.939205+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:52:48.940940+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:52:48.942228+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:52:48","2":"2024-01-10 13:52:48","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:52:48","2":"2024-01-10 13:52:48","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:52:48.944560+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:52:49.946933+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:52:49.949094+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:52:49","2":"2024-01-10 13:52:49","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:52:49","2":"2024-01-10 13:52:49","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:52:49.951969+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:52:50.957910+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:52:50.959107+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:52:50","2":"2024-01-10 13:52:50","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:52:50","2":"2024-01-10 13:52:50","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:52:50.960958+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:52:51.962167+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:52:51.963009+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:52:51","2":"2024-01-10 13:52:51","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:52:51","2":"2024-01-10 13:52:51","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:52:51.964306+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:52:52.965378+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:52:52.966228+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:52:52","2":"2024-01-10 13:52:52","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:52:52","2":"2024-01-10 13:52:52","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:52:52.967526+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:52:53.968547+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:52:53.969485+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:52:53","2":"2024-01-10 13:52:53","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:52:53","2":"2024-01-10 13:52:53","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:52:53.971050+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:52:54.972099+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:52:54.973011+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:52:54","2":"2024-01-10 13:52:54","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:52:54","2":"2024-01-10 13:52:54","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:52:54.974283+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:52:55.975355+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:52:55.976235+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:52:55","2":"2024-01-10 13:52:55","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:52:55","2":"2024-01-10 13:52:55","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:52:55.977593+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:52:56.978757+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:52:56.979966+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:52:56","2":"2024-01-10 13:52:56","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:52:56","2":"2024-01-10 13:52:56","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:52:56.982313+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:52:57.983599+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:52:57.984943+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:52:57","2":"2024-01-10 13:52:57","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:52:57","2":"2024-01-10 13:52:57","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:52:57.986703+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:52:58.987892+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:52:58.989151+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:52:58","2":"2024-01-10 13:52:58","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:52:58","2":"2024-01-10 13:52:58","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:52:58.991043+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:52:59.992535+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:52:59.993552+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:52:59","2":"2024-01-10 13:52:59","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:52:59","2":"2024-01-10 13:52:59","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:52:59.995065+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:53:00.996495+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:53:00.997338+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:53:00","2":"2024-01-10 13:53:00","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:53:00","2":"2024-01-10 13:53:00","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:53:00.998665+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:53:02.000324+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:53:02.001706+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:53:02","2":"2024-01-10 13:53:02","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:53:02","2":"2024-01-10 13:53:02","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:53:02.003617+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:53:03.005311+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:53:03.006607+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:53:03","2":"2024-01-10 13:53:03","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:53:03","2":"2024-01-10 13:53:03","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:53:03.008613+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:53:04.010586+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:53:04.012229+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:53:04","2":"2024-01-10 13:53:04","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:53:04","2":"2024-01-10 13:53:04","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:53:04.014358+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:53:05.016120+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:53:05.017631+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:53:05","2":"2024-01-10 13:53:05","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:53:05","2":"2024-01-10 13:53:05","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:53:05.019841+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:53:06.021392+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:53:06.022720+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:53:06","2":"2024-01-10 13:53:06","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:53:06","2":"2024-01-10 13:53:06","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:53:06.024710+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:53:07.026230+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:53:07.027744+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:53:07","2":"2024-01-10 13:53:07","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:53:07","2":"2024-01-10 13:53:07","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:53:07.029927+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:53:08.031820+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:53:08.033417+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:53:08","2":"2024-01-10 13:53:08","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:53:08","2":"2024-01-10 13:53:08","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:53:08.035340+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:53:09.036948+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:53:09.038322+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:53:09","2":"2024-01-10 13:53:09","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:53:09","2":"2024-01-10 13:53:09","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:53:09.040574+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:53:10.042314+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:53:10.043853+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:53:10","2":"2024-01-10 13:53:10","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:53:10","2":"2024-01-10 13:53:10","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:53:10.046028+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:53:11.047497+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:53:11.048817+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:53:11","2":"2024-01-10 13:53:11","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:53:11","2":"2024-01-10 13:53:11","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:53:11.050902+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:53:12.052250+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:53:12.053629+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:53:12","2":"2024-01-10 13:53:12","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:53:12","2":"2024-01-10 13:53:12","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:53:12.055754+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:53:13.057212+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:53:13.058591+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:53:13","2":"2024-01-10 13:53:13","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:53:13","2":"2024-01-10 13:53:13","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:53:13.060656+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:53:14.062244+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:53:14.063620+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:53:14","2":"2024-01-10 13:53:14","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:53:14","2":"2024-01-10 13:53:14","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:53:14.065694+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:53:15.067414+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:53:15.068852+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:53:15","2":"2024-01-10 13:53:15","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:53:15","2":"2024-01-10 13:53:15","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:53:15.070890+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:53:16.072525+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:53:16.073841+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:53:16","2":"2024-01-10 13:53:16","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:53:16","2":"2024-01-10 13:53:16","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:53:16.075775+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:53:17.077691+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:53:17.078920+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:53:17","2":"2024-01-10 13:53:17","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:53:17","2":"2024-01-10 13:53:17","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:53:17.080919+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:53:18.082480+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:53:18.083809+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:53:18","2":"2024-01-10 13:53:18","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:53:18","2":"2024-01-10 13:53:18","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:53:18.085792+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:53:19.087279+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:53:19.088568+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:53:19","2":"2024-01-10 13:53:19","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:53:19","2":"2024-01-10 13:53:19","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:53:19.090591+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:53:20.092293+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:53:20.093648+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:53:20","2":"2024-01-10 13:53:20","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:53:20","2":"2024-01-10 13:53:20","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:53:20.095531+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:53:21.097115+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:53:21.098434+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:53:21","2":"2024-01-10 13:53:21","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:53:21","2":"2024-01-10 13:53:21","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:53:21.100119+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:53:22.101517+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:53:22.102923+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:53:22","2":"2024-01-10 13:53:22","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:53:22","2":"2024-01-10 13:53:22","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:53:22.104779+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:53:23.106147+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:53:23.107425+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:53:23","2":"2024-01-10 13:53:23","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:53:23","2":"2024-01-10 13:53:23","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:53:23.109227+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:53:24.110488+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:53:24.110854+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:53:24","2":"2024-01-10 13:53:24","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:53:24","2":"2024-01-10 13:53:24","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:53:24.111544+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:53:25.112446+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:53:25.113834+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:53:25","2":"2024-01-10 13:53:25","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:53:25","2":"2024-01-10 13:53:25","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:53:25.115748+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:53:26.117174+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:53:26.118474+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:53:26","2":"2024-01-10 13:53:26","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:53:26","2":"2024-01-10 13:53:26","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:53:26.121505+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:53:27.124118+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:53:27.125664+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:53:27","2":"2024-01-10 13:53:27","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:53:27","2":"2024-01-10 13:53:27","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:53:27.127630+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:53:28.129140+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:53:28.130654+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:53:28","2":"2024-01-10 13:53:28","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:53:28","2":"2024-01-10 13:53:28","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:53:28.133338+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:53:29.134870+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:53:29.135272+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:53:29","2":"2024-01-10 13:53:29","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:53:29","2":"2024-01-10 13:53:29","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:53:29.135826+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:53:30.136267+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:53:30.136639+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:53:30","2":"2024-01-10 13:53:30","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:53:30","2":"2024-01-10 13:53:30","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:53:30.137105+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:53:31.137511+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:53:31.137817+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:53:31","2":"2024-01-10 13:53:31","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:53:31","2":"2024-01-10 13:53:31","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:53:31.138286+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:53:32.138658+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:53:32.139027+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:53:32","2":"2024-01-10 13:53:32","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:53:32","2":"2024-01-10 13:53:32","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:53:32.139567+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:53:33.139905+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:53:33.140263+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:53:33","2":"2024-01-10 13:53:33","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:53:33","2":"2024-01-10 13:53:33","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:53:33.140720+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:53:34.141202+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:53:34.142059+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:53:34","2":"2024-01-10 13:53:34","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:53:34","2":"2024-01-10 13:53:34","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:53:34.143285+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:53:35.144463+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:53:35.145392+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:53:35","2":"2024-01-10 13:53:35","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:53:35","2":"2024-01-10 13:53:35","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:53:35.146752+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:53:36.147970+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:53:36.149076+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:53:36","2":"2024-01-10 13:53:36","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:53:36","2":"2024-01-10 13:53:36","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:53:36.150620+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:53:37.152009+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:53:37.153254+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:53:37","2":"2024-01-10 13:53:37","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:53:37","2":"2024-01-10 13:53:37","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:53:37.155036+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:53:38.156291+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:53:38.157677+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:53:38","2":"2024-01-10 13:53:38","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:53:38","2":"2024-01-10 13:53:38","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:53:38.159416+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:53:39.161170+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:53:39.162510+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:53:39","2":"2024-01-10 13:53:39","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:53:39","2":"2024-01-10 13:53:39","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:53:39.164431+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:53:40.166015+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:53:40.167507+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:53:40","2":"2024-01-10 13:53:40","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:53:40","2":"2024-01-10 13:53:40","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:53:40.169537+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:53:41.171084+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:53:41.172267+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:53:41","2":"2024-01-10 13:53:41","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:53:41","2":"2024-01-10 13:53:41","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:53:41.174138+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:53:42.175804+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:53:42.177194+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:53:42","2":"2024-01-10 13:53:42","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:53:42","2":"2024-01-10 13:53:42","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:53:42.180063+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:53:43.181624+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:53:43.182169+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:53:43","2":"2024-01-10 13:53:43","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:53:43","2":"2024-01-10 13:53:43","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:53:43.183077+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:53:44.183921+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:53:44.184842+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:53:44","2":"2024-01-10 13:53:44","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:53:44","2":"2024-01-10 13:53:44","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:53:44.186185+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:53:45.187293+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:53:45.187884+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:53:45","2":"2024-01-10 13:53:45","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:53:45","2":"2024-01-10 13:53:45","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:53:45.188712+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:53:46.189268+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:53:46.189690+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:53:46","2":"2024-01-10 13:53:46","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:53:46","2":"2024-01-10 13:53:46","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:53:46.190279+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:53:47.190996+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:53:47.192333+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:53:47","2":"2024-01-10 13:53:47","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:53:47","2":"2024-01-10 13:53:47","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:53:47.194987+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:53:48.196482+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:53:48.197678+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:53:48","2":"2024-01-10 13:53:48","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:53:48","2":"2024-01-10 13:53:48","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:53:48.199587+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:53:49.201203+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:53:49.202682+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:53:49","2":"2024-01-10 13:53:49","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:53:49","2":"2024-01-10 13:53:49","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:53:49.205127+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:53:50.206761+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:53:50.207398+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:53:50","2":"2024-01-10 13:53:50","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:53:50","2":"2024-01-10 13:53:50","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:53:50.208137+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:53:51.208702+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:53:51.209474+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:53:51","2":"2024-01-10 13:53:51","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:53:51","2":"2024-01-10 13:53:51","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:53:51.210662+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:53:52.211833+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:53:52.212844+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:53:52","2":"2024-01-10 13:53:52","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:53:52","2":"2024-01-10 13:53:52","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:53:52.214459+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:53:53.215890+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:53:53.217005+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:53:53","2":"2024-01-10 13:53:53","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:53:53","2":"2024-01-10 13:53:53","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:53:53.218707+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:53:54.220203+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:53:54.221281+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:53:54","2":"2024-01-10 13:53:54","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:53:54","2":"2024-01-10 13:53:54","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:53:54.223292+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:53:55.224328+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:53:55.224808+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:53:55","2":"2024-01-10 13:53:55","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:53:55","2":"2024-01-10 13:53:55","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:53:55.225681+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:53:56.226559+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:53:56.228762+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:53:56","2":"2024-01-10 13:53:56","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:53:56","2":"2024-01-10 13:53:56","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:53:56.231129+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:53:57.232605+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:53:57.233831+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:53:57","2":"2024-01-10 13:53:57","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:53:57","2":"2024-01-10 13:53:57","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:53:57.236094+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:53:58.237888+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:53:58.238260+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:53:58","2":"2024-01-10 13:53:58","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:53:58","2":"2024-01-10 13:53:58","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:53:58.238806+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:53:59.239350+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:53:59.240646+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:53:59","2":"2024-01-10 13:53:59","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:53:59","2":"2024-01-10 13:53:59","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:53:59.242677+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:54:00.244163+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:54:00.245363+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:54:00","2":"2024-01-10 13:54:00","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:54:00","2":"2024-01-10 13:54:00","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:54:00.247442+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:54:01.249124+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:54:01.251074+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:54:01","2":"2024-01-10 13:54:01","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:54:01","2":"2024-01-10 13:54:01","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:54:01.253694+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:54:02.255134+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:54:02.256846+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:54:02","2":"2024-01-10 13:54:02","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:54:02","2":"2024-01-10 13:54:02","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:54:02.259227+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:54:03.260904+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:54:03.262023+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:54:03","2":"2024-01-10 13:54:03","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:54:03","2":"2024-01-10 13:54:03","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:54:03.263678+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:54:04.264863+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:54:04.266150+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:54:04","2":"2024-01-10 13:54:04","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:54:04","2":"2024-01-10 13:54:04","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:54:04.267924+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:54:05.269273+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:54:05.270523+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:54:05","2":"2024-01-10 13:54:05","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:54:05","2":"2024-01-10 13:54:05","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:54:05.272493+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:54:06.274017+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:54:06.274399+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:54:06","2":"2024-01-10 13:54:06","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:54:06","2":"2024-01-10 13:54:06","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:54:06.274992+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:54:07.275520+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:54:07.276832+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:54:07","2":"2024-01-10 13:54:07","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:54:07","2":"2024-01-10 13:54:07","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:54:07.278752+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:54:08.280166+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:54:08.281212+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:54:08","2":"2024-01-10 13:54:08","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:54:08","2":"2024-01-10 13:54:08","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:54:08.283278+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:54:09.284899+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:54:09.286567+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:54:09","2":"2024-01-10 13:54:09","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:54:09","2":"2024-01-10 13:54:09","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:54:09.288532+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:54:10.290284+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:54:10.290609+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:54:10","2":"2024-01-10 13:54:10","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:54:10","2":"2024-01-10 13:54:10","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:54:10.291093+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:54:11.291452+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:54:11.291839+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:54:11","2":"2024-01-10 13:54:11","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:54:11","2":"2024-01-10 13:54:11","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:54:11.292311+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:54:12.292802+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:54:12.293092+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:54:12","2":"2024-01-10 13:54:12","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:54:12","2":"2024-01-10 13:54:12","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:54:12.293506+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:54:13.293833+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:54:13.294340+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:54:13","2":"2024-01-10 13:54:13","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:54:13","2":"2024-01-10 13:54:13","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:54:13.294919+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:54:14.295506+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:54:14.296743+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:54:14","2":"2024-01-10 13:54:14","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:54:14","2":"2024-01-10 13:54:14","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:54:14.297949+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:54:15.298740+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:54:15.299141+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:54:15","2":"2024-01-10 13:54:15","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:54:15","2":"2024-01-10 13:54:15","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:54:15.299687+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:54:16.300146+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:54:16.300983+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:54:16","2":"2024-01-10 13:54:16","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:54:16","2":"2024-01-10 13:54:16","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:54:16.302290+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:54:17.303216+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:54:17.304179+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:54:17","2":"2024-01-10 13:54:17","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:54:17","2":"2024-01-10 13:54:17","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:54:17.305756+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:54:18.306768+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:54:18.307537+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:54:18","2":"2024-01-10 13:54:18","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:54:18","2":"2024-01-10 13:54:18","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:54:18.308751+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:54:19.309857+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:54:19.310661+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:54:19","2":"2024-01-10 13:54:19","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:54:19","2":"2024-01-10 13:54:19","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:54:19.311914+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:54:20.312969+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:54:20.313830+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:54:20","2":"2024-01-10 13:54:20","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:54:20","2":"2024-01-10 13:54:20","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:54:20.315185+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:54:21.316413+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:54:21.317674+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:54:21","2":"2024-01-10 13:54:21","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:54:21","2":"2024-01-10 13:54:21","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:54:21.319720+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:54:22.321677+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:54:22.322764+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:54:22","2":"2024-01-10 13:54:22","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:54:22","2":"2024-01-10 13:54:22","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:54:22.324352+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:54:23.325598+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:54:23.328031+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:54:23","2":"2024-01-10 13:54:23","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:54:23","2":"2024-01-10 13:54:23","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:54:23.329900+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:54:24.331165+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:54:24.332251+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:54:24","2":"2024-01-10 13:54:24","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:54:24","2":"2024-01-10 13:54:24","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:54:24.334103+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:54:25.335273+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:54:25.336331+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:54:25","2":"2024-01-10 13:54:25","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:54:25","2":"2024-01-10 13:54:25","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:54:25.337954+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:54:26.339365+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:54:26.340528+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:54:26","2":"2024-01-10 13:54:26","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:54:26","2":"2024-01-10 13:54:26","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:54:26.342157+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:54:27.343716+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:54:27.345047+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:54:27","2":"2024-01-10 13:54:27","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:54:27","2":"2024-01-10 13:54:27","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:54:27.346692+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:54:28.347841+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:54:28.349355+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:54:28","2":"2024-01-10 13:54:28","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:54:28","2":"2024-01-10 13:54:28","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:54:28.351322+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:54:29.352942+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:54:29.353335+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:54:29","2":"2024-01-10 13:54:29","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:54:29","2":"2024-01-10 13:54:29","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:54:29.353902+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:54:30.354369+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:54:30.355377+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:54:30","2":"2024-01-10 13:54:30","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:54:30","2":"2024-01-10 13:54:30","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:54:30.357411+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:54:31.358825+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:54:31.359819+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:54:31","2":"2024-01-10 13:54:31","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:54:31","2":"2024-01-10 13:54:31","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:54:31.361742+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:54:32.363354+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:54:32.363727+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:54:32","2":"2024-01-10 13:54:32","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:54:32","2":"2024-01-10 13:54:32","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:54:32.364776+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:54:33.365388+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:54:33.367394+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:54:33","2":"2024-01-10 13:54:33","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:54:33","2":"2024-01-10 13:54:33","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:54:33.369550+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:54:34.371489+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:54:34.373034+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:54:34","2":"2024-01-10 13:54:34","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:54:34","2":"2024-01-10 13:54:34","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:54:34.375551+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:54:35.377629+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:54:35.378160+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:54:35","2":"2024-01-10 13:54:35","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:54:35","2":"2024-01-10 13:54:35","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:54:35.379129+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:54:36.380193+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:54:36.381726+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:54:36","2":"2024-01-10 13:54:36","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:54:36","2":"2024-01-10 13:54:36","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:54:36.384309+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:54:37.386028+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:54:37.386903+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:54:37","2":"2024-01-10 13:54:37","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:54:37","2":"2024-01-10 13:54:37","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:54:37.388720+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:54:38.389832+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:54:38.390828+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:54:38","2":"2024-01-10 13:54:38","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:54:38","2":"2024-01-10 13:54:38","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:54:38.392152+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:54:39.393272+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:54:39.394441+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:54:39","2":"2024-01-10 13:54:39","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:54:39","2":"2024-01-10 13:54:39","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:54:39.396057+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:54:40.397480+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:54:40.398805+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:54:40","2":"2024-01-10 13:54:40","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:54:40","2":"2024-01-10 13:54:40","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:54:40.401625+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:54:41.403281+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:54:41.406583+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:54:41","2":"2024-01-10 13:54:41","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:54:41","2":"2024-01-10 13:54:41","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:54:41.409242+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:54:42.411770+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:54:42.413233+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:54:42","2":"2024-01-10 13:54:42","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:54:42","2":"2024-01-10 13:54:42","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:54:42.415820+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:54:43.417783+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:54:43.419445+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:54:43","2":"2024-01-10 13:54:43","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:54:43","2":"2024-01-10 13:54:43","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:54:43.421532+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:54:44.422942+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:54:44.424133+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:54:44","2":"2024-01-10 13:54:44","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:54:44","2":"2024-01-10 13:54:44","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:54:44.425496+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:54:45.426561+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:54:45.427362+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:54:45","2":"2024-01-10 13:54:45","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:54:45","2":"2024-01-10 13:54:45","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:54:45.428591+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:54:46.429535+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:54:46.430428+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:54:46","2":"2024-01-10 13:54:46","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:54:46","2":"2024-01-10 13:54:46","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:54:46.432209+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:54:47.433438+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:54:47.434975+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:54:47","2":"2024-01-10 13:54:47","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:54:47","2":"2024-01-10 13:54:47","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:54:47.437314+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:54:48.439031+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:54:48.439999+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:54:48","2":"2024-01-10 13:54:48","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:54:48","2":"2024-01-10 13:54:48","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:54:48.441736+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:54:49.442860+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:54:49.443906+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:54:49","2":"2024-01-10 13:54:49","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:54:49","2":"2024-01-10 13:54:49","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:54:49.445895+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:54:50.447428+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:54:50.447948+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:54:50","2":"2024-01-10 13:54:50","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:54:50","2":"2024-01-10 13:54:50","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:54:50.448742+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:54:51.449337+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:54:51.450179+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:54:51","2":"2024-01-10 13:54:51","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:54:51","2":"2024-01-10 13:54:51","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:54:51.451409+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:54:52.452514+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:54:52.453876+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:54:52","2":"2024-01-10 13:54:52","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:54:52","2":"2024-01-10 13:54:52","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:54:52.456069+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:54:53.457480+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:54:53.458526+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:54:53","2":"2024-01-10 13:54:53","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:54:53","2":"2024-01-10 13:54:53","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:54:53.460448+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:54:54.461885+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:54:54.462819+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:54:54","2":"2024-01-10 13:54:54","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:54:54","2":"2024-01-10 13:54:54","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:54:54.464285+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:54:55.465486+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:54:55.466812+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:54:55","2":"2024-01-10 13:54:55","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:54:55","2":"2024-01-10 13:54:55","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:54:55.468855+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:54:56.470735+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:54:56.472187+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:54:56","2":"2024-01-10 13:54:56","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:54:56","2":"2024-01-10 13:54:56","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:54:56.474353+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:54:57.475891+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:54:57.477261+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:54:57","2":"2024-01-10 13:54:57","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:54:57","2":"2024-01-10 13:54:57","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:54:57.479216+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:54:58.480687+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:54:58.481544+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:54:58","2":"2024-01-10 13:54:58","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:54:58","2":"2024-01-10 13:54:58","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:54:58.482782+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:54:59.483872+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:54:59.485229+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:54:59","2":"2024-01-10 13:54:59","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:54:59","2":"2024-01-10 13:54:59","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:54:59.487854+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:55:00.489392+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:55:00.490490+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:55:00","2":"2024-01-10 13:55:00","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:55:00","2":"2024-01-10 13:55:00","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:55:00.491788+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:55:01.492886+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:55:01.493902+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:55:01","2":"2024-01-10 13:55:01","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:55:01","2":"2024-01-10 13:55:01","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:55:01.495473+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:55:02.496639+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:55:02.497766+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:55:02","2":"2024-01-10 13:55:02","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:55:02","2":"2024-01-10 13:55:02","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:55:02.499382+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:55:03.500519+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:55:03.501600+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:55:03","2":"2024-01-10 13:55:03","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:55:03","2":"2024-01-10 13:55:03","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:55:03.503171+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:55:04.504173+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:55:04.504482+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:55:04","2":"2024-01-10 13:55:04","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:55:04","2":"2024-01-10 13:55:04","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:55:04.504915+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:55:05.505412+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:55:05.505759+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:55:05","2":"2024-01-10 13:55:05","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:55:05","2":"2024-01-10 13:55:05","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:55:05.506213+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:55:06.506643+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:55:06.507743+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:55:06","2":"2024-01-10 13:55:06","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:55:06","2":"2024-01-10 13:55:06","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:55:06.509568+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:55:07.511450+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:55:07.512862+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:55:07","2":"2024-01-10 13:55:07","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:55:07","2":"2024-01-10 13:55:07","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:55:07.514853+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:55:08.516618+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:55:08.517592+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:55:08","2":"2024-01-10 13:55:08","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:55:08","2":"2024-01-10 13:55:08","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:55:08.519384+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:55:09.520862+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:55:09.521224+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:55:09","2":"2024-01-10 13:55:09","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:55:09","2":"2024-01-10 13:55:09","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:55:09.521674+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:55:10.522152+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:55:10.523265+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:55:10","2":"2024-01-10 13:55:10","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:55:10","2":"2024-01-10 13:55:10","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:55:10.524933+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:55:11.526271+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:55:11.527336+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:55:11","2":"2024-01-10 13:55:11","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:55:11","2":"2024-01-10 13:55:11","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:55:11.529071+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:55:12.530319+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:55:12.531435+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:55:12","2":"2024-01-10 13:55:12","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:55:12","2":"2024-01-10 13:55:12","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:55:12.533544+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:55:13.535002+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:55:13.536526+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:55:13","2":"2024-01-10 13:55:13","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:55:13","2":"2024-01-10 13:55:13","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:55:13.538497+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:55:14.539972+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:55:14.540880+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:55:14","2":"2024-01-10 13:55:14","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:55:14","2":"2024-01-10 13:55:14","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:55:14.542013+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:55:15.542701+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:55:15.543126+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:55:15","2":"2024-01-10 13:55:15","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:55:15","2":"2024-01-10 13:55:15","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:55:15.543909+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:55:16.544575+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:55:16.545534+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:55:16","2":"2024-01-10 13:55:16","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:55:16","2":"2024-01-10 13:55:16","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:55:16.547038+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:55:17.548466+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:55:17.548783+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:55:17","2":"2024-01-10 13:55:17","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:55:17","2":"2024-01-10 13:55:17","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:55:17.549260+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:55:18.549773+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:55:18.550945+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:55:18","2":"2024-01-10 13:55:18","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:55:18","2":"2024-01-10 13:55:18","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:55:18.553415+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:55:19.554759+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:55:19.555205+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:55:19","2":"2024-01-10 13:55:19","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:55:19","2":"2024-01-10 13:55:19","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:55:19.555750+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:55:20.556458+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:55:20.557670+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:55:20","2":"2024-01-10 13:55:20","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:55:20","2":"2024-01-10 13:55:20","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:55:20.559340+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:55:21.560761+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:55:21.561886+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:55:21","2":"2024-01-10 13:55:21","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:55:21","2":"2024-01-10 13:55:21","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:55:21.563565+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:55:22.564715+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:55:22.565715+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:55:22","2":"2024-01-10 13:55:22","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:55:22","2":"2024-01-10 13:55:22","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:55:22.567498+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:55:23.568554+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:55:23.569416+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:55:23","2":"2024-01-10 13:55:23","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:55:23","2":"2024-01-10 13:55:23","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:55:23.570957+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:55:24.571994+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:55:24.572353+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:55:24","2":"2024-01-10 13:55:24","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:55:24","2":"2024-01-10 13:55:24","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:55:24.572814+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:55:25.573274+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:55:25.574204+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:55:25","2":"2024-01-10 13:55:25","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:55:25","2":"2024-01-10 13:55:25","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:55:25.575483+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:55:26.576871+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:55:26.578227+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:55:26","2":"2024-01-10 13:55:26","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:55:26","2":"2024-01-10 13:55:26","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:55:26.580251+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:55:27.582159+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:55:27.583439+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:55:27","2":"2024-01-10 13:55:27","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:55:27","2":"2024-01-10 13:55:27","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:55:27.585393+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:55:28.586802+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:55:28.587885+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:55:28","2":"2024-01-10 13:55:28","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:55:28","2":"2024-01-10 13:55:28","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:55:28.589748+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:55:29.591405+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:55:29.591820+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:55:29","2":"2024-01-10 13:55:29","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:55:29","2":"2024-01-10 13:55:29","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:55:29.592454+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:55:30.592986+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:55:30.593446+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:55:30","2":"2024-01-10 13:55:30","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:55:30","2":"2024-01-10 13:55:30","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:55:30.594071+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:55:31.594679+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:55:31.595051+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:55:31","2":"2024-01-10 13:55:31","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:55:31","2":"2024-01-10 13:55:31","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:55:31.595454+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:55:32.595940+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:55:32.596996+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:55:32","2":"2024-01-10 13:55:32","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:55:32","2":"2024-01-10 13:55:32","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:55:32.598696+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:55:33.599991+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:55:33.601447+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:55:33","2":"2024-01-10 13:55:33","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:55:33","2":"2024-01-10 13:55:33","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:55:33.603720+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:55:34.606021+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:55:34.607358+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:55:34","2":"2024-01-10 13:55:34","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:55:34","2":"2024-01-10 13:55:34","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:55:34.609650+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:55:35.611068+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:55:35.612112+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:55:35","2":"2024-01-10 13:55:35","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:55:35","2":"2024-01-10 13:55:35","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:55:35.614135+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:55:36.616467+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:55:36.617700+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:55:36","2":"2024-01-10 13:55:36","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:55:36","2":"2024-01-10 13:55:36","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:55:36.619582+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:55:36.990556+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:55:36.991377+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:55:36.991645+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:55:36.991817+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:55:36.995019+00:00] request.INFO: Matched route "newsletters_send". {"route":"newsletters_send","route_parameters":{"_route":"newsletters_send","_controller":"App\\Controller\\NewslettersController::send","id":"1"},"request_uri":"http://localhost:8001/newsletters/send/1","method":"GET"} []
[2024-01-10T13:55:37.018390+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:55:37.022517+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ? (parameters: array{"1":"1"}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ?","params":{"1":"1"},"types":{"1":1}} []
[2024-01-10T13:55:37.032125+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":1}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":1},"types":{"1":1}} []
[2024-01-10T13:55:37.037579+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":1}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":1},"types":{"1":1}} []
[2024-01-10T13:55:37.044217+00:00] messenger.INFO: Sending message App\Message\SendNewsletterMessage with async sender using Symfony\Component\Messenger\Bridge\Doctrine\Transport\DoctrineTransport {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage","alias":"async","sender":"Symfony\\Component\\Messenger\\Bridge\\Doctrine\\Transport\\DoctrineTransport"} []
[2024-01-10T13:55:37.045362+00:00] doctrine.DEBUG: Executing statement: INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?) (parameters: array{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:1:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"default","4":"2024-01-10 13:55:37","5":"2024-01-10 13:55:37"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?)","params":{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:1:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"default","4":"2024-01-10 13:55:37","5":"2024-01-10 13:55:37"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2024-01-10T13:55:37.062182+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:55:37.062853+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:55:37.063340+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:55:37.063814+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:55:37.064248+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:55:37.064967+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:55:37.072654+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:55:37.073317+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:55:37.074009+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:55:37.074441+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:55:37.077141+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:55:37.086005+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:55:37.088133+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:55:37.096857+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:55:37.098245+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:55:37.103846+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:55:37.104578+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:55:37.108409+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:55:37.108905+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:55:37.111218+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:55:37.115227+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:55:37.115764+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:55:37.118124+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:55:37.119275+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:55:37.138474+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:55:37.138591+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:55:37.154848+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:55:37.159072+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:55:37.159204+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:55:37.159255+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:55:37.159306+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:55:37.159705+00:00] request.INFO: Matched route "newsletters_list". {"route":"newsletters_list","route_parameters":{"_route":"newsletters_list","_controller":"App\\Controller\\NewslettersController::list"},"request_uri":"http://localhost:8001/newsletters/list","method":"GET"} []
[2024-01-10T13:55:37.161954+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:55:37.162815+00:00] doctrine.DEBUG: Executing query: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0"} []
[2024-01-10T13:55:37.165598+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":1}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":1},"types":{"1":1}} []
[2024-01-10T13:55:37.166808+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":1}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":1},"types":{"1":1}} []
[2024-01-10T13:55:37.168161+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:55:37.168236+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:55:37.168284+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:55:37.168326+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:55:37.168387+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:55:37.168440+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:55:37.168853+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:55:37.168912+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:55:37.168964+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:55:37.169005+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:55:37.169273+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:55:37.169583+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:55:37.169819+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:55:37.170946+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:55:37.171203+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:55:37.172513+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:55:37.172834+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:55:37.173832+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:55:37.174145+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:55:37.175317+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:55:37.178075+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:55:37.178309+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:55:37.179610+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:55:37.180559+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:55:37.195781+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:55:37.195980+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:55:37.220407+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:55:37.245527+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:55:37.245692+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:55:37.245754+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:55:37.245806+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:55:37.246575+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"b5c83b"},"request_uri":"http://localhost:8001/_wdt/b5c83b","method":"GET"} []
[2024-01-10T13:55:37.248842+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:55:37.249332+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:55:37.249568+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:55:37.249742+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:55:37.249907+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:55:37.250063+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:55:37.251586+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:55:37.251882+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:55:37.252158+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:55:37.252441+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:55:37.621687+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:55:37.622801+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:55:37","2":"2024-01-10 13:55:37","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:55:37","2":"2024-01-10 13:55:37","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:55:37.624757+00:00] doctrine.DEBUG: Executing statement: UPDATE messenger_messages SET delivered_at = ? WHERE id = ? (parameters: array{"1":"2024-01-10 13:55:37","2":20}, types: array{"1":2,"2":2}) {"sql":"UPDATE messenger_messages SET delivered_at = ? WHERE id = ?","params":{"1":"2024-01-10 13:55:37","2":20},"types":{"1":2,"2":2}} []
[2024-01-10T13:55:37.626204+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:55:37.634912+00:00] messenger.INFO: Received message App\Message\SendNewsletterMessage {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage"} []
[2024-01-10T13:55:37.635778+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:55:37.638413+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ? (parameters: array{"1":1}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ?","params":{"1":1},"types":{"1":1}} []
[2024-01-10T13:55:40.642422+00:00] app.DEBUG: Email transport "Symfony\Component\Mailer\Transport\Smtp\SmtpTransport" stopping [] []
[2024-01-10T13:55:40.642653+00:00] app.DEBUG: Email transport "Symfony\Component\Mailer\Transport\Smtp\SmtpTransport" stopped [] []
[2024-01-10T13:55:40.642765+00:00] app.DEBUG: Email transport "Symfony\Component\Mailer\Transport\Smtp\SmtpTransport" starting [] []
[2024-01-10T13:55:40.747684+00:00] app.DEBUG: Email transport "Symfony\Component\Mailer\Transport\Smtp\SmtpTransport" started [] []
[2024-01-10T13:55:40.793641+00:00] messenger.INFO: Message Symfony\Component\Mailer\Messenger\SendEmailMessage handled by Symfony\Component\Mailer\Messenger\MessageHandler::__invoke {"message":{"Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage":[]},"class":"Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage","handler":"Symfony\\Component\\Mailer\\Messenger\\MessageHandler::__invoke"} []
[2024-01-10T13:55:40.794117+00:00] messenger.INFO: Message App\Message\SendNewsletterMessage handled by App\MessageHandler\SendNewsletterMessageHandler::__invoke {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage","handler":"App\\MessageHandler\\SendNewsletterMessageHandler::__invoke"} []
[2024-01-10T13:55:40.795636+00:00] messenger.INFO: App\Message\SendNewsletterMessage was handled successfully (acknowledging to transport). {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage"} []
[2024-01-10T13:55:40.796229+00:00] doctrine.DEBUG: Executing statement: DELETE FROM messenger_messages WHERE id = ? (parameters: array{"1":"20"}, types: array{"1":2}) {"sql":"DELETE FROM messenger_messages WHERE id = ?","params":{"1":"20"},"types":{"1":2}} []
[2024-01-10T13:55:40.805283+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:55:40.807359+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:55:40","2":"2024-01-10 13:55:40","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:55:40","2":"2024-01-10 13:55:40","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:55:40.808955+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:55:41.810131+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:55:41.813037+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:55:41","2":"2024-01-10 13:55:41","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:55:41","2":"2024-01-10 13:55:41","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:55:41.815421+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:55:42.816620+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:55:42.817930+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:55:42","2":"2024-01-10 13:55:42","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:55:42","2":"2024-01-10 13:55:42","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:55:42.820196+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:55:43.822056+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:55:43.822429+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:55:43","2":"2024-01-10 13:55:43","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:55:43","2":"2024-01-10 13:55:43","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:55:43.823091+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:55:44.823541+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:55:44.824407+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:55:44","2":"2024-01-10 13:55:44","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:55:44","2":"2024-01-10 13:55:44","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:55:44.825580+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:55:45.826603+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:55:45.827685+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:55:45","2":"2024-01-10 13:55:45","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:55:45","2":"2024-01-10 13:55:45","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:55:45.829625+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:55:46.830835+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:55:46.831619+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:55:46","2":"2024-01-10 13:55:46","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:55:46","2":"2024-01-10 13:55:46","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:55:46.832771+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:55:47.833738+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:55:47.834841+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:55:47","2":"2024-01-10 13:55:47","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:55:47","2":"2024-01-10 13:55:47","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:55:47.836802+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:55:48.838196+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:55:48.839417+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:55:48","2":"2024-01-10 13:55:48","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:55:48","2":"2024-01-10 13:55:48","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:55:48.841444+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:55:49.842925+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:55:49.843878+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:55:49","2":"2024-01-10 13:55:49","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:55:49","2":"2024-01-10 13:55:49","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:55:49.845502+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:55:50.847107+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:55:50.848250+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:55:50","2":"2024-01-10 13:55:50","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:55:50","2":"2024-01-10 13:55:50","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:55:50.849835+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:55:51.851029+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:55:51.851625+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:55:51","2":"2024-01-10 13:55:51","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:55:51","2":"2024-01-10 13:55:51","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:55:51.852418+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:55:52.853112+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:55:52.854169+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:55:52","2":"2024-01-10 13:55:52","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:55:52","2":"2024-01-10 13:55:52","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:55:52.855663+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:55:53.856867+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:55:53.858260+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:55:53","2":"2024-01-10 13:55:53","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:55:53","2":"2024-01-10 13:55:53","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:55:53.860336+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:55:54.861915+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:55:54.862811+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:55:54","2":"2024-01-10 13:55:54","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:55:54","2":"2024-01-10 13:55:54","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:55:54.864276+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:55:55.865671+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:55:55.867061+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:55:55","2":"2024-01-10 13:55:55","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:55:55","2":"2024-01-10 13:55:55","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:55:55.869108+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:55:56.870631+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:55:56.871830+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:55:56","2":"2024-01-10 13:55:56","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:55:56","2":"2024-01-10 13:55:56","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:55:56.873819+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:55:57.875146+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:55:57.876405+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:55:57","2":"2024-01-10 13:55:57","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:55:57","2":"2024-01-10 13:55:57","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:55:57.878317+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:55:58.879473+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:55:58.880722+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:55:58","2":"2024-01-10 13:55:58","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:55:58","2":"2024-01-10 13:55:58","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:55:58.882482+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:55:59.884429+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:55:59.885855+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:55:59","2":"2024-01-10 13:55:59","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:55:59","2":"2024-01-10 13:55:59","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:55:59.887816+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:56:00.889401+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:56:00.890914+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:56:00","2":"2024-01-10 13:56:00","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:56:00","2":"2024-01-10 13:56:00","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:56:00.892921+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:56:01.894774+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:56:01.896217+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:56:01","2":"2024-01-10 13:56:01","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:56:01","2":"2024-01-10 13:56:01","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:56:01.898265+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:56:02.900132+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:56:02.900785+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:56:02","2":"2024-01-10 13:56:02","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:56:02","2":"2024-01-10 13:56:02","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:56:02.901863+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:56:03.902774+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:56:03.903934+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:56:03","2":"2024-01-10 13:56:03","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:56:03","2":"2024-01-10 13:56:03","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:56:03.906095+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:56:04.907680+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:56:04.909261+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:56:04","2":"2024-01-10 13:56:04","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:56:04","2":"2024-01-10 13:56:04","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:56:04.911797+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:56:05.913459+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:56:05.915067+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:56:05","2":"2024-01-10 13:56:05","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:56:05","2":"2024-01-10 13:56:05","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:56:05.917375+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:56:06.918944+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:56:06.920511+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:56:06","2":"2024-01-10 13:56:06","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:56:06","2":"2024-01-10 13:56:06","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:56:06.922388+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:56:07.923699+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:56:07.924345+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:56:07","2":"2024-01-10 13:56:07","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:56:07","2":"2024-01-10 13:56:07","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:56:07.925469+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:56:08.926384+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:56:08.933977+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:56:08","2":"2024-01-10 13:56:08","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:56:08","2":"2024-01-10 13:56:08","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:56:08.935724+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:56:09.936864+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:56:09.937359+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:56:09","2":"2024-01-10 13:56:09","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:56:09","2":"2024-01-10 13:56:09","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:56:09.938114+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:56:10.938780+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:56:10.940451+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:56:10","2":"2024-01-10 13:56:10","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:56:10","2":"2024-01-10 13:56:10","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:56:10.941841+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:56:11.942982+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:56:11.944202+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:56:11","2":"2024-01-10 13:56:11","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:56:11","2":"2024-01-10 13:56:11","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:56:11.945977+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:56:12.947267+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:56:12.948316+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:56:12","2":"2024-01-10 13:56:12","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:56:12","2":"2024-01-10 13:56:12","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:56:12.949939+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:56:13.951057+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:56:13.951374+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:56:13","2":"2024-01-10 13:56:13","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:56:13","2":"2024-01-10 13:56:13","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:56:13.951865+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:56:14.952225+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:56:14.952871+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:56:14","2":"2024-01-10 13:56:14","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:56:14","2":"2024-01-10 13:56:14","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:56:14.953912+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:56:15.954600+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:56:15.955365+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:56:15","2":"2024-01-10 13:56:15","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:56:15","2":"2024-01-10 13:56:15","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:56:15.956508+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:56:16.957423+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:56:16.958506+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:56:16","2":"2024-01-10 13:56:16","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:56:16","2":"2024-01-10 13:56:16","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:56:16.960466+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:56:17.961838+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:56:17.962532+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:56:17","2":"2024-01-10 13:56:17","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:56:17","2":"2024-01-10 13:56:17","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:56:17.963235+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:56:18.963878+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:56:18.965401+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:56:18","2":"2024-01-10 13:56:18","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:56:18","2":"2024-01-10 13:56:18","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:56:18.967326+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:56:19.969445+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:56:19.970724+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:56:19","2":"2024-01-10 13:56:19","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:56:19","2":"2024-01-10 13:56:19","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:56:19.972506+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:56:20.973664+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:56:20.974907+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:56:20","2":"2024-01-10 13:56:20","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:56:20","2":"2024-01-10 13:56:20","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:56:20.976926+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:56:21.978358+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:56:21.979409+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:56:21","2":"2024-01-10 13:56:21","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:56:21","2":"2024-01-10 13:56:21","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:56:21.981071+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:56:22.982219+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:56:22.983476+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:56:22","2":"2024-01-10 13:56:22","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:56:22","2":"2024-01-10 13:56:22","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:56:22.985628+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:56:23.987346+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:56:23.988959+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:56:23","2":"2024-01-10 13:56:23","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:56:23","2":"2024-01-10 13:56:23","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:56:23.991770+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:56:24.993731+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:56:24.995249+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:56:24","2":"2024-01-10 13:56:24","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:56:24","2":"2024-01-10 13:56:24","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:56:24.997965+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:56:25.999934+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:56:26.001655+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:56:26","2":"2024-01-10 13:56:26","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:56:26","2":"2024-01-10 13:56:26","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:56:26.004826+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:56:27.006667+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:56:27.008119+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:56:27","2":"2024-01-10 13:56:27","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:56:27","2":"2024-01-10 13:56:27","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:56:27.010448+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:56:28.012338+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:56:28.013836+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:56:28","2":"2024-01-10 13:56:28","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:56:28","2":"2024-01-10 13:56:28","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:56:28.015724+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:56:29.017119+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:56:29.018228+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:56:29","2":"2024-01-10 13:56:29","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:56:29","2":"2024-01-10 13:56:29","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:56:29.020515+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:56:30.022301+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:56:30.023473+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:56:30","2":"2024-01-10 13:56:30","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:56:30","2":"2024-01-10 13:56:30","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:56:30.024970+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:56:30.208228+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:56:30.208550+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:56:30.208646+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:56:30.208704+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:56:30.209554+00:00] request.INFO: Matched route "newsletters_home". {"route":"newsletters_home","route_parameters":{"_controller":"Symfony\\Bundle\\FrameworkBundle\\Controller\\RedirectController::urlRedirectAction","path":"/newsletters/","permanent":true,"scheme":null,"httpPort":8001,"httpsPort":443,"_route":"newsletters_home"},"request_uri":"http://localhost:8001/newsletters","method":"GET"} []
[2024-01-10T13:56:30.213127+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:56:30.213265+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:56:30.213373+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:56:30.213483+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:56:30.213582+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:56:30.213657+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:56:30.214720+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:56:30.214812+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:56:30.214947+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:56:30.215035+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:56:30.215469+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:56:30.216684+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:56:30.217778+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:56:30.218183+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:56:30.219132+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:56:30.219320+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:56:30.220727+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:56:30.220969+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:56:30.222062+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:56:30.222348+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:56:30.223464+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:56:30.225416+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:56:30.225661+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:56:30.226729+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:56:30.227805+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:56:30.241798+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:56:30.241893+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:56:30.258476+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:56:30.262381+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:56:30.262530+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:56:30.262584+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:56:30.262630+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:56:30.263194+00:00] request.INFO: Matched route "newsletters_home". {"route":"newsletters_home","route_parameters":{"_route":"newsletters_home","_controller":"App\\Controller\\NewslettersController::index"},"request_uri":"http://localhost:8001/newsletters/","method":"GET"} []
[2024-01-10T13:56:30.268275+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:56:30.268378+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:56:30.268468+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:56:30.268542+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:56:30.269203+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::offsetExists($option) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::offsetExists($option) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:1149)"} []
[2024-01-10T13:56:30.269280+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::offsetGet($option, bool $triggerDeprecation = true) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::offsetGet($option, bool $triggerDeprecation = true) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:908)"} []
[2024-01-10T13:56:30.269353+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::offsetSet($option, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::offsetSet($option, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:1165)"} []
[2024-01-10T13:56:30.269420+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::offsetUnset($option) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::offsetUnset($option) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:1177)"} []
[2024-01-10T13:56:30.269481+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:1193)"} []
[2024-01-10T13:56:30.269732+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormBuilder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormBuilder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormBuilder.php:218)"} []
[2024-01-10T13:56:30.269795+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormBuilder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormBuilder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormBuilder.php:164)"} []
[2024-01-10T13:56:30.273027+00:00] php.INFO: Deprecated: Return type of Symfony\Component\PropertyAccess\PropertyPath::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\PropertyAccess\\PropertyPath::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/property-access/PropertyPath.php:157)"} []
[2024-01-10T13:56:30.273496+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:56:30.274418+00:00] doctrine.DEBUG: Executing query: SELECT c0_.id AS id_0, c0_.name AS name_1 FROM categories c0_ {"sql":"SELECT c0_.id AS id_0, c0_.name AS name_1 FROM categories c0_"} []
[2024-01-10T13:56:30.277928+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\ButtonBuilder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\ButtonBuilder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/ButtonBuilder.php:728)"} []
[2024-01-10T13:56:30.278036+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\ButtonBuilder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\ButtonBuilder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/ButtonBuilder.php:718)"} []
[2024-01-10T13:56:30.278167+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:1024)"} []
[2024-01-10T13:56:30.278230+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::offsetExists($name) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::offsetExists($name) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:968)"} []
[2024-01-10T13:56:30.278293+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::offsetGet($name) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::offsetGet($name) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:982)"} []
[2024-01-10T13:56:30.278344+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::offsetSet($name, $child) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::offsetSet($name, $child) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:1000)"} []
[2024-01-10T13:56:30.278394+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::offsetUnset($name) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::offsetUnset($name) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:1014)"} []
[2024-01-10T13:56:30.278442+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:1034)"} []
[2024-01-10T13:56:30.278518+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:104)"} []
[2024-01-10T13:56:30.278571+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:114)"} []
[2024-01-10T13:56:30.278630+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:128)"} []
[2024-01-10T13:56:30.278680+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:151)"} []
[2024-01-10T13:56:30.278730+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:168)"} []
[2024-01-10T13:56:30.278779+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:176)"} []
[2024-01-10T13:56:30.279074+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:443)"} []
[2024-01-10T13:56:30.279144+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::offsetExists($offset) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::offsetExists($offset) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:54)"} []
[2024-01-10T13:56:30.279216+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::offsetGet($offset) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::offsetGet($offset) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:70)"} []
[2024-01-10T13:56:30.279285+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::offsetSet($offset, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::offsetSet($offset, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:87)"} []
[2024-01-10T13:56:30.279349+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::offsetUnset($offset) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::offsetUnset($offset) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:103)"} []
[2024-01-10T13:56:30.279400+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:433)"} []
[2024-01-10T13:56:30.279552+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\InheritDataAwareIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\InheritDataAwareIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/InheritDataAwareIterator.php:41)"} []
[2024-01-10T13:56:30.279608+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\InheritDataAwareIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\InheritDataAwareIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/InheritDataAwareIterator.php:33)"} []
[2024-01-10T13:56:30.279705+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMapIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMapIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMapIterator.php:108)"} []
[2024-01-10T13:56:30.279760+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMapIterator::next() should either be compatible with Iterator::next(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMapIterator::next() should either be compatible with Iterator::next(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMapIterator.php:118)"} []
[2024-01-10T13:56:30.279809+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMapIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMapIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMapIterator.php:136)"} []
[2024-01-10T13:56:30.279857+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMapIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMapIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMapIterator.php:160)"} []
[2024-01-10T13:56:30.280473+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::offsetExists($name) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::offsetExists($name) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:123)"} []
[2024-01-10T13:56:30.280571+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::offsetGet($name) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::offsetGet($name) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:111)"} []
[2024-01-10T13:56:30.280653+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::offsetSet($name, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::offsetSet($name, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:135)"} []
[2024-01-10T13:56:30.280720+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::offsetUnset($name) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::offsetUnset($name) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:147)"} []
[2024-01-10T13:56:30.280789+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:157)"} []
[2024-01-10T13:56:30.280852+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:167)"} []
[2024-01-10T13:56:30.280975+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:200)"} []
[2024-01-10T13:56:30.281035+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:210)"} []
[2024-01-10T13:56:30.281100+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:96)"} []
[2024-01-10T13:56:30.281155+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::next() should either be compatible with Iterator::next(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::next() should either be compatible with Iterator::next(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:104)"} []
[2024-01-10T13:56:30.281218+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:114)"} []
[2024-01-10T13:56:30.281279+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::valid() should either be compatible with Iterator::valid(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::valid() should either be compatible with Iterator::valid(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:124)"} []
[2024-01-10T13:56:30.281341+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:135)"} []
[2024-01-10T13:56:30.281391+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::seek($position) should either be compatible with SeekableIterator::seek(int $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::seek($position) should either be compatible with SeekableIterator::seek(int $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:246)"} []
[2024-01-10T13:56:30.281457+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:96)"} []
[2024-01-10T13:56:30.281523+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::next() should either be compatible with Iterator::next(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::next() should either be compatible with Iterator::next(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:104)"} []
[2024-01-10T13:56:30.281581+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:114)"} []
[2024-01-10T13:56:30.281635+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::valid() should either be compatible with Iterator::valid(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::valid() should either be compatible with Iterator::valid(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:124)"} []
[2024-01-10T13:56:30.281689+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:135)"} []
[2024-01-10T13:56:30.281743+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::offsetExists($position) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::offsetExists($position) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:147)"} []
[2024-01-10T13:56:30.281793+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::offsetGet($position) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::offsetGet($position) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:161)"} []
[2024-01-10T13:56:30.281840+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::offsetSet($position, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::offsetSet($position, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:177)"} []
[2024-01-10T13:56:30.281890+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::offsetUnset($position) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::offsetUnset($position) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:189)"} []
[2024-01-10T13:56:30.281950+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:232)"} []
[2024-01-10T13:56:30.286525+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:56:30.286603+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:56:30.286661+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:56:30.286703+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:56:30.286753+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:56:30.286817+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:56:30.287580+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:56:30.287888+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:56:30.288148+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:56:30.289170+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:56:30.289345+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:56:30.290213+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:56:30.290383+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:56:30.291738+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:56:30.291923+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:56:30.293102+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:56:30.294715+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:56:30.294962+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:56:30.296950+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:56:30.298093+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:56:30.335469+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:56:30.335595+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:56:30.393981+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:56:30.398944+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:56:30.399123+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:56:30.399201+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:56:30.399251+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:56:30.399873+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"08cd49"},"request_uri":"http://localhost:8001/_wdt/08cd49","method":"GET"} []
[2024-01-10T13:56:30.401618+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:56:30.401745+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:56:30.401829+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:56:30.401920+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:56:30.402015+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:56:30.402093+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:56:30.403411+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:56:30.403538+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:56:30.403655+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:56:30.403763+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:56:31.026198+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:56:31.027796+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:56:31","2":"2024-01-10 13:56:31","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:56:31","2":"2024-01-10 13:56:31","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:56:31.030234+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:56:32.032057+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:56:32.033683+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:56:32","2":"2024-01-10 13:56:32","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:56:32","2":"2024-01-10 13:56:32","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:56:32.035398+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:56:33.036653+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:56:33.037787+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:56:33","2":"2024-01-10 13:56:33","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:56:33","2":"2024-01-10 13:56:33","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:56:33.039488+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:56:34.041067+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:56:34.042876+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:56:34","2":"2024-01-10 13:56:34","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:56:34","2":"2024-01-10 13:56:34","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:56:34.045710+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:56:35.047443+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:56:35.048475+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:56:35","2":"2024-01-10 13:56:35","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:56:35","2":"2024-01-10 13:56:35","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:56:35.049829+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:56:36.050960+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:56:36.052542+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:56:36","2":"2024-01-10 13:56:36","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:56:36","2":"2024-01-10 13:56:36","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:56:36.055227+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:56:37.058168+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:56:37.059993+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:56:37","2":"2024-01-10 13:56:37","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:56:37","2":"2024-01-10 13:56:37","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:56:37.061700+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:56:38.063035+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:56:38.064256+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:56:38","2":"2024-01-10 13:56:38","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:56:38","2":"2024-01-10 13:56:38","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:56:38.066138+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:56:39.067597+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:56:39.069251+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:56:39","2":"2024-01-10 13:56:39","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:56:39","2":"2024-01-10 13:56:39","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:56:39.071521+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:56:40.073158+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:56:40.074368+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:56:40","2":"2024-01-10 13:56:40","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:56:40","2":"2024-01-10 13:56:40","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:56:40.077203+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:56:41.078716+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:56:41.079852+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:56:41","2":"2024-01-10 13:56:41","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:56:41","2":"2024-01-10 13:56:41","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:56:41.081494+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:56:42.082696+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:56:42.083629+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:56:42","2":"2024-01-10 13:56:42","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:56:42","2":"2024-01-10 13:56:42","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:56:42.085169+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:56:43.086226+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:56:43.087558+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:56:43","2":"2024-01-10 13:56:43","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:56:43","2":"2024-01-10 13:56:43","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:56:43.089700+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:56:44.091456+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:56:44.092869+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:56:44","2":"2024-01-10 13:56:44","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:56:44","2":"2024-01-10 13:56:44","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:56:44.095210+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:56:45.096941+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:56:45.098414+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:56:45","2":"2024-01-10 13:56:45","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:56:45","2":"2024-01-10 13:56:45","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:56:45.100609+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:56:46.102039+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:56:46.103341+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:56:46","2":"2024-01-10 13:56:46","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:56:46","2":"2024-01-10 13:56:46","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:56:46.105419+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:56:47.107012+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:56:47.108124+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:56:47","2":"2024-01-10 13:56:47","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:56:47","2":"2024-01-10 13:56:47","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:56:47.110006+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:56:48.111385+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:56:48.112784+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:56:48","2":"2024-01-10 13:56:48","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:56:48","2":"2024-01-10 13:56:48","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:56:48.115190+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:56:49.116943+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:56:49.118477+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:56:49","2":"2024-01-10 13:56:49","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:56:49","2":"2024-01-10 13:56:49","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:56:49.121141+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:56:50.122827+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:56:50.124018+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:56:50","2":"2024-01-10 13:56:50","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:56:50","2":"2024-01-10 13:56:50","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:56:50.126197+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:56:51.128282+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:56:51.129275+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:56:51","2":"2024-01-10 13:56:51","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:56:51","2":"2024-01-10 13:56:51","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:56:51.130512+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:56:52.131751+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:56:52.132852+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:56:52","2":"2024-01-10 13:56:52","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:56:52","2":"2024-01-10 13:56:52","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:56:52.134382+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:56:53.135374+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:56:53.135667+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:56:53","2":"2024-01-10 13:56:53","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:56:53","2":"2024-01-10 13:56:53","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:56:53.136151+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:56:54.136620+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:56:54.143803+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:56:54","2":"2024-01-10 13:56:54","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:56:54","2":"2024-01-10 13:56:54","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:56:54.150524+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:56:55.152724+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:56:55.153116+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:56:55","2":"2024-01-10 13:56:55","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:56:55","2":"2024-01-10 13:56:55","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:56:55.153630+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:56:56.154074+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:56:56.155118+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:56:56","2":"2024-01-10 13:56:56","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:56:56","2":"2024-01-10 13:56:56","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:56:56.156258+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:56:57.157346+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:56:57.158350+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:56:57","2":"2024-01-10 13:56:57","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:56:57","2":"2024-01-10 13:56:57","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:56:57.159799+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:56:58.161007+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:56:58.161739+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:56:58","2":"2024-01-10 13:56:58","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:56:58","2":"2024-01-10 13:56:58","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:56:58.162832+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:56:59.163830+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:56:59.164655+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:56:59","2":"2024-01-10 13:56:59","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:56:59","2":"2024-01-10 13:56:59","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:56:59.165922+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:57:00.166928+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:57:00.168044+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:57:00","2":"2024-01-10 13:57:00","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:57:00","2":"2024-01-10 13:57:00","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:57:00.169746+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:57:01.171580+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:57:01.171996+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:57:01","2":"2024-01-10 13:57:01","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:57:01","2":"2024-01-10 13:57:01","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:57:01.172853+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:57:02.173524+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:57:02.174468+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:57:02","2":"2024-01-10 13:57:02","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:57:02","2":"2024-01-10 13:57:02","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:57:02.176187+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:57:03.177667+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:57:03.178820+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:57:03","2":"2024-01-10 13:57:03","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:57:03","2":"2024-01-10 13:57:03","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:57:03.180616+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:57:04.182362+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:57:04.183427+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:57:04","2":"2024-01-10 13:57:04","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:57:04","2":"2024-01-10 13:57:04","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:57:04.185530+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:57:05.187082+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:57:05.188711+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:57:05","2":"2024-01-10 13:57:05","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:57:05","2":"2024-01-10 13:57:05","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:57:05.190974+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:57:06.192716+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:57:06.193971+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:57:06","2":"2024-01-10 13:57:06","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:57:06","2":"2024-01-10 13:57:06","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:57:06.195692+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:57:07.197238+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:57:07.197619+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:57:07","2":"2024-01-10 13:57:07","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:57:07","2":"2024-01-10 13:57:07","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:57:07.198131+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:57:08.198478+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:57:08.198815+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:57:08","2":"2024-01-10 13:57:08","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:57:08","2":"2024-01-10 13:57:08","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:57:08.199497+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:57:09.199992+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:57:09.200977+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:57:09","2":"2024-01-10 13:57:09","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:57:09","2":"2024-01-10 13:57:09","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:57:09.202284+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:57:10.203300+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:57:10.204100+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:57:10","2":"2024-01-10 13:57:10","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:57:10","2":"2024-01-10 13:57:10","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:57:10.205243+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:57:11.206155+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:57:11.207005+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:57:11","2":"2024-01-10 13:57:11","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:57:11","2":"2024-01-10 13:57:11","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:57:11.208221+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:57:12.209294+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:57:12.210695+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:57:12","2":"2024-01-10 13:57:12","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:57:12","2":"2024-01-10 13:57:12","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:57:12.213346+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:57:13.214935+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:57:13.217282+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:57:13","2":"2024-01-10 13:57:13","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:57:13","2":"2024-01-10 13:57:13","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:57:13.219460+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:57:14.220751+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:57:14.221482+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:57:14","2":"2024-01-10 13:57:14","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:57:14","2":"2024-01-10 13:57:14","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:57:14.222585+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:57:15.223449+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:57:15.224511+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:57:15","2":"2024-01-10 13:57:15","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:57:15","2":"2024-01-10 13:57:15","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:57:15.226091+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:57:16.227318+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:57:16.229107+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:57:16","2":"2024-01-10 13:57:16","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:57:16","2":"2024-01-10 13:57:16","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:57:16.231575+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:57:17.233219+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:57:17.233595+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:57:17","2":"2024-01-10 13:57:17","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:57:17","2":"2024-01-10 13:57:17","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:57:17.234142+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:57:18.234725+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:57:18.235982+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:57:18","2":"2024-01-10 13:57:18","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:57:18","2":"2024-01-10 13:57:18","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:57:18.238703+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:57:19.241082+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:57:19.241867+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:57:19","2":"2024-01-10 13:57:19","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:57:19","2":"2024-01-10 13:57:19","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:57:19.243011+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:57:20.244055+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:57:20.245645+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:57:20","2":"2024-01-10 13:57:20","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:57:20","2":"2024-01-10 13:57:20","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:57:20.247702+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:57:21.249010+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:57:21.250166+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:57:21","2":"2024-01-10 13:57:21","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:57:21","2":"2024-01-10 13:57:21","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:57:21.251926+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:57:22.253424+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:57:22.254382+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:57:22","2":"2024-01-10 13:57:22","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:57:22","2":"2024-01-10 13:57:22","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:57:22.255788+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:57:23.257181+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:57:23.258636+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:57:23","2":"2024-01-10 13:57:23","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:57:23","2":"2024-01-10 13:57:23","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:57:23.260598+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:57:24.262423+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:57:24.263442+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:57:24","2":"2024-01-10 13:57:24","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:57:24","2":"2024-01-10 13:57:24","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:57:24.265026+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:57:25.266201+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:57:25.267828+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:57:25","2":"2024-01-10 13:57:25","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:57:25","2":"2024-01-10 13:57:25","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:57:25.270402+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:57:26.272104+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:57:26.273176+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:57:26","2":"2024-01-10 13:57:26","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:57:26","2":"2024-01-10 13:57:26","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:57:26.274756+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:57:27.276401+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:57:27.277909+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:57:27","2":"2024-01-10 13:57:27","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:57:27","2":"2024-01-10 13:57:27","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:57:27.280254+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:57:28.281835+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:57:28.282838+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:57:28","2":"2024-01-10 13:57:28","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:57:28","2":"2024-01-10 13:57:28","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:57:28.284448+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:57:29.285560+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:57:29.286910+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:57:29","2":"2024-01-10 13:57:29","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:57:29","2":"2024-01-10 13:57:29","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:57:29.288949+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:57:30.290442+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:57:30.292009+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:57:30","2":"2024-01-10 13:57:30","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:57:30","2":"2024-01-10 13:57:30","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:57:30.294229+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:57:31.295914+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:57:31.297219+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:57:31","2":"2024-01-10 13:57:31","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:57:31","2":"2024-01-10 13:57:31","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:57:31.298509+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:57:32.299599+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:57:32.300565+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:57:32","2":"2024-01-10 13:57:32","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:57:32","2":"2024-01-10 13:57:32","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:57:32.302090+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:57:33.303401+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:57:33.304784+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:57:33","2":"2024-01-10 13:57:33","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:57:33","2":"2024-01-10 13:57:33","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:57:33.306780+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:57:34.308048+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:57:34.309089+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:57:34","2":"2024-01-10 13:57:34","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:57:34","2":"2024-01-10 13:57:34","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:57:34.310568+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:57:35.311661+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:57:35.312178+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:57:35","2":"2024-01-10 13:57:35","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:57:35","2":"2024-01-10 13:57:35","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:57:35.313012+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:57:36.313687+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:57:36.315256+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:57:36","2":"2024-01-10 13:57:36","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:57:36","2":"2024-01-10 13:57:36","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:57:36.317503+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:57:37.319297+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:57:37.321037+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:57:37","2":"2024-01-10 13:57:37","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:57:37","2":"2024-01-10 13:57:37","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:57:37.323547+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:57:38.325482+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:57:38.325801+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:57:38","2":"2024-01-10 13:57:38","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:57:38","2":"2024-01-10 13:57:38","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:57:38.326289+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:57:39.326865+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:57:39.328029+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:57:39","2":"2024-01-10 13:57:39","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:57:39","2":"2024-01-10 13:57:39","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:57:39.329696+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:57:40.330972+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:57:40.332000+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:57:40","2":"2024-01-10 13:57:40","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:57:40","2":"2024-01-10 13:57:40","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:57:40.333897+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:57:41.335061+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:57:41.336048+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:57:41","2":"2024-01-10 13:57:41","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:57:41","2":"2024-01-10 13:57:41","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:57:41.337553+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:57:42.338842+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:57:42.339174+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:57:42","2":"2024-01-10 13:57:42","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:57:42","2":"2024-01-10 13:57:42","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:57:42.339626+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:57:43.340060+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:57:43.341651+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:57:43","2":"2024-01-10 13:57:43","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:57:43","2":"2024-01-10 13:57:43","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:57:43.343567+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:57:44.344725+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:57:44.345197+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:57:44","2":"2024-01-10 13:57:44","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:57:44","2":"2024-01-10 13:57:44","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:57:44.345858+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:57:45.346438+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:57:45.347956+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:57:45","2":"2024-01-10 13:57:45","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:57:45","2":"2024-01-10 13:57:45","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:57:45.350343+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:57:46.351720+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:57:46.352885+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:57:46","2":"2024-01-10 13:57:46","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:57:46","2":"2024-01-10 13:57:46","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:57:46.354729+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:57:47.355916+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:57:47.357531+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:57:47","2":"2024-01-10 13:57:47","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:57:47","2":"2024-01-10 13:57:47","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:57:47.360271+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:57:48.362350+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:57:48.363067+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:57:48","2":"2024-01-10 13:57:48","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:57:48","2":"2024-01-10 13:57:48","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:57:48.364150+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:57:49.365099+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:57:49.366189+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:57:49","2":"2024-01-10 13:57:49","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:57:49","2":"2024-01-10 13:57:49","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:57:49.367729+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:57:50.369330+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:57:50.370419+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:57:50","2":"2024-01-10 13:57:50","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:57:50","2":"2024-01-10 13:57:50","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:57:50.372548+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:57:51.373863+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:57:51.374935+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:57:51","2":"2024-01-10 13:57:51","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:57:51","2":"2024-01-10 13:57:51","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:57:51.376570+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:57:52.377876+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:57:52.378945+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:57:52","2":"2024-01-10 13:57:52","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:57:52","2":"2024-01-10 13:57:52","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:57:52.380338+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:57:53.381574+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:57:53.382868+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:57:53","2":"2024-01-10 13:57:53","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:57:53","2":"2024-01-10 13:57:53","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:57:53.385216+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:57:54.388291+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:57:54.389794+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:57:54","2":"2024-01-10 13:57:54","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:57:54","2":"2024-01-10 13:57:54","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:57:54.391800+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:57:55.393147+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:57:55.393879+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:57:55","2":"2024-01-10 13:57:55","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:57:55","2":"2024-01-10 13:57:55","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:57:55.394728+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:57:56.395370+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:57:56.396214+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:57:56","2":"2024-01-10 13:57:56","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:57:56","2":"2024-01-10 13:57:56","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:57:56.398371+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:57:57.400234+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:57:57.401370+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:57:57","2":"2024-01-10 13:57:57","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:57:57","2":"2024-01-10 13:57:57","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:57:57.403023+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:57:58.404169+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:57:58.405205+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:57:58","2":"2024-01-10 13:57:58","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:57:58","2":"2024-01-10 13:57:58","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:57:58.406789+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:57:59.407989+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:57:59.409486+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:57:59","2":"2024-01-10 13:57:59","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:57:59","2":"2024-01-10 13:57:59","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:57:59.412595+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:58:00.414282+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:58:00.415656+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:58:00","2":"2024-01-10 13:58:00","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:58:00","2":"2024-01-10 13:58:00","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:58:00.417861+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:58:01.419594+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:58:01.420053+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:58:01","2":"2024-01-10 13:58:01","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:58:01","2":"2024-01-10 13:58:01","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:58:01.420831+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:58:02.421530+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:58:02.422864+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:58:02","2":"2024-01-10 13:58:02","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:58:02","2":"2024-01-10 13:58:02","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:58:02.424947+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:58:03.426508+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:58:03.428099+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:58:03","2":"2024-01-10 13:58:03","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:58:03","2":"2024-01-10 13:58:03","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:58:03.430399+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:58:04.432686+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:58:04.434435+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:58:04","2":"2024-01-10 13:58:04","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:58:04","2":"2024-01-10 13:58:04","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:58:04.436704+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:58:05.438132+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:58:05.438980+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:58:05","2":"2024-01-10 13:58:05","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:58:05","2":"2024-01-10 13:58:05","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:58:05.440248+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:58:06.441464+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:58:06.442421+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:58:06","2":"2024-01-10 13:58:06","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:58:06","2":"2024-01-10 13:58:06","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:58:06.443934+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:58:07.445312+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:58:07.445804+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:58:07","2":"2024-01-10 13:58:07","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:58:07","2":"2024-01-10 13:58:07","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:58:07.446495+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:58:08.447079+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:58:08.448550+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:58:08","2":"2024-01-10 13:58:08","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:58:08","2":"2024-01-10 13:58:08","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:58:08.450472+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:58:09.451880+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:58:09.453109+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:58:09","2":"2024-01-10 13:58:09","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:58:09","2":"2024-01-10 13:58:09","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:58:09.454916+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:58:10.456414+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:58:10.458081+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:58:10","2":"2024-01-10 13:58:10","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:58:10","2":"2024-01-10 13:58:10","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:58:10.460304+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:58:11.461637+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:58:11.462823+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:58:11","2":"2024-01-10 13:58:11","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:58:11","2":"2024-01-10 13:58:11","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:58:11.464433+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:58:12.465463+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:58:12.465955+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:58:12","2":"2024-01-10 13:58:12","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:58:12","2":"2024-01-10 13:58:12","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:58:12.466735+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:58:13.467316+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:58:13.467878+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:58:13","2":"2024-01-10 13:58:13","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:58:13","2":"2024-01-10 13:58:13","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:58:13.468673+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:58:14.469366+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:58:14.470497+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:58:14","2":"2024-01-10 13:58:14","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:58:14","2":"2024-01-10 13:58:14","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:58:14.472122+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:58:15.473319+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:58:15.474345+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:58:15","2":"2024-01-10 13:58:15","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:58:15","2":"2024-01-10 13:58:15","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:58:15.475831+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:58:16.477139+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:58:16.478330+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:58:16","2":"2024-01-10 13:58:16","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:58:16","2":"2024-01-10 13:58:16","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:58:16.480174+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:58:17.481625+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:58:17.482346+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:58:17","2":"2024-01-10 13:58:17","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:58:17","2":"2024-01-10 13:58:17","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:58:17.483257+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:58:18.483965+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:58:18.485298+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:58:18","2":"2024-01-10 13:58:18","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:58:18","2":"2024-01-10 13:58:18","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:58:18.487153+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:58:19.488252+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:58:19.489411+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:58:19","2":"2024-01-10 13:58:19","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:58:19","2":"2024-01-10 13:58:19","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:58:19.491029+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:58:20.492288+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:58:20.493663+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:58:20","2":"2024-01-10 13:58:20","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:58:20","2":"2024-01-10 13:58:20","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:58:20.495899+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:58:21.497483+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:58:21.497758+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:58:21","2":"2024-01-10 13:58:21","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:58:21","2":"2024-01-10 13:58:21","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:58:21.498160+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:58:22.498558+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:58:22.499710+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:58:22","2":"2024-01-10 13:58:22","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:58:22","2":"2024-01-10 13:58:22","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:58:22.501648+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:58:23.502850+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:58:23.505590+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:58:23","2":"2024-01-10 13:58:23","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:58:23","2":"2024-01-10 13:58:23","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:58:23.509614+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:58:24.512992+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:58:24.514466+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:58:24","2":"2024-01-10 13:58:24","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:58:24","2":"2024-01-10 13:58:24","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:58:24.516989+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:58:25.518728+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:58:25.519295+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:58:25","2":"2024-01-10 13:58:25","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:58:25","2":"2024-01-10 13:58:25","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:58:25.520192+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:58:26.522705+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:58:26.524006+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:58:26","2":"2024-01-10 13:58:26","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:58:26","2":"2024-01-10 13:58:26","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:58:26.525446+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:58:27.526764+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:58:27.528978+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:58:27","2":"2024-01-10 13:58:27","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:58:27","2":"2024-01-10 13:58:27","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:58:27.531894+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:58:28.533793+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:58:28.534131+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:58:28","2":"2024-01-10 13:58:28","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:58:28","2":"2024-01-10 13:58:28","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:58:28.534641+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:58:29.535130+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:58:29.536147+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:58:29","2":"2024-01-10 13:58:29","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:58:29","2":"2024-01-10 13:58:29","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:58:29.537873+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:58:30.539051+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:58:30.539926+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:58:30","2":"2024-01-10 13:58:30","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:58:30","2":"2024-01-10 13:58:30","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:58:30.541594+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:58:31.542731+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:58:31.543985+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:58:31","2":"2024-01-10 13:58:31","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:58:31","2":"2024-01-10 13:58:31","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:58:31.546720+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:58:32.548088+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:58:32.548913+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:58:32","2":"2024-01-10 13:58:32","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:58:32","2":"2024-01-10 13:58:32","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:58:32.550073+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:58:33.550952+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:58:33.551589+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:58:33","2":"2024-01-10 13:58:33","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:58:33","2":"2024-01-10 13:58:33","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:58:33.552486+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:58:34.553304+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:58:34.554556+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:58:34","2":"2024-01-10 13:58:34","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:58:34","2":"2024-01-10 13:58:34","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:58:34.556540+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:58:35.558443+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:58:35.559531+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:58:35","2":"2024-01-10 13:58:35","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:58:35","2":"2024-01-10 13:58:35","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:58:35.561139+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:58:36.562418+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:58:36.563785+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:58:36","2":"2024-01-10 13:58:36","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:58:36","2":"2024-01-10 13:58:36","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:58:36.566119+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:58:37.567731+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:58:37.568856+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:58:37","2":"2024-01-10 13:58:37","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:58:37","2":"2024-01-10 13:58:37","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:58:37.570560+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:58:38.572479+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:58:38.573045+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:58:38","2":"2024-01-10 13:58:38","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:58:38","2":"2024-01-10 13:58:38","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:58:38.573815+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:58:39.574327+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:58:39.575685+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:58:39","2":"2024-01-10 13:58:39","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:58:39","2":"2024-01-10 13:58:39","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:58:39.577199+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:58:40.578501+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:58:40.579264+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:58:40","2":"2024-01-10 13:58:40","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:58:40","2":"2024-01-10 13:58:40","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:58:40.580527+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:58:41.581554+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:58:41.582398+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:58:41","2":"2024-01-10 13:58:41","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:58:41","2":"2024-01-10 13:58:41","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:58:41.583615+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:58:42.584756+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:58:42.585879+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:58:42","2":"2024-01-10 13:58:42","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:58:42","2":"2024-01-10 13:58:42","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:58:42.588257+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:58:43.590001+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:58:43.590909+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:58:43","2":"2024-01-10 13:58:43","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:58:43","2":"2024-01-10 13:58:43","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:58:43.592785+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:58:44.594006+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:58:44.594406+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:58:44","2":"2024-01-10 13:58:44","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:58:44","2":"2024-01-10 13:58:44","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:58:44.595319+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:58:45.596081+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:58:45.596616+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:58:45","2":"2024-01-10 13:58:45","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:58:45","2":"2024-01-10 13:58:45","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:58:45.597517+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:58:46.598078+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:58:46.598383+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:58:46","2":"2024-01-10 13:58:46","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:58:46","2":"2024-01-10 13:58:46","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:58:46.598902+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:58:47.599344+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:58:47.600104+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:58:47","2":"2024-01-10 13:58:47","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:58:47","2":"2024-01-10 13:58:47","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:58:47.601214+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:58:48.602561+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:58:48.603367+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:58:48","2":"2024-01-10 13:58:48","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:58:48","2":"2024-01-10 13:58:48","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:58:48.605166+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:58:49.606527+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:58:49.607634+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:58:49","2":"2024-01-10 13:58:49","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:58:49","2":"2024-01-10 13:58:49","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:58:49.609339+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:58:50.610936+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:58:50.611948+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:58:50","2":"2024-01-10 13:58:50","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:58:50","2":"2024-01-10 13:58:50","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:58:50.613739+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:58:51.615091+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:58:51.616232+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:58:51","2":"2024-01-10 13:58:51","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:58:51","2":"2024-01-10 13:58:51","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:58:51.618075+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:58:52.619418+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:58:52.621015+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:58:52","2":"2024-01-10 13:58:52","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:58:52","2":"2024-01-10 13:58:52","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:58:52.623557+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:58:53.626265+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:58:53.628110+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:58:53","2":"2024-01-10 13:58:53","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:58:53","2":"2024-01-10 13:58:53","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:58:53.630069+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:58:54.631604+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:58:54.632792+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:58:54","2":"2024-01-10 13:58:54","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:58:54","2":"2024-01-10 13:58:54","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:58:54.634388+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:58:55.635578+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:58:55.636582+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:58:55","2":"2024-01-10 13:58:55","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:58:55","2":"2024-01-10 13:58:55","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:58:55.638314+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:58:56.639995+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:58:56.641935+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:58:56","2":"2024-01-10 13:58:56","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:58:56","2":"2024-01-10 13:58:56","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:58:56.644772+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:58:57.646541+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:58:57.648591+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:58:57","2":"2024-01-10 13:58:57","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:58:57","2":"2024-01-10 13:58:57","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:58:57.650468+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:58:58.651968+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:58:58.653302+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:58:58","2":"2024-01-10 13:58:58","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:58:58","2":"2024-01-10 13:58:58","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:58:58.655261+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:58:59.656886+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:58:59.657711+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:58:59","2":"2024-01-10 13:58:59","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:58:59","2":"2024-01-10 13:58:59","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:58:59.659041+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:59:00.659945+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:59:00.660386+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:59:00","2":"2024-01-10 13:59:00","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:59:00","2":"2024-01-10 13:59:00","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:59:00.661061+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:59:01.661837+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:59:01.665174+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:59:01","2":"2024-01-10 13:59:01","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:59:01","2":"2024-01-10 13:59:01","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:59:01.667264+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:59:02.668675+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:59:02.669974+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:59:02","2":"2024-01-10 13:59:02","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:59:02","2":"2024-01-10 13:59:02","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:59:02.671172+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:59:03.672052+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:59:03.673421+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:59:03","2":"2024-01-10 13:59:03","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:59:03","2":"2024-01-10 13:59:03","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:59:03.675971+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:59:04.677426+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:59:04.678205+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:59:04","2":"2024-01-10 13:59:04","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:59:04","2":"2024-01-10 13:59:04","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:59:04.679727+00:00] doctrine.DEBUG: Committing transaction [] []
