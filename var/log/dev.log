[2024-01-08T18:25:23.447355+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-08T18:25:23.448198+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-08T18:25:23.448232+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-08T18:25:23.448256+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-08T18:25:23.448276+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Console\Helper\HelperSet::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Console\\Helper\\HelperSet::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Helper/HelperSet.php:94)"} []
[2024-01-08T18:25:23.780392+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-08T18:25:23.780493+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-08T18:25:23.781043+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-08T18:25:23.781100+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-08T18:25:25.353110+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-08T18:25:25.353979+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-08T18:25:25.354012+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-08T18:25:25.354047+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-08T18:25:25.354069+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Console\Helper\HelperSet::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Console\\Helper\\HelperSet::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Helper/HelperSet.php:94)"} []
[2024-01-08T18:25:39.414557+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-08T18:25:39.415379+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-08T18:25:39.415410+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-08T18:25:39.415433+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-08T18:25:39.415462+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Console\Helper\HelperSet::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Console\\Helper\\HelperSet::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Helper/HelperSet.php:94)"} []
[2024-01-08T18:25:39.755844+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-08T18:25:39.755929+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-08T18:25:39.756474+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-08T18:25:39.756530+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-08T18:25:41.341718+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-08T18:25:41.342567+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-08T18:25:41.342618+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-08T18:25:41.342641+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-08T18:25:41.342663+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Console\Helper\HelperSet::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Console\\Helper\\HelperSet::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Helper/HelperSet.php:94)"} []
[2024-01-10T13:07:52.957303+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:07:52.957534+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:07:52.957614+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:07:52.957678+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:07:52.972500+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Routing\RouteCollection::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Routing\\RouteCollection::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/routing/RouteCollection.php:59)"} []
[2024-01-10T13:07:52.972632+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Routing\RouteCollection::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Routing\\RouteCollection::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/routing/RouteCollection.php:69)"} []
[2024-01-10T13:07:53.003368+00:00] request.INFO: Matched route "newsletters_prepare". {"route":"newsletters_prepare","route_parameters":{"_route":"newsletters_prepare","_controller":"App\\Controller\\NewslettersController::prepare"},"request_uri":"http://localhost:8001/newsletters/prepare","method":"GET"} []
[2024-01-10T13:07:53.010235+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:07:53.010325+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:07:53.010451+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:07:53.010506+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:07:53.011309+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::offsetExists($option) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::offsetExists($option) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:1149)"} []
[2024-01-10T13:07:53.011417+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::offsetGet($option, bool $triggerDeprecation = true) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::offsetGet($option, bool $triggerDeprecation = true) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:908)"} []
[2024-01-10T13:07:53.011524+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::offsetSet($option, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::offsetSet($option, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:1165)"} []
[2024-01-10T13:07:53.011602+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::offsetUnset($option) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::offsetUnset($option) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:1177)"} []
[2024-01-10T13:07:53.011660+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:1193)"} []
[2024-01-10T13:07:53.011952+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormBuilder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormBuilder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormBuilder.php:218)"} []
[2024-01-10T13:07:53.012034+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormBuilder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormBuilder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormBuilder.php:164)"} []
[2024-01-10T13:07:53.016969+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\ButtonBuilder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\ButtonBuilder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/ButtonBuilder.php:728)"} []
[2024-01-10T13:07:53.017048+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\ButtonBuilder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\ButtonBuilder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/ButtonBuilder.php:718)"} []
[2024-01-10T13:07:53.017142+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:1024)"} []
[2024-01-10T13:07:53.017205+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::offsetExists($name) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::offsetExists($name) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:968)"} []
[2024-01-10T13:07:53.017246+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::offsetGet($name) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::offsetGet($name) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:982)"} []
[2024-01-10T13:07:53.017283+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::offsetSet($name, $child) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::offsetSet($name, $child) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:1000)"} []
[2024-01-10T13:07:53.017316+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::offsetUnset($name) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::offsetUnset($name) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:1014)"} []
[2024-01-10T13:07:53.017347+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:1034)"} []
[2024-01-10T13:07:53.017425+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:104)"} []
[2024-01-10T13:07:53.017463+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:114)"} []
[2024-01-10T13:07:53.017496+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:128)"} []
[2024-01-10T13:07:53.017529+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:151)"} []
[2024-01-10T13:07:53.017560+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:168)"} []
[2024-01-10T13:07:53.017591+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:176)"} []
[2024-01-10T13:07:53.017683+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:443)"} []
[2024-01-10T13:07:53.017723+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::offsetExists($offset) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::offsetExists($offset) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:54)"} []
[2024-01-10T13:07:53.017756+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::offsetGet($offset) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::offsetGet($offset) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:70)"} []
[2024-01-10T13:07:53.017788+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::offsetSet($offset, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::offsetSet($offset, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:87)"} []
[2024-01-10T13:07:53.017820+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::offsetUnset($offset) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::offsetUnset($offset) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:103)"} []
[2024-01-10T13:07:53.017861+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:433)"} []
[2024-01-10T13:07:53.017984+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\InheritDataAwareIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\InheritDataAwareIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/InheritDataAwareIterator.php:41)"} []
[2024-01-10T13:07:53.018023+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\InheritDataAwareIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\InheritDataAwareIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/InheritDataAwareIterator.php:33)"} []
[2024-01-10T13:07:53.018092+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMapIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMapIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMapIterator.php:108)"} []
[2024-01-10T13:07:53.018151+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMapIterator::next() should either be compatible with Iterator::next(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMapIterator::next() should either be compatible with Iterator::next(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMapIterator.php:118)"} []
[2024-01-10T13:07:53.018212+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMapIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMapIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMapIterator.php:136)"} []
[2024-01-10T13:07:53.018272+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMapIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMapIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMapIterator.php:160)"} []
[2024-01-10T13:07:53.018399+00:00] php.INFO: Deprecated: Return type of Symfony\Component\PropertyAccess\PropertyPath::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\PropertyAccess\\PropertyPath::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/property-access/PropertyPath.php:157)"} []
[2024-01-10T13:07:53.018840+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::offsetExists($name) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::offsetExists($name) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:123)"} []
[2024-01-10T13:07:53.018902+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::offsetGet($name) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::offsetGet($name) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:111)"} []
[2024-01-10T13:07:53.018958+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::offsetSet($name, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::offsetSet($name, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:135)"} []
[2024-01-10T13:07:53.019013+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::offsetUnset($name) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::offsetUnset($name) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:147)"} []
[2024-01-10T13:07:53.019066+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:157)"} []
[2024-01-10T13:07:53.019127+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:167)"} []
[2024-01-10T13:07:53.019222+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:200)"} []
[2024-01-10T13:07:53.019280+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:210)"} []
[2024-01-10T13:07:53.019335+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:96)"} []
[2024-01-10T13:07:53.019391+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::next() should either be compatible with Iterator::next(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::next() should either be compatible with Iterator::next(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:104)"} []
[2024-01-10T13:07:53.019445+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:114)"} []
[2024-01-10T13:07:53.019506+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::valid() should either be compatible with Iterator::valid(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::valid() should either be compatible with Iterator::valid(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:124)"} []
[2024-01-10T13:07:53.019561+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:135)"} []
[2024-01-10T13:07:53.019616+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::seek($position) should either be compatible with SeekableIterator::seek(int $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::seek($position) should either be compatible with SeekableIterator::seek(int $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:246)"} []
[2024-01-10T13:07:53.019670+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:96)"} []
[2024-01-10T13:07:53.019724+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::next() should either be compatible with Iterator::next(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::next() should either be compatible with Iterator::next(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:104)"} []
[2024-01-10T13:07:53.019778+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:114)"} []
[2024-01-10T13:07:53.019838+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::valid() should either be compatible with Iterator::valid(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::valid() should either be compatible with Iterator::valid(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:124)"} []
[2024-01-10T13:07:53.019893+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:135)"} []
[2024-01-10T13:07:53.019953+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::offsetExists($position) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::offsetExists($position) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:147)"} []
[2024-01-10T13:07:53.020010+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::offsetGet($position) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::offsetGet($position) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:161)"} []
[2024-01-10T13:07:53.020065+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::offsetSet($position, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::offsetSet($position, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:177)"} []
[2024-01-10T13:07:53.020153+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::offsetUnset($position) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::offsetUnset($position) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:189)"} []
[2024-01-10T13:07:53.020223+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:232)"} []
[2024-01-10T13:07:53.020997+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":null,"driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":null,"driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:07:53.024063+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:07:53.024158+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:07:53.024225+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:07:53.024289+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:07:53.024383+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:07:53.024429+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:07:53.025188+00:00] request.CRITICAL: Uncaught PHP Exception Doctrine\DBAL\Exception\ConnectionException: "An exception occurred in the driver: SQLSTATE[HY000] [1045] Access denied for user 'root'@'localhost' (using password: NO)" at /home/massoud/www/Symfony/Newsletter/vendor/doctrine/dbal/src/Driver/API/MySQL/ExceptionConverter.php line 101 {"exception":"[object] (Doctrine\\DBAL\\Exception\\ConnectionException(code: 1045): An exception occurred in the driver: SQLSTATE[HY000] [1045] Access denied for user 'root'@'localhost' (using password: NO) at /home/massoud/www/Symfony/Newsletter/vendor/doctrine/dbal/src/Driver/API/MySQL/ExceptionConverter.php:101)\n[previous exception] [object] (Doctrine\\DBAL\\Driver\\PDO\\Exception(code: 1045): SQLSTATE[HY000] [1045] Access denied for user 'root'@'localhost' (using password: NO) at /home/massoud/www/Symfony/Newsletter/vendor/doctrine/dbal/src/Driver/PDO/Exception.php:28)\n[previous exception] [object] (PDOException(code: 1045): SQLSTATE[HY000] [1045] Access denied for user 'root'@'localhost' (using password: NO) at /home/massoud/www/Symfony/Newsletter/vendor/doctrine/dbal/src/Driver/PDO/MySQL/Driver.php:33)"} []
[2024-01-10T13:07:53.242687+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:07:53.244316+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":null,"driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":null,"driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:07:53.245596+00:00] app.ERROR: error while trying to collect executed migrations {"exception":"[object] (Doctrine\\DBAL\\Exception\\ConnectionException(code: 1045): An exception occurred in the driver: SQLSTATE[HY000] [1045] Access denied for user 'root'@'localhost' (using password: NO) at /home/massoud/www/Symfony/Newsletter/vendor/doctrine/dbal/src/Driver/API/MySQL/ExceptionConverter.php:101)\n[previous exception] [object] (Doctrine\\DBAL\\Driver\\PDO\\Exception(code: 1045): SQLSTATE[HY000] [1045] Access denied for user 'root'@'localhost' (using password: NO) at /home/massoud/www/Symfony/Newsletter/vendor/doctrine/dbal/src/Driver/PDO/Exception.php:28)\n[previous exception] [object] (PDOException(code: 1045): SQLSTATE[HY000] [1045] Access denied for user 'root'@'localhost' (using password: NO) at /home/massoud/www/Symfony/Newsletter/vendor/doctrine/dbal/src/Driver/PDO/MySQL/Driver.php:33)"} []
[2024-01-10T13:07:53.247602+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":null,"driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":null,"driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:07:53.248171+00:00] app.ERROR: error while trying to collect executed migrations {"exception":"[object] (Doctrine\\DBAL\\Exception\\ConnectionException(code: 1045): An exception occurred in the driver: SQLSTATE[HY000] [1045] Access denied for user 'root'@'localhost' (using password: NO) at /home/massoud/www/Symfony/Newsletter/vendor/doctrine/dbal/src/Driver/API/MySQL/ExceptionConverter.php:101)\n[previous exception] [object] (Doctrine\\DBAL\\Driver\\PDO\\Exception(code: 1045): SQLSTATE[HY000] [1045] Access denied for user 'root'@'localhost' (using password: NO) at /home/massoud/www/Symfony/Newsletter/vendor/doctrine/dbal/src/Driver/PDO/Exception.php:28)\n[previous exception] [object] (PDOException(code: 1045): SQLSTATE[HY000] [1045] Access denied for user 'root'@'localhost' (using password: NO) at /home/massoud/www/Symfony/Newsletter/vendor/doctrine/dbal/src/Driver/PDO/MySQL/Driver.php:33)"} []
[2024-01-10T13:07:53.264118+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:07:53.264277+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:07:53.548081+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:07:53.548247+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:07:53.548324+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:07:53.548394+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:07:53.549216+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"528df9"},"request_uri":"http://localhost:8001/_wdt/528df9","method":"GET"} []
[2024-01-10T13:07:53.550713+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:07:53.550835+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:07:53.550914+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:07:53.550997+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:07:53.551064+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:07:53.551130+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:07:53.552410+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:07:53.552508+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:07:53.552590+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:07:53.552664+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:08:15.492955+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:08:15.494079+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:08:15.494398+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:08:15.494614+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:08:15.498865+00:00] request.INFO: Matched route "newsletters_prepare". {"route":"newsletters_prepare","route_parameters":{"_route":"newsletters_prepare","_controller":"App\\Controller\\NewslettersController::prepare"},"request_uri":"http://localhost:8001/newsletters/prepare","method":"GET"} []
[2024-01-10T13:08:15.509534+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:08:15.510040+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:08:15.510635+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:08:15.510975+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:08:15.512570+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::offsetExists($option) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::offsetExists($option) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:1149)"} []
[2024-01-10T13:08:15.512896+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::offsetGet($option, bool $triggerDeprecation = true) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::offsetGet($option, bool $triggerDeprecation = true) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:908)"} []
[2024-01-10T13:08:15.513255+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::offsetSet($option, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::offsetSet($option, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:1165)"} []
[2024-01-10T13:08:15.513591+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::offsetUnset($option) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::offsetUnset($option) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:1177)"} []
[2024-01-10T13:08:15.513886+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:1193)"} []
[2024-01-10T13:08:15.514953+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormBuilder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormBuilder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormBuilder.php:218)"} []
[2024-01-10T13:08:15.515355+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormBuilder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormBuilder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormBuilder.php:164)"} []
[2024-01-10T13:08:15.529932+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\ButtonBuilder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\ButtonBuilder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/ButtonBuilder.php:728)"} []
[2024-01-10T13:08:15.530328+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\ButtonBuilder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\ButtonBuilder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/ButtonBuilder.php:718)"} []
[2024-01-10T13:08:15.530911+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:1024)"} []
[2024-01-10T13:08:15.531239+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::offsetExists($name) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::offsetExists($name) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:968)"} []
[2024-01-10T13:08:15.531520+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::offsetGet($name) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::offsetGet($name) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:982)"} []
[2024-01-10T13:08:15.531807+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::offsetSet($name, $child) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::offsetSet($name, $child) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:1000)"} []
[2024-01-10T13:08:15.532131+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::offsetUnset($name) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::offsetUnset($name) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:1014)"} []
[2024-01-10T13:08:15.532456+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:1034)"} []
[2024-01-10T13:08:15.532643+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:104)"} []
[2024-01-10T13:08:15.532797+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:114)"} []
[2024-01-10T13:08:15.532901+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:128)"} []
[2024-01-10T13:08:15.532992+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:151)"} []
[2024-01-10T13:08:15.533083+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:168)"} []
[2024-01-10T13:08:15.533204+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:176)"} []
[2024-01-10T13:08:15.533435+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:443)"} []
[2024-01-10T13:08:15.533614+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::offsetExists($offset) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::offsetExists($offset) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:54)"} []
[2024-01-10T13:08:15.533795+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::offsetGet($offset) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::offsetGet($offset) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:70)"} []
[2024-01-10T13:08:15.533942+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::offsetSet($offset, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::offsetSet($offset, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:87)"} []
[2024-01-10T13:08:15.534043+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::offsetUnset($offset) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::offsetUnset($offset) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:103)"} []
[2024-01-10T13:08:15.534154+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:433)"} []
[2024-01-10T13:08:15.534415+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\InheritDataAwareIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\InheritDataAwareIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/InheritDataAwareIterator.php:41)"} []
[2024-01-10T13:08:15.534520+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\InheritDataAwareIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\InheritDataAwareIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/InheritDataAwareIterator.php:33)"} []
[2024-01-10T13:08:15.534657+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMapIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMapIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMapIterator.php:108)"} []
[2024-01-10T13:08:15.534772+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMapIterator::next() should either be compatible with Iterator::next(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMapIterator::next() should either be compatible with Iterator::next(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMapIterator.php:118)"} []
[2024-01-10T13:08:15.534933+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMapIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMapIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMapIterator.php:136)"} []
[2024-01-10T13:08:15.535102+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMapIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMapIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMapIterator.php:160)"} []
[2024-01-10T13:08:15.535391+00:00] php.INFO: Deprecated: Return type of Symfony\Component\PropertyAccess\PropertyPath::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\PropertyAccess\\PropertyPath::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/property-access/PropertyPath.php:157)"} []
[2024-01-10T13:08:15.536735+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::offsetExists($name) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::offsetExists($name) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:123)"} []
[2024-01-10T13:08:15.536984+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::offsetGet($name) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::offsetGet($name) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:111)"} []
[2024-01-10T13:08:15.537193+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::offsetSet($name, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::offsetSet($name, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:135)"} []
[2024-01-10T13:08:15.537409+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::offsetUnset($name) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::offsetUnset($name) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:147)"} []
[2024-01-10T13:08:15.537618+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:157)"} []
[2024-01-10T13:08:15.537807+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:167)"} []
[2024-01-10T13:08:15.538081+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:200)"} []
[2024-01-10T13:08:15.538223+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:210)"} []
[2024-01-10T13:08:15.538321+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:96)"} []
[2024-01-10T13:08:15.538442+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::next() should either be compatible with Iterator::next(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::next() should either be compatible with Iterator::next(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:104)"} []
[2024-01-10T13:08:15.538608+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:114)"} []
[2024-01-10T13:08:15.538765+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::valid() should either be compatible with Iterator::valid(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::valid() should either be compatible with Iterator::valid(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:124)"} []
[2024-01-10T13:08:15.538935+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:135)"} []
[2024-01-10T13:08:15.539105+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::seek($position) should either be compatible with SeekableIterator::seek(int $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::seek($position) should either be compatible with SeekableIterator::seek(int $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:246)"} []
[2024-01-10T13:08:15.539278+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:96)"} []
[2024-01-10T13:08:15.539449+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::next() should either be compatible with Iterator::next(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::next() should either be compatible with Iterator::next(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:104)"} []
[2024-01-10T13:08:15.539603+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:114)"} []
[2024-01-10T13:08:15.539722+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::valid() should either be compatible with Iterator::valid(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::valid() should either be compatible with Iterator::valid(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:124)"} []
[2024-01-10T13:08:15.539858+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:135)"} []
[2024-01-10T13:08:15.540025+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::offsetExists($position) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::offsetExists($position) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:147)"} []
[2024-01-10T13:08:15.540194+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::offsetGet($position) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::offsetGet($position) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:161)"} []
[2024-01-10T13:08:15.540387+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::offsetSet($position, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::offsetSet($position, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:177)"} []
[2024-01-10T13:08:15.540575+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::offsetUnset($position) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::offsetUnset($position) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:189)"} []
[2024-01-10T13:08:15.540730+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:232)"} []
[2024-01-10T13:08:15.542069+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:08:15.543398+00:00] doctrine.DEBUG: Executing query: SELECT c0_.id AS id_0, c0_.name AS name_1 FROM categories c0_ {"sql":"SELECT c0_.id AS id_0, c0_.name AS name_1 FROM categories c0_"} []
[2024-01-10T13:08:15.556977+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:08:15.557136+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:08:15.557273+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:08:15.557433+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:08:15.557569+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:08:15.557702+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:08:15.559017+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:08:15.559973+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:08:15.560580+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:08:15.562959+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:08:15.563404+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:08:15.565846+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:08:15.566231+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:08:15.568043+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:08:15.568474+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:08:15.570792+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:08:15.575717+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:08:15.576137+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:08:15.578173+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:08:15.580345+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:08:15.640832+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:08:15.641012+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:08:15.761624+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:08:15.769208+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:08:15.769503+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:08:15.769673+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:08:15.769836+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:08:15.770528+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"a43b16"},"request_uri":"http://localhost:8001/_wdt/a43b16","method":"GET"} []
[2024-01-10T13:08:15.771708+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:08:15.771983+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:08:15.772199+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:08:15.772419+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:08:15.772698+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:08:15.772879+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:08:15.774338+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:08:15.774584+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:08:15.774788+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:08:15.774962+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:09:15.276727+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:09:15.277758+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:09:15.277927+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:09:15.278092+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:09:15.279714+00:00] request.INFO: Matched route "newsletters_prepare". {"route":"newsletters_prepare","route_parameters":{"_route":"newsletters_prepare","_controller":"App\\Controller\\NewslettersController::prepare"},"request_uri":"http://localhost:8001/newsletters/prepare","method":"GET"} []
[2024-01-10T13:09:15.283202+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:09:15.283343+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:09:15.283479+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:09:15.283551+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:09:15.283917+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::offsetExists($option) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::offsetExists($option) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:1149)"} []
[2024-01-10T13:09:15.283990+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::offsetGet($option, bool $triggerDeprecation = true) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::offsetGet($option, bool $triggerDeprecation = true) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:908)"} []
[2024-01-10T13:09:15.284051+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::offsetSet($option, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::offsetSet($option, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:1165)"} []
[2024-01-10T13:09:15.284119+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::offsetUnset($option) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::offsetUnset($option) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:1177)"} []
[2024-01-10T13:09:15.284176+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:1193)"} []
[2024-01-10T13:09:15.284456+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormBuilder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormBuilder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormBuilder.php:218)"} []
[2024-01-10T13:09:15.284529+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormBuilder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormBuilder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormBuilder.php:164)"} []
[2024-01-10T13:09:15.288812+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\ButtonBuilder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\ButtonBuilder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/ButtonBuilder.php:728)"} []
[2024-01-10T13:09:15.288914+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\ButtonBuilder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\ButtonBuilder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/ButtonBuilder.php:718)"} []
[2024-01-10T13:09:15.289037+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:1024)"} []
[2024-01-10T13:09:15.289093+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::offsetExists($name) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::offsetExists($name) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:968)"} []
[2024-01-10T13:09:15.289139+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::offsetGet($name) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::offsetGet($name) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:982)"} []
[2024-01-10T13:09:15.289182+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::offsetSet($name, $child) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::offsetSet($name, $child) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:1000)"} []
[2024-01-10T13:09:15.289225+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::offsetUnset($name) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::offsetUnset($name) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:1014)"} []
[2024-01-10T13:09:15.289266+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:1034)"} []
[2024-01-10T13:09:15.289343+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:104)"} []
[2024-01-10T13:09:15.289390+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:114)"} []
[2024-01-10T13:09:15.289430+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:128)"} []
[2024-01-10T13:09:15.289471+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:151)"} []
[2024-01-10T13:09:15.289512+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:168)"} []
[2024-01-10T13:09:15.289552+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:176)"} []
[2024-01-10T13:09:15.289652+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:443)"} []
[2024-01-10T13:09:15.289700+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::offsetExists($offset) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::offsetExists($offset) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:54)"} []
[2024-01-10T13:09:15.289743+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::offsetGet($offset) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::offsetGet($offset) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:70)"} []
[2024-01-10T13:09:15.289784+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::offsetSet($offset, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::offsetSet($offset, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:87)"} []
[2024-01-10T13:09:15.289826+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::offsetUnset($offset) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::offsetUnset($offset) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:103)"} []
[2024-01-10T13:09:15.289867+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:433)"} []
[2024-01-10T13:09:15.289994+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\InheritDataAwareIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\InheritDataAwareIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/InheritDataAwareIterator.php:41)"} []
[2024-01-10T13:09:15.290042+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\InheritDataAwareIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\InheritDataAwareIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/InheritDataAwareIterator.php:33)"} []
[2024-01-10T13:09:15.290108+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMapIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMapIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMapIterator.php:108)"} []
[2024-01-10T13:09:15.290153+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMapIterator::next() should either be compatible with Iterator::next(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMapIterator::next() should either be compatible with Iterator::next(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMapIterator.php:118)"} []
[2024-01-10T13:09:15.290194+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMapIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMapIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMapIterator.php:136)"} []
[2024-01-10T13:09:15.290236+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMapIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMapIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMapIterator.php:160)"} []
[2024-01-10T13:09:15.290342+00:00] php.INFO: Deprecated: Return type of Symfony\Component\PropertyAccess\PropertyPath::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\PropertyAccess\\PropertyPath::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/property-access/PropertyPath.php:157)"} []
[2024-01-10T13:09:15.290741+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::offsetExists($name) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::offsetExists($name) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:123)"} []
[2024-01-10T13:09:15.290804+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::offsetGet($name) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::offsetGet($name) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:111)"} []
[2024-01-10T13:09:15.290853+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::offsetSet($name, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::offsetSet($name, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:135)"} []
[2024-01-10T13:09:15.290898+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::offsetUnset($name) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::offsetUnset($name) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:147)"} []
[2024-01-10T13:09:15.290942+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:157)"} []
[2024-01-10T13:09:15.291027+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:167)"} []
[2024-01-10T13:09:15.291193+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:200)"} []
[2024-01-10T13:09:15.291310+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:210)"} []
[2024-01-10T13:09:15.291402+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:96)"} []
[2024-01-10T13:09:15.291510+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::next() should either be compatible with Iterator::next(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::next() should either be compatible with Iterator::next(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:104)"} []
[2024-01-10T13:09:15.291626+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:114)"} []
[2024-01-10T13:09:15.291747+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::valid() should either be compatible with Iterator::valid(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::valid() should either be compatible with Iterator::valid(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:124)"} []
[2024-01-10T13:09:15.291852+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:135)"} []
[2024-01-10T13:09:15.291926+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::seek($position) should either be compatible with SeekableIterator::seek(int $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::seek($position) should either be compatible with SeekableIterator::seek(int $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:246)"} []
[2024-01-10T13:09:15.292000+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:96)"} []
[2024-01-10T13:09:15.292083+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::next() should either be compatible with Iterator::next(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::next() should either be compatible with Iterator::next(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:104)"} []
[2024-01-10T13:09:15.292151+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:114)"} []
[2024-01-10T13:09:15.292232+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::valid() should either be compatible with Iterator::valid(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::valid() should either be compatible with Iterator::valid(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:124)"} []
[2024-01-10T13:09:15.292301+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:135)"} []
[2024-01-10T13:09:15.292415+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::offsetExists($position) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::offsetExists($position) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:147)"} []
[2024-01-10T13:09:15.292491+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::offsetGet($position) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::offsetGet($position) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:161)"} []
[2024-01-10T13:09:15.292564+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::offsetSet($position, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::offsetSet($position, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:177)"} []
[2024-01-10T13:09:15.292637+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::offsetUnset($position) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::offsetUnset($position) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:189)"} []
[2024-01-10T13:09:15.292725+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:232)"} []
[2024-01-10T13:09:15.293825+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:09:15.294832+00:00] doctrine.DEBUG: Executing query: SELECT c0_.id AS id_0, c0_.name AS name_1 FROM categories c0_ {"sql":"SELECT c0_.id AS id_0, c0_.name AS name_1 FROM categories c0_"} []
[2024-01-10T13:09:15.303126+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:09:15.303227+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:09:15.303280+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:09:15.303326+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:09:15.303379+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:09:15.303420+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:09:15.304451+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:09:15.305019+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:09:15.305355+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:09:15.306521+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:09:15.306788+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:09:15.308057+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:09:15.308410+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:09:15.310408+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:09:15.310663+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:09:15.311980+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:09:15.313821+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:09:15.314024+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:09:15.315022+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:09:15.316038+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:09:15.353125+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:09:15.353278+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:09:15.416085+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:09:15.431350+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:09:15.431558+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:09:15.431627+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:09:15.431695+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:09:15.432329+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"8e298a"},"request_uri":"http://localhost:8001/_wdt/8e298a","method":"GET"} []
[2024-01-10T13:09:15.433391+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:09:15.433477+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:09:15.433526+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:09:15.433568+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:09:15.433606+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:09:15.433653+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:09:15.434599+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:09:15.434712+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:09:15.434793+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:09:15.434837+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:09:42.373201+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:09:42.373468+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:09:42.373547+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:09:42.373609+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:09:42.374628+00:00] request.INFO: Matched route "newsletters_prepare". {"route":"newsletters_prepare","route_parameters":{"_route":"newsletters_prepare","_controller":"App\\Controller\\NewslettersController::prepare"},"request_uri":"http://localhost:8001/newsletters/prepare","method":"GET"} []
[2024-01-10T13:09:42.378336+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:09:42.378476+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:09:42.378639+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:09:42.378733+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:09:42.379146+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::offsetExists($option) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::offsetExists($option) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:1149)"} []
[2024-01-10T13:09:42.379222+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::offsetGet($option, bool $triggerDeprecation = true) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::offsetGet($option, bool $triggerDeprecation = true) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:908)"} []
[2024-01-10T13:09:42.379294+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::offsetSet($option, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::offsetSet($option, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:1165)"} []
[2024-01-10T13:09:42.379365+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::offsetUnset($option) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::offsetUnset($option) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:1177)"} []
[2024-01-10T13:09:42.379500+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:1193)"} []
[2024-01-10T13:09:42.379694+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormBuilder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormBuilder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormBuilder.php:218)"} []
[2024-01-10T13:09:42.379751+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormBuilder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormBuilder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormBuilder.php:164)"} []
[2024-01-10T13:09:42.382698+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\ButtonBuilder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\ButtonBuilder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/ButtonBuilder.php:728)"} []
[2024-01-10T13:09:42.382783+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\ButtonBuilder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\ButtonBuilder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/ButtonBuilder.php:718)"} []
[2024-01-10T13:09:42.382879+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:1024)"} []
[2024-01-10T13:09:42.382934+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::offsetExists($name) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::offsetExists($name) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:968)"} []
[2024-01-10T13:09:42.382989+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::offsetGet($name) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::offsetGet($name) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:982)"} []
[2024-01-10T13:09:42.383038+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::offsetSet($name, $child) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::offsetSet($name, $child) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:1000)"} []
[2024-01-10T13:09:42.383075+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::offsetUnset($name) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::offsetUnset($name) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:1014)"} []
[2024-01-10T13:09:42.383122+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:1034)"} []
[2024-01-10T13:09:42.383189+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:104)"} []
[2024-01-10T13:09:42.383266+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:114)"} []
[2024-01-10T13:09:42.383327+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:128)"} []
[2024-01-10T13:09:42.383385+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:151)"} []
[2024-01-10T13:09:42.383447+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:168)"} []
[2024-01-10T13:09:42.383504+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:176)"} []
[2024-01-10T13:09:42.383630+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:443)"} []
[2024-01-10T13:09:42.383709+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::offsetExists($offset) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::offsetExists($offset) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:54)"} []
[2024-01-10T13:09:42.383774+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::offsetGet($offset) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::offsetGet($offset) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:70)"} []
[2024-01-10T13:09:42.383829+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::offsetSet($offset, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::offsetSet($offset, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:87)"} []
[2024-01-10T13:09:42.383884+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::offsetUnset($offset) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::offsetUnset($offset) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:103)"} []
[2024-01-10T13:09:42.383944+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:433)"} []
[2024-01-10T13:09:42.384115+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\InheritDataAwareIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\InheritDataAwareIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/InheritDataAwareIterator.php:41)"} []
[2024-01-10T13:09:42.384193+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\InheritDataAwareIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\InheritDataAwareIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/InheritDataAwareIterator.php:33)"} []
[2024-01-10T13:09:42.384278+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMapIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMapIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMapIterator.php:108)"} []
[2024-01-10T13:09:42.384341+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMapIterator::next() should either be compatible with Iterator::next(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMapIterator::next() should either be compatible with Iterator::next(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMapIterator.php:118)"} []
[2024-01-10T13:09:42.384416+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMapIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMapIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMapIterator.php:136)"} []
[2024-01-10T13:09:42.384476+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMapIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMapIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMapIterator.php:160)"} []
[2024-01-10T13:09:42.384617+00:00] php.INFO: Deprecated: Return type of Symfony\Component\PropertyAccess\PropertyPath::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\PropertyAccess\\PropertyPath::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/property-access/PropertyPath.php:157)"} []
[2024-01-10T13:09:42.385127+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::offsetExists($name) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::offsetExists($name) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:123)"} []
[2024-01-10T13:09:42.385196+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::offsetGet($name) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::offsetGet($name) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:111)"} []
[2024-01-10T13:09:42.385254+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::offsetSet($name, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::offsetSet($name, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:135)"} []
[2024-01-10T13:09:42.385310+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::offsetUnset($name) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::offsetUnset($name) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:147)"} []
[2024-01-10T13:09:42.385366+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:157)"} []
[2024-01-10T13:09:42.385420+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:167)"} []
[2024-01-10T13:09:42.385549+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:200)"} []
[2024-01-10T13:09:42.385634+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:210)"} []
[2024-01-10T13:09:42.385709+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:96)"} []
[2024-01-10T13:09:42.385776+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::next() should either be compatible with Iterator::next(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::next() should either be compatible with Iterator::next(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:104)"} []
[2024-01-10T13:09:42.385847+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:114)"} []
[2024-01-10T13:09:42.385902+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::valid() should either be compatible with Iterator::valid(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::valid() should either be compatible with Iterator::valid(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:124)"} []
[2024-01-10T13:09:42.385976+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:135)"} []
[2024-01-10T13:09:42.386035+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::seek($position) should either be compatible with SeekableIterator::seek(int $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::seek($position) should either be compatible with SeekableIterator::seek(int $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:246)"} []
[2024-01-10T13:09:42.386096+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:96)"} []
[2024-01-10T13:09:42.386153+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::next() should either be compatible with Iterator::next(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::next() should either be compatible with Iterator::next(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:104)"} []
[2024-01-10T13:09:42.386208+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:114)"} []
[2024-01-10T13:09:42.386262+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::valid() should either be compatible with Iterator::valid(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::valid() should either be compatible with Iterator::valid(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:124)"} []
[2024-01-10T13:09:42.386323+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:135)"} []
[2024-01-10T13:09:42.386379+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::offsetExists($position) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::offsetExists($position) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:147)"} []
[2024-01-10T13:09:42.386438+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::offsetGet($position) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::offsetGet($position) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:161)"} []
[2024-01-10T13:09:42.386496+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::offsetSet($position, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::offsetSet($position, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:177)"} []
[2024-01-10T13:09:42.386555+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::offsetUnset($position) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::offsetUnset($position) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:189)"} []
[2024-01-10T13:09:42.386610+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:232)"} []
[2024-01-10T13:09:42.387519+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:09:42.388469+00:00] doctrine.DEBUG: Executing query: SELECT c0_.id AS id_0, c0_.name AS name_1 FROM categories c0_ {"sql":"SELECT c0_.id AS id_0, c0_.name AS name_1 FROM categories c0_"} []
[2024-01-10T13:09:42.401052+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:09:42.401269+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:09:42.401424+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:09:42.401564+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:09:42.401703+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:09:42.401846+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:09:42.403030+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:09:42.403829+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:09:42.404322+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:09:42.405851+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:09:42.406473+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:09:42.408244+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:09:42.408551+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:09:42.409727+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:09:42.410009+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:09:42.411793+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:09:42.414381+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:09:42.414661+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:09:42.415916+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:09:42.416788+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:09:42.453576+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:09:42.453828+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:09:42.518265+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:09:42.522715+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:09:42.522855+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:09:42.522911+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:09:42.522963+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:09:42.523536+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"3135e8"},"request_uri":"http://localhost:8001/_wdt/3135e8","method":"GET"} []
[2024-01-10T13:09:42.524883+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:09:42.525037+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:09:42.525198+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:09:42.525272+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:09:42.525336+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:09:42.525400+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:09:42.526943+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:09:42.527050+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:09:42.527143+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:09:42.527213+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:10:17.034894+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:10:17.035570+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:10:17.035825+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:10:17.036018+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:10:17.039901+00:00] request.INFO: Matched route "newsletters_prepare". {"route":"newsletters_prepare","route_parameters":{"_route":"newsletters_prepare","_controller":"App\\Controller\\NewslettersController::prepare"},"request_uri":"http://localhost:8001/newsletters/prepare","method":"GET"} []
[2024-01-10T13:10:17.049973+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:10:17.050196+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:10:17.050451+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:10:17.050613+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:10:17.051298+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::offsetExists($option) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::offsetExists($option) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:1149)"} []
[2024-01-10T13:10:17.051437+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::offsetGet($option, bool $triggerDeprecation = true) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::offsetGet($option, bool $triggerDeprecation = true) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:908)"} []
[2024-01-10T13:10:17.051555+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::offsetSet($option, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::offsetSet($option, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:1165)"} []
[2024-01-10T13:10:17.051664+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::offsetUnset($option) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::offsetUnset($option) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:1177)"} []
[2024-01-10T13:10:17.051767+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:1193)"} []
[2024-01-10T13:10:17.052103+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormBuilder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormBuilder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormBuilder.php:218)"} []
[2024-01-10T13:10:17.052194+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormBuilder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormBuilder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormBuilder.php:164)"} []
[2024-01-10T13:10:17.058364+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\ButtonBuilder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\ButtonBuilder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/ButtonBuilder.php:728)"} []
[2024-01-10T13:10:17.058519+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\ButtonBuilder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\ButtonBuilder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/ButtonBuilder.php:718)"} []
[2024-01-10T13:10:17.058697+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:1024)"} []
[2024-01-10T13:10:17.058786+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::offsetExists($name) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::offsetExists($name) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:968)"} []
[2024-01-10T13:10:17.058879+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::offsetGet($name) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::offsetGet($name) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:982)"} []
[2024-01-10T13:10:17.058950+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::offsetSet($name, $child) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::offsetSet($name, $child) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:1000)"} []
[2024-01-10T13:10:17.059018+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::offsetUnset($name) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::offsetUnset($name) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:1014)"} []
[2024-01-10T13:10:17.059086+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:1034)"} []
[2024-01-10T13:10:17.059195+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:104)"} []
[2024-01-10T13:10:17.059267+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:114)"} []
[2024-01-10T13:10:17.059346+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:128)"} []
[2024-01-10T13:10:17.059415+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:151)"} []
[2024-01-10T13:10:17.059482+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:168)"} []
[2024-01-10T13:10:17.059547+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:176)"} []
[2024-01-10T13:10:17.059694+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:443)"} []
[2024-01-10T13:10:17.059774+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::offsetExists($offset) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::offsetExists($offset) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:54)"} []
[2024-01-10T13:10:17.059937+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::offsetGet($offset) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::offsetGet($offset) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:70)"} []
[2024-01-10T13:10:17.060053+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::offsetSet($offset, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::offsetSet($offset, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:87)"} []
[2024-01-10T13:10:17.060173+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::offsetUnset($offset) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::offsetUnset($offset) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:103)"} []
[2024-01-10T13:10:17.060288+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:433)"} []
[2024-01-10T13:10:17.060548+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\InheritDataAwareIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\InheritDataAwareIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/InheritDataAwareIterator.php:41)"} []
[2024-01-10T13:10:17.060688+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\InheritDataAwareIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\InheritDataAwareIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/InheritDataAwareIterator.php:33)"} []
[2024-01-10T13:10:17.060840+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMapIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMapIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMapIterator.php:108)"} []
[2024-01-10T13:10:17.060926+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMapIterator::next() should either be compatible with Iterator::next(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMapIterator::next() should either be compatible with Iterator::next(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMapIterator.php:118)"} []
[2024-01-10T13:10:17.060987+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMapIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMapIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMapIterator.php:136)"} []
[2024-01-10T13:10:17.061041+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMapIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMapIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMapIterator.php:160)"} []
[2024-01-10T13:10:17.061200+00:00] php.INFO: Deprecated: Return type of Symfony\Component\PropertyAccess\PropertyPath::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\PropertyAccess\\PropertyPath::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/property-access/PropertyPath.php:157)"} []
[2024-01-10T13:10:17.061841+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::offsetExists($name) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::offsetExists($name) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:123)"} []
[2024-01-10T13:10:17.061931+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::offsetGet($name) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::offsetGet($name) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:111)"} []
[2024-01-10T13:10:17.062011+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::offsetSet($name, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::offsetSet($name, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:135)"} []
[2024-01-10T13:10:17.062088+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::offsetUnset($name) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::offsetUnset($name) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:147)"} []
[2024-01-10T13:10:17.062158+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:157)"} []
[2024-01-10T13:10:17.062228+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:167)"} []
[2024-01-10T13:10:17.062391+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:200)"} []
[2024-01-10T13:10:17.062488+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:210)"} []
[2024-01-10T13:10:17.062588+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:96)"} []
[2024-01-10T13:10:17.062678+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::next() should either be compatible with Iterator::next(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::next() should either be compatible with Iterator::next(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:104)"} []
[2024-01-10T13:10:17.062775+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:114)"} []
[2024-01-10T13:10:17.062875+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::valid() should either be compatible with Iterator::valid(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::valid() should either be compatible with Iterator::valid(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:124)"} []
[2024-01-10T13:10:17.062972+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:135)"} []
[2024-01-10T13:10:17.063080+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::seek($position) should either be compatible with SeekableIterator::seek(int $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::seek($position) should either be compatible with SeekableIterator::seek(int $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:246)"} []
[2024-01-10T13:10:17.063181+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:96)"} []
[2024-01-10T13:10:17.063280+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::next() should either be compatible with Iterator::next(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::next() should either be compatible with Iterator::next(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:104)"} []
[2024-01-10T13:10:17.063379+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:114)"} []
[2024-01-10T13:10:17.063474+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::valid() should either be compatible with Iterator::valid(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::valid() should either be compatible with Iterator::valid(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:124)"} []
[2024-01-10T13:10:17.063564+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:135)"} []
[2024-01-10T13:10:17.063663+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::offsetExists($position) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::offsetExists($position) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:147)"} []
[2024-01-10T13:10:17.063755+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::offsetGet($position) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::offsetGet($position) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:161)"} []
[2024-01-10T13:10:17.063844+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::offsetSet($position, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::offsetSet($position, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:177)"} []
[2024-01-10T13:10:17.063935+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::offsetUnset($position) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::offsetUnset($position) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:189)"} []
[2024-01-10T13:10:17.064024+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:232)"} []
[2024-01-10T13:10:17.064979+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:10:17.066024+00:00] doctrine.DEBUG: Executing query: SELECT c0_.id AS id_0, c0_.name AS name_1 FROM categories c0_ {"sql":"SELECT c0_.id AS id_0, c0_.name AS name_1 FROM categories c0_"} []
[2024-01-10T13:10:17.080749+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:10:17.080867+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:10:17.080958+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:10:17.081043+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:10:17.081122+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:10:17.081214+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:10:17.082349+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:10:17.083077+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:10:17.083484+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:10:17.084646+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:10:17.084866+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:10:17.086136+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:10:17.086389+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:10:17.088338+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:10:17.088628+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:10:17.090703+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:10:17.093645+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:10:17.094017+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:10:17.095425+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:10:17.096608+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:10:17.137962+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:10:17.140845+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:10:17.218323+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:10:17.222918+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:10:17.223420+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:10:17.223728+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:10:17.223908+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:10:17.224632+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"f459fb"},"request_uri":"http://localhost:8001/_wdt/f459fb","method":"GET"} []
[2024-01-10T13:10:17.225678+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:10:17.225784+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:10:17.225859+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:10:17.225934+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:10:17.226007+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:10:17.226077+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:10:17.227197+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:10:17.227293+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:10:17.227374+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:10:17.227446+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:11:19.148534+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:11:19.148837+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:11:19.148976+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:11:19.149073+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:11:19.150330+00:00] request.INFO: Matched route "newsletters_prepare". {"route":"newsletters_prepare","route_parameters":{"_route":"newsletters_prepare","_controller":"App\\Controller\\NewslettersController::prepare"},"request_uri":"http://localhost:8001/newsletters/prepare","method":"GET"} []
[2024-01-10T13:11:19.154422+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:11:19.154607+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:11:19.154820+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:11:19.155307+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:11:19.156460+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::offsetExists($option) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::offsetExists($option) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:1149)"} []
[2024-01-10T13:11:19.156598+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::offsetGet($option, bool $triggerDeprecation = true) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::offsetGet($option, bool $triggerDeprecation = true) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:908)"} []
[2024-01-10T13:11:19.156707+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::offsetSet($option, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::offsetSet($option, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:1165)"} []
[2024-01-10T13:11:19.156818+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::offsetUnset($option) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::offsetUnset($option) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:1177)"} []
[2024-01-10T13:11:19.156922+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:1193)"} []
[2024-01-10T13:11:19.157284+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormBuilder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormBuilder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormBuilder.php:218)"} []
[2024-01-10T13:11:19.157378+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormBuilder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormBuilder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormBuilder.php:164)"} []
[2024-01-10T13:11:19.161361+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\ButtonBuilder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\ButtonBuilder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/ButtonBuilder.php:728)"} []
[2024-01-10T13:11:19.161483+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\ButtonBuilder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\ButtonBuilder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/ButtonBuilder.php:718)"} []
[2024-01-10T13:11:19.161644+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:1024)"} []
[2024-01-10T13:11:19.161722+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::offsetExists($name) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::offsetExists($name) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:968)"} []
[2024-01-10T13:11:19.161809+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::offsetGet($name) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::offsetGet($name) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:982)"} []
[2024-01-10T13:11:19.161877+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::offsetSet($name, $child) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::offsetSet($name, $child) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:1000)"} []
[2024-01-10T13:11:19.161943+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::offsetUnset($name) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::offsetUnset($name) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:1014)"} []
[2024-01-10T13:11:19.162008+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:1034)"} []
[2024-01-10T13:11:19.162108+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:104)"} []
[2024-01-10T13:11:19.162181+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:114)"} []
[2024-01-10T13:11:19.162248+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:128)"} []
[2024-01-10T13:11:19.162326+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:151)"} []
[2024-01-10T13:11:19.162394+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:168)"} []
[2024-01-10T13:11:19.162460+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:176)"} []
[2024-01-10T13:11:19.162593+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:443)"} []
[2024-01-10T13:11:19.162666+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::offsetExists($offset) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::offsetExists($offset) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:54)"} []
[2024-01-10T13:11:19.162745+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::offsetGet($offset) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::offsetGet($offset) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:70)"} []
[2024-01-10T13:11:19.162815+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::offsetSet($offset, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::offsetSet($offset, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:87)"} []
[2024-01-10T13:11:19.162884+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::offsetUnset($offset) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::offsetUnset($offset) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:103)"} []
[2024-01-10T13:11:19.162950+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:433)"} []
[2024-01-10T13:11:19.163119+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\InheritDataAwareIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\InheritDataAwareIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/InheritDataAwareIterator.php:41)"} []
[2024-01-10T13:11:19.163193+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\InheritDataAwareIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\InheritDataAwareIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/InheritDataAwareIterator.php:33)"} []
[2024-01-10T13:11:19.163298+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMapIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMapIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMapIterator.php:108)"} []
[2024-01-10T13:11:19.163372+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMapIterator::next() should either be compatible with Iterator::next(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMapIterator::next() should either be compatible with Iterator::next(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMapIterator.php:118)"} []
[2024-01-10T13:11:19.163443+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMapIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMapIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMapIterator.php:136)"} []
[2024-01-10T13:11:19.163511+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMapIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMapIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMapIterator.php:160)"} []
[2024-01-10T13:11:19.163655+00:00] php.INFO: Deprecated: Return type of Symfony\Component\PropertyAccess\PropertyPath::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\PropertyAccess\\PropertyPath::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/property-access/PropertyPath.php:157)"} []
[2024-01-10T13:11:19.164213+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::offsetExists($name) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::offsetExists($name) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:123)"} []
[2024-01-10T13:11:19.164328+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::offsetGet($name) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::offsetGet($name) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:111)"} []
[2024-01-10T13:11:19.164432+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::offsetSet($name, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::offsetSet($name, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:135)"} []
[2024-01-10T13:11:19.164520+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::offsetUnset($name) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::offsetUnset($name) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:147)"} []
[2024-01-10T13:11:19.164595+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:157)"} []
[2024-01-10T13:11:19.164693+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:167)"} []
[2024-01-10T13:11:19.164940+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:200)"} []
[2024-01-10T13:11:19.165080+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:210)"} []
[2024-01-10T13:11:19.165254+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:96)"} []
[2024-01-10T13:11:19.165402+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::next() should either be compatible with Iterator::next(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::next() should either be compatible with Iterator::next(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:104)"} []
[2024-01-10T13:11:19.165556+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:114)"} []
[2024-01-10T13:11:19.165687+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::valid() should either be compatible with Iterator::valid(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::valid() should either be compatible with Iterator::valid(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:124)"} []
[2024-01-10T13:11:19.165800+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:135)"} []
[2024-01-10T13:11:19.165882+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::seek($position) should either be compatible with SeekableIterator::seek(int $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::seek($position) should either be compatible with SeekableIterator::seek(int $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:246)"} []
[2024-01-10T13:11:19.165973+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:96)"} []
[2024-01-10T13:11:19.166050+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::next() should either be compatible with Iterator::next(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::next() should either be compatible with Iterator::next(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:104)"} []
[2024-01-10T13:11:19.166128+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:114)"} []
[2024-01-10T13:11:19.166202+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::valid() should either be compatible with Iterator::valid(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::valid() should either be compatible with Iterator::valid(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:124)"} []
[2024-01-10T13:11:19.166274+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:135)"} []
[2024-01-10T13:11:19.166344+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::offsetExists($position) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::offsetExists($position) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:147)"} []
[2024-01-10T13:11:19.166433+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::offsetGet($position) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::offsetGet($position) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:161)"} []
[2024-01-10T13:11:19.166509+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::offsetSet($position, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::offsetSet($position, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:177)"} []
[2024-01-10T13:11:19.166588+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::offsetUnset($position) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::offsetUnset($position) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:189)"} []
[2024-01-10T13:11:19.166663+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:232)"} []
[2024-01-10T13:11:19.167574+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:11:19.168459+00:00] doctrine.DEBUG: Executing query: SELECT c0_.id AS id_0, c0_.name AS name_1 FROM categories c0_ {"sql":"SELECT c0_.id AS id_0, c0_.name AS name_1 FROM categories c0_"} []
[2024-01-10T13:11:19.180775+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:11:19.180902+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:11:19.180991+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:11:19.181074+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:11:19.181151+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:11:19.181229+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:11:19.182408+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:11:19.183167+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:11:19.183578+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:11:19.185077+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:11:19.185429+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:11:19.189827+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:11:19.190207+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:11:19.191736+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:11:19.191991+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:11:19.193449+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:11:19.195301+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:11:19.195534+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:11:19.196616+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:11:19.197468+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:11:19.235174+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:11:19.235414+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:11:19.292854+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:11:19.313318+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:11:19.313645+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:11:19.313870+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:11:19.314048+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:11:19.314821+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"488ab8"},"request_uri":"http://localhost:8001/_wdt/488ab8","method":"GET"} []
[2024-01-10T13:11:19.316121+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:11:19.316416+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:11:19.316662+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:11:19.316858+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:11:19.317031+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:11:19.317173+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:11:19.318888+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:11:19.319147+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:11:19.319356+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:11:19.319545+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:14:13.285645+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:14:13.286259+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:14:13.286464+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:14:13.286668+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:14:13.289247+00:00] request.INFO: Matched route "newsletters_prepare". {"route":"newsletters_prepare","route_parameters":{"_route":"newsletters_prepare","_controller":"App\\Controller\\NewslettersController::prepare"},"request_uri":"http://localhost:8001/newsletters/prepare","method":"GET"} []
[2024-01-10T13:14:13.295361+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:14:13.295547+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:14:13.295822+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:14:13.295991+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:14:13.296752+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::offsetExists($option) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::offsetExists($option) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:1149)"} []
[2024-01-10T13:14:13.296942+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::offsetGet($option, bool $triggerDeprecation = true) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::offsetGet($option, bool $triggerDeprecation = true) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:908)"} []
[2024-01-10T13:14:13.297083+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::offsetSet($option, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::offsetSet($option, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:1165)"} []
[2024-01-10T13:14:13.297224+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::offsetUnset($option) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::offsetUnset($option) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:1177)"} []
[2024-01-10T13:14:13.297353+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:1193)"} []
[2024-01-10T13:14:13.297918+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormBuilder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormBuilder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormBuilder.php:218)"} []
[2024-01-10T13:14:13.298094+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormBuilder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormBuilder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormBuilder.php:164)"} []
[2024-01-10T13:14:13.303588+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\ButtonBuilder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\ButtonBuilder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/ButtonBuilder.php:728)"} []
[2024-01-10T13:14:13.303735+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\ButtonBuilder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\ButtonBuilder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/ButtonBuilder.php:718)"} []
[2024-01-10T13:14:13.303930+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:1024)"} []
[2024-01-10T13:14:13.304052+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::offsetExists($name) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::offsetExists($name) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:968)"} []
[2024-01-10T13:14:13.304144+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::offsetGet($name) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::offsetGet($name) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:982)"} []
[2024-01-10T13:14:13.304262+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::offsetSet($name, $child) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::offsetSet($name, $child) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:1000)"} []
[2024-01-10T13:14:13.304372+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::offsetUnset($name) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::offsetUnset($name) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:1014)"} []
[2024-01-10T13:14:13.304481+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:1034)"} []
[2024-01-10T13:14:13.304618+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:104)"} []
[2024-01-10T13:14:13.304720+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:114)"} []
[2024-01-10T13:14:13.304809+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:128)"} []
[2024-01-10T13:14:13.304923+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:151)"} []
[2024-01-10T13:14:13.305019+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:168)"} []
[2024-01-10T13:14:13.305119+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:176)"} []
[2024-01-10T13:14:13.305303+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:443)"} []
[2024-01-10T13:14:13.305400+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::offsetExists($offset) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::offsetExists($offset) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:54)"} []
[2024-01-10T13:14:13.305490+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::offsetGet($offset) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::offsetGet($offset) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:70)"} []
[2024-01-10T13:14:13.305603+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::offsetSet($offset, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::offsetSet($offset, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:87)"} []
[2024-01-10T13:14:13.305695+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::offsetUnset($offset) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::offsetUnset($offset) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:103)"} []
[2024-01-10T13:14:13.305796+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:433)"} []
[2024-01-10T13:14:13.306037+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\InheritDataAwareIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\InheritDataAwareIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/InheritDataAwareIterator.php:41)"} []
[2024-01-10T13:14:13.306134+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\InheritDataAwareIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\InheritDataAwareIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/InheritDataAwareIterator.php:33)"} []
[2024-01-10T13:14:13.306259+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMapIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMapIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMapIterator.php:108)"} []
[2024-01-10T13:14:13.306377+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMapIterator::next() should either be compatible with Iterator::next(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMapIterator::next() should either be compatible with Iterator::next(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMapIterator.php:118)"} []
[2024-01-10T13:14:13.306475+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMapIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMapIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMapIterator.php:136)"} []
[2024-01-10T13:14:13.306573+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMapIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMapIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMapIterator.php:160)"} []
[2024-01-10T13:14:13.306770+00:00] php.INFO: Deprecated: Return type of Symfony\Component\PropertyAccess\PropertyPath::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\PropertyAccess\\PropertyPath::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/property-access/PropertyPath.php:157)"} []
[2024-01-10T13:14:13.307333+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::offsetExists($name) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::offsetExists($name) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:123)"} []
[2024-01-10T13:14:13.307429+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::offsetGet($name) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::offsetGet($name) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:111)"} []
[2024-01-10T13:14:13.307542+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::offsetSet($name, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::offsetSet($name, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:135)"} []
[2024-01-10T13:14:13.307646+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::offsetUnset($name) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::offsetUnset($name) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:147)"} []
[2024-01-10T13:14:13.307737+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:157)"} []
[2024-01-10T13:14:13.307835+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormView::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormView::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormView.php:167)"} []
[2024-01-10T13:14:13.308006+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:200)"} []
[2024-01-10T13:14:13.308108+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:210)"} []
[2024-01-10T13:14:13.308220+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:96)"} []
[2024-01-10T13:14:13.308322+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::next() should either be compatible with Iterator::next(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::next() should either be compatible with Iterator::next(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:104)"} []
[2024-01-10T13:14:13.308435+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:114)"} []
[2024-01-10T13:14:13.308537+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::valid() should either be compatible with Iterator::valid(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::valid() should either be compatible with Iterator::valid(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:124)"} []
[2024-01-10T13:14:13.308627+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:135)"} []
[2024-01-10T13:14:13.308716+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::seek($position) should either be compatible with SeekableIterator::seek(int $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::seek($position) should either be compatible with SeekableIterator::seek(int $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:246)"} []
[2024-01-10T13:14:13.308823+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:96)"} []
[2024-01-10T13:14:13.308916+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::next() should either be compatible with Iterator::next(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::next() should either be compatible with Iterator::next(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:104)"} []
[2024-01-10T13:14:13.309005+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:114)"} []
[2024-01-10T13:14:13.309094+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::valid() should either be compatible with Iterator::valid(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::valid() should either be compatible with Iterator::valid(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:124)"} []
[2024-01-10T13:14:13.309183+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:135)"} []
[2024-01-10T13:14:13.309274+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::offsetExists($position) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::offsetExists($position) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:147)"} []
[2024-01-10T13:14:13.309364+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::offsetGet($position) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::offsetGet($position) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:161)"} []
[2024-01-10T13:14:13.309471+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::offsetSet($position, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::offsetSet($position, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:177)"} []
[2024-01-10T13:14:13.309562+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::offsetUnset($position) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::offsetUnset($position) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:189)"} []
[2024-01-10T13:14:13.309656+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:232)"} []
[2024-01-10T13:14:13.310433+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:14:13.311285+00:00] doctrine.DEBUG: Executing query: SELECT c0_.id AS id_0, c0_.name AS name_1 FROM categories c0_ {"sql":"SELECT c0_.id AS id_0, c0_.name AS name_1 FROM categories c0_"} []
[2024-01-10T13:14:13.324598+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:14:13.324730+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:14:13.324815+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:14:13.324882+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:14:13.324942+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:14:13.325010+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:14:13.326587+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:14:13.327358+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:14:13.327832+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:14:13.329332+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:14:13.331970+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:14:13.333752+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:14:13.334127+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:14:13.335796+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:14:13.336110+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:14:13.338323+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:14:13.341735+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:14:13.342195+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:14:13.344286+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:14:13.346048+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:14:13.393712+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:14:13.393830+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:14:13.448849+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:14:13.454173+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:14:13.454484+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:14:13.454574+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:14:13.454636+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:14:13.455366+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"c4ec3d"},"request_uri":"http://localhost:8001/_wdt/c4ec3d","method":"GET"} []
[2024-01-10T13:14:13.457132+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:14:13.457493+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:14:13.457853+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:14:13.458054+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:14:13.458222+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:14:13.458382+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:14:13.459756+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:14:13.459860+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:14:13.459960+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:14:13.460032+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:14:33.000641+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:14:33.000852+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:14:33.000919+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:14:33.000973+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:14:33.001885+00:00] request.INFO: Matched route "newsletters_prepare". {"route":"newsletters_prepare","route_parameters":{"_route":"newsletters_prepare","_controller":"App\\Controller\\NewslettersController::prepare"},"request_uri":"http://localhost:8001/newsletters/prepare","method":"POST"} []
[2024-01-10T13:14:33.002729+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:14:33.002853+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:14:33.002993+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:14:33.003190+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:14:33.003468+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:14:33.005678+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::offsetExists($option) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::offsetExists($option) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:1149)"} []
[2024-01-10T13:14:33.005765+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::offsetGet($option, bool $triggerDeprecation = true) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::offsetGet($option, bool $triggerDeprecation = true) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:908)"} []
[2024-01-10T13:14:33.005811+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::offsetSet($option, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::offsetSet($option, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:1165)"} []
[2024-01-10T13:14:33.005850+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::offsetUnset($option) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::offsetUnset($option) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:1177)"} []
[2024-01-10T13:14:33.005886+00:00] php.INFO: Deprecated: Return type of Symfony\Component\OptionsResolver\OptionsResolver::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\OptionsResolver\\OptionsResolver::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/options-resolver/OptionsResolver.php:1193)"} []
[2024-01-10T13:14:33.006053+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormBuilder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormBuilder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormBuilder.php:218)"} []
[2024-01-10T13:14:33.006096+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormBuilder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormBuilder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormBuilder.php:164)"} []
[2024-01-10T13:14:33.008732+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\ButtonBuilder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\ButtonBuilder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/ButtonBuilder.php:728)"} []
[2024-01-10T13:14:33.008796+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\ButtonBuilder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\ButtonBuilder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/ButtonBuilder.php:718)"} []
[2024-01-10T13:14:33.008880+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:1024)"} []
[2024-01-10T13:14:33.008921+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::offsetExists($name) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::offsetExists($name) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:968)"} []
[2024-01-10T13:14:33.008956+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::offsetGet($name) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::offsetGet($name) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:982)"} []
[2024-01-10T13:14:33.008988+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::offsetSet($name, $child) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::offsetSet($name, $child) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:1000)"} []
[2024-01-10T13:14:33.009029+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::offsetUnset($name) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::offsetUnset($name) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:1014)"} []
[2024-01-10T13:14:33.009061+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Form::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Form::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Form.php:1034)"} []
[2024-01-10T13:14:33.009112+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:104)"} []
[2024-01-10T13:14:33.009145+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:114)"} []
[2024-01-10T13:14:33.009177+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:128)"} []
[2024-01-10T13:14:33.009209+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:151)"} []
[2024-01-10T13:14:33.009246+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:168)"} []
[2024-01-10T13:14:33.009277+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMap::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMap::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMap.php:176)"} []
[2024-01-10T13:14:33.009346+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:443)"} []
[2024-01-10T13:14:33.009381+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::offsetExists($offset) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::offsetExists($offset) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:54)"} []
[2024-01-10T13:14:33.009415+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::offsetGet($offset) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::offsetGet($offset) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:70)"} []
[2024-01-10T13:14:33.009447+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::offsetSet($offset, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::offsetSet($offset, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:87)"} []
[2024-01-10T13:14:33.009486+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::offsetUnset($offset) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::offsetUnset($offset) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:103)"} []
[2024-01-10T13:14:33.009517+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Button::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Button::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Button.php:433)"} []
[2024-01-10T13:14:33.009608+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\InheritDataAwareIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\InheritDataAwareIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/InheritDataAwareIterator.php:41)"} []
[2024-01-10T13:14:33.009644+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\InheritDataAwareIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\InheritDataAwareIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/InheritDataAwareIterator.php:33)"} []
[2024-01-10T13:14:33.009693+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMapIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMapIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMapIterator.php:108)"} []
[2024-01-10T13:14:33.009727+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMapIterator::next() should either be compatible with Iterator::next(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMapIterator::next() should either be compatible with Iterator::next(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMapIterator.php:118)"} []
[2024-01-10T13:14:33.009764+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMapIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMapIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMapIterator.php:136)"} []
[2024-01-10T13:14:33.009797+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\Util\OrderedHashMapIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\Util\\OrderedHashMapIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/Util/OrderedHashMapIterator.php:160)"} []
[2024-01-10T13:14:33.009873+00:00] php.INFO: Deprecated: Return type of Symfony\Component\PropertyAccess\PropertyPath::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\PropertyAccess\\PropertyPath::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/property-access/PropertyPath.php:157)"} []
[2024-01-10T13:14:33.010996+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:14:33.011931+00:00] doctrine.DEBUG: Executing query: SELECT c0_.id AS id_0, c0_.name AS name_1 FROM categories c0_ {"sql":"SELECT c0_.id AS id_0, c0_.name AS name_1 FROM categories c0_"} []
[2024-01-10T13:14:33.017900+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Validator\ConstraintViolationList::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Validator\\ConstraintViolationList::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/validator/ConstraintViolationList.php:113)"} []
[2024-01-10T13:14:33.018002+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Validator\ConstraintViolationList::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Validator\\ConstraintViolationList::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/validator/ConstraintViolationList.php:121)"} []
[2024-01-10T13:14:33.018086+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Validator\ConstraintViolationList::offsetExists($offset) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Validator\\ConstraintViolationList::offsetExists($offset) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/validator/ConstraintViolationList.php:129)"} []
[2024-01-10T13:14:33.018143+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Validator\ConstraintViolationList::offsetGet($offset) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Validator\\ConstraintViolationList::offsetGet($offset) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/validator/ConstraintViolationList.php:139)"} []
[2024-01-10T13:14:33.018185+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Validator\ConstraintViolationList::offsetSet($offset, $violation) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Validator\\ConstraintViolationList::offsetSet($offset, $violation) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/validator/ConstraintViolationList.php:149)"} []
[2024-01-10T13:14:33.018224+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Validator\ConstraintViolationList::offsetUnset($offset) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Validator\\ConstraintViolationList::offsetUnset($offset) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/validator/ConstraintViolationList.php:163)"} []
[2024-01-10T13:14:33.021041+00:00] php.INFO: Deprecated: Creation of dynamic property Symfony\Component\Form\Extension\Validator\Constraints\Form::$groups is deprecated {"exception":"[object] (ErrorException(code: 0): Deprecated: Creation of dynamic property Symfony\\Component\\Form\\Extension\\Validator\\Constraints\\Form::$groups is deprecated at /home/massoud/www/Symfony/Newsletter/vendor/symfony/validator/Constraint.php:189)"} []
[2024-01-10T13:14:33.064317+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::hasChildren() should either be compatible with RecursiveIterator::hasChildren(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:200)"} []
[2024-01-10T13:14:33.064421+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::getChildren() should either be compatible with RecursiveIterator::getChildren(): ?RecursiveIterator, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:210)"} []
[2024-01-10T13:14:33.064471+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:96)"} []
[2024-01-10T13:14:33.064511+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::next() should either be compatible with Iterator::next(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::next() should either be compatible with Iterator::next(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:104)"} []
[2024-01-10T13:14:33.064547+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:114)"} []
[2024-01-10T13:14:33.064582+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::valid() should either be compatible with Iterator::valid(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::valid() should either be compatible with Iterator::valid(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:124)"} []
[2024-01-10T13:14:33.064616+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:135)"} []
[2024-01-10T13:14:33.064659+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::seek($position) should either be compatible with SeekableIterator::seek(int $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::seek($position) should either be compatible with SeekableIterator::seek(int $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:246)"} []
[2024-01-10T13:14:33.064721+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::current() should either be compatible with Iterator::current(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:96)"} []
[2024-01-10T13:14:33.064759+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::next() should either be compatible with Iterator::next(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::next() should either be compatible with Iterator::next(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:104)"} []
[2024-01-10T13:14:33.064792+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::key() should either be compatible with Iterator::key(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:114)"} []
[2024-01-10T13:14:33.064826+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::valid() should either be compatible with Iterator::valid(): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::valid() should either be compatible with Iterator::valid(): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:124)"} []
[2024-01-10T13:14:33.064859+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::rewind() should either be compatible with Iterator::rewind(): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:135)"} []
[2024-01-10T13:14:33.064898+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::offsetExists($position) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::offsetExists($position) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:147)"} []
[2024-01-10T13:14:33.064932+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::offsetGet($position) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::offsetGet($position) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:161)"} []
[2024-01-10T13:14:33.064968+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::offsetSet($position, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::offsetSet($position, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:177)"} []
[2024-01-10T13:14:33.065001+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::offsetUnset($position) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::offsetUnset($position) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:189)"} []
[2024-01-10T13:14:33.065034+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Form\FormErrorIterator::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Form\\FormErrorIterator::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/form/FormErrorIterator.php:232)"} []
[2024-01-10T13:14:33.065195+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:14:33.072918+00:00] doctrine.DEBUG: Executing statement: INSERT INTO newsletters (name, content, created_at, is_sent, categories_id) VALUES (?, ?, ?, ?, ?) (parameters: array{"1":"cool","2":"<p><br>&nbsp;</p><p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Omnis provident obcaecati deserunt recusandae ipsa vitae enim debitis cum. Fuga tempore consequuntur dolorum aspernatur quidem autem nostrum aperiam explicabo neque itaque!</p>","3":"2024-01-10 13:14:33","4":0,"5":2}, types: array{"1":2,"2":2,"3":2,"4":5,"5":1}) {"sql":"INSERT INTO newsletters (name, content, created_at, is_sent, categories_id) VALUES (?, ?, ?, ?, ?)","params":{"1":"cool","2":"<p><br>&nbsp;</p><p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Omnis provident obcaecati deserunt recusandae ipsa vitae enim debitis cum. Fuga tempore consequuntur dolorum aspernatur quidem autem nostrum aperiam explicabo neque itaque!</p>","3":"2024-01-10 13:14:33","4":0,"5":2},"types":{"1":2,"2":2,"3":2,"4":5,"5":1}} []
[2024-01-10T13:14:33.073450+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:14:33.117853+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:14:33.118253+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:14:33.118531+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:14:33.118761+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:14:33.118993+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:14:33.119265+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:14:33.127168+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:14:33.127683+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:14:33.130083+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:14:33.130513+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:14:33.133394+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:14:33.133788+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:14:33.135830+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:14:33.136209+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:14:33.138607+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:14:33.142007+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:14:33.142504+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:14:33.144326+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:14:33.145383+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:14:33.178002+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:14:33.178142+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:14:33.233033+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:14:33.236126+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:14:33.236231+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:14:33.236269+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:14:33.236298+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:14:33.236668+00:00] request.INFO: Matched route "newsletters_list". {"route":"newsletters_list","route_parameters":{"_route":"newsletters_list","_controller":"App\\Controller\\NewslettersController::list"},"request_uri":"http://localhost:8001/newsletters/list","method":"GET"} []
[2024-01-10T13:14:33.241491+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:14:33.242220+00:00] doctrine.DEBUG: Executing query: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0"} []
[2024-01-10T13:14:33.247137+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:14:33.247871+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:14:33.249366+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:14:33.249485+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:14:33.249555+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:14:33.249629+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:14:33.249690+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:14:33.249750+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:14:33.250291+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:14:33.250363+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:14:33.250435+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:14:33.250503+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:14:33.250828+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:14:33.251197+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:14:33.251423+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:14:33.252339+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:14:33.252753+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:14:33.253767+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:14:33.254060+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:14:33.255041+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:14:33.255268+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:14:33.256341+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:14:33.257916+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:14:33.258111+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:14:33.259142+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:14:33.259975+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:14:33.274804+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:14:33.274921+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:14:33.298019+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:14:33.328400+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:14:33.328607+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:14:33.328673+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:14:33.328727+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:14:33.330213+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"7dc304"},"request_uri":"http://localhost:8001/_wdt/7dc304","method":"GET"} []
[2024-01-10T13:14:33.331357+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:14:33.331494+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:14:33.331581+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:14:33.331659+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:14:33.331734+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:14:33.331806+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:14:33.333095+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:14:33.333200+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:14:33.333278+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:14:33.333356+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:20:31.838325+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:20:31.838987+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:20:31.839295+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:20:31.839518+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:20:31.842495+00:00] request.INFO: Matched route "newsletters_send". {"route":"newsletters_send","route_parameters":{"_route":"newsletters_send","_controller":"App\\Controller\\NewslettersController::send","id":"1"},"request_uri":"http://localhost:8001/newsletters/send/1","method":"GET"} []
[2024-01-10T13:20:31.859701+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:20:31.863129+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ? (parameters: array{"1":"1"}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ?","params":{"1":"1"},"types":{"1":1}} []
[2024-01-10T13:20:31.873764+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:20:31.876943+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:20:31.911827+00:00] messenger.INFO: Sending message App\Message\SendNewsletterMessage with async sender using Symfony\Component\Messenger\Bridge\Doctrine\Transport\DoctrineTransport {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage","alias":"async","sender":"Symfony\\Component\\Messenger\\Bridge\\Doctrine\\Transport\\DoctrineTransport"} []
[2024-01-10T13:20:31.934748+00:00] doctrine.DEBUG: Executing statement: INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?) (parameters: array{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:1:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"default","4":"2024-01-10 13:20:31","5":"2024-01-10 13:20:31"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?)","params":{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:1:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"default","4":"2024-01-10 13:20:31","5":"2024-01-10 13:20:31"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2024-01-10T13:20:31.939681+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:20:31.940858+00:00] doctrine.DEBUG: Executing statement: SELECT c.TABLE_NAME,       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony"}, types: array{"1":2,"2":2}) {"sql":"SELECT c.TABLE_NAME,       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony"},"types":{"1":2,"2":2}} []
[2024-01-10T13:20:31.948998+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME,        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME,        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:20:31.952089+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT k.TABLE_NAME,            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT DISTINCT k.TABLE_NAME,            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:20:31.955031+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:20:31.961844+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:20:31.962249+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:20:31.963909+00:00] doctrine.DEBUG: Executing statement: CREATE TABLE messenger_messages (id BIGINT AUTO_INCREMENT NOT NULL, body LONGTEXT NOT NULL, headers LONGTEXT NOT NULL, queue_name VARCHAR(190) NOT NULL, created_at DATETIME NOT NULL, available_at DATETIME NOT NULL, delivered_at DATETIME DEFAULT NULL, INDEX IDX_75EA56E0FB7336F0 (queue_name), INDEX IDX_75EA56E0E3BD61CE (available_at), INDEX IDX_75EA56E016BA31DB (delivered_at), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB {"sql":"CREATE TABLE messenger_messages (id BIGINT AUTO_INCREMENT NOT NULL, body LONGTEXT NOT NULL, headers LONGTEXT NOT NULL, queue_name VARCHAR(190) NOT NULL, created_at DATETIME NOT NULL, available_at DATETIME NOT NULL, delivered_at DATETIME DEFAULT NULL, INDEX IDX_75EA56E0FB7336F0 (queue_name), INDEX IDX_75EA56E0E3BD61CE (available_at), INDEX IDX_75EA56E016BA31DB (delivered_at), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB"} []
[2024-01-10T13:20:32.015458+00:00] doctrine.DEBUG: Executing statement: INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?) (parameters: array{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:1:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"default","4":"2024-01-10 13:20:31","5":"2024-01-10 13:20:31"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?)","params":{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:1:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"default","4":"2024-01-10 13:20:31","5":"2024-01-10 13:20:31"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2024-01-10T13:20:32.030241+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:20:32.030648+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:20:32.030906+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:20:32.031235+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:20:32.031493+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:20:32.032082+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:20:32.036077+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:20:32.036480+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:20:32.037279+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:20:32.037970+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:20:32.039669+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:20:32.041749+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:20:32.042555+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:20:32.046220+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:20:32.047130+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:20:32.052600+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:20:32.053517+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:20:32.057915+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:20:32.058611+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:20:32.063745+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:20:32.073816+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:20:32.074637+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:20:32.080027+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:20:32.083671+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:20:32.129440+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:20:32.129753+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:20:32.172302+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:20:32.176654+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:20:32.176786+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:20:32.176832+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:20:32.176866+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:20:32.177328+00:00] request.INFO: Matched route "newsletters_list". {"route":"newsletters_list","route_parameters":{"_route":"newsletters_list","_controller":"App\\Controller\\NewslettersController::list"},"request_uri":"http://localhost:8001/newsletters/list","method":"GET"} []
[2024-01-10T13:20:32.179272+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:20:32.180008+00:00] doctrine.DEBUG: Executing query: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0"} []
[2024-01-10T13:20:32.182439+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:20:32.183263+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:20:32.184624+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:20:32.184704+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:20:32.184754+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:20:32.184806+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:20:32.184845+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:20:32.184882+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:20:32.185288+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:20:32.185344+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:20:32.185394+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:20:32.185440+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:20:32.185714+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:20:32.186041+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:20:32.186279+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:20:32.187755+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:20:32.188017+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:20:32.189167+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:20:32.189422+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:20:32.190876+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:20:32.191076+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:20:32.192427+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:20:32.194051+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:20:32.194249+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:20:32.195240+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:20:32.195883+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:20:32.211045+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:20:32.211149+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:20:32.233841+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:20:32.257178+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:20:32.257508+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:20:32.257705+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:20:32.257895+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:20:32.258882+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"57259e"},"request_uri":"http://localhost:8001/_wdt/57259e","method":"GET"} []
[2024-01-10T13:20:32.260108+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:20:32.260340+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:20:32.260574+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:20:32.260758+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:20:32.260942+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:20:32.261142+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:20:32.262937+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:20:32.263195+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:20:32.263422+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:20:32.263618+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:21:14.740692+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:21:14.741708+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:21:14.742101+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:21:14.742370+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:21:14.745744+00:00] request.INFO: Matched route "newsletters_send". {"route":"newsletters_send","route_parameters":{"_route":"newsletters_send","_controller":"App\\Controller\\NewslettersController::send","id":"1"},"request_uri":"http://localhost:8001/newsletters/send/1","method":"GET"} []
[2024-01-10T13:21:14.778473+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:21:14.781279+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ? (parameters: array{"1":"1"}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ?","params":{"1":"1"},"types":{"1":1}} []
[2024-01-10T13:21:14.787400+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:21:14.788929+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:21:14.792027+00:00] messenger.INFO: Sending message App\Message\SendNewsletterMessage with async sender using Symfony\Component\Messenger\Bridge\Doctrine\Transport\DoctrineTransport {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage","alias":"async","sender":"Symfony\\Component\\Messenger\\Bridge\\Doctrine\\Transport\\DoctrineTransport"} []
[2024-01-10T13:21:14.792420+00:00] doctrine.DEBUG: Executing statement: INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?) (parameters: array{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:1:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"default","4":"2024-01-10 13:21:14","5":"2024-01-10 13:21:14"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?)","params":{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:1:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"default","4":"2024-01-10 13:21:14","5":"2024-01-10 13:21:14"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2024-01-10T13:21:14.799676+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:21:14.799839+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:21:14.799972+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:21:14.800059+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:21:14.800140+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:21:14.800262+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:21:14.802436+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:21:14.802572+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:21:14.802767+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:21:14.802879+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:21:14.803734+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:21:14.805064+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:21:14.805402+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:21:14.807506+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:21:14.807776+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:21:14.809542+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:21:14.809830+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:21:14.812398+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:21:14.812773+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:21:14.815322+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:21:14.818002+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:21:14.818366+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:21:14.820547+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:21:14.822054+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:21:14.836842+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:21:14.836946+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:21:14.851484+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:21:14.854343+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:21:14.854449+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:21:14.854486+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:21:14.854515+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:21:14.854902+00:00] request.INFO: Matched route "newsletters_list". {"route":"newsletters_list","route_parameters":{"_route":"newsletters_list","_controller":"App\\Controller\\NewslettersController::list"},"request_uri":"http://localhost:8001/newsletters/list","method":"GET"} []
[2024-01-10T13:21:14.856668+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:21:14.857614+00:00] doctrine.DEBUG: Executing query: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0"} []
[2024-01-10T13:21:14.859644+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:21:14.860509+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:21:14.861940+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:21:14.862015+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:21:14.862073+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:21:14.862114+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:21:14.862152+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:21:14.862202+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:21:14.862718+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:21:14.862799+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:21:14.862889+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:21:14.862963+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:21:14.863353+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:21:14.863807+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:21:14.864085+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:21:14.865498+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:21:14.865695+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:21:14.867009+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:21:14.867191+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:21:14.868627+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:21:14.868850+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:21:14.870570+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:21:14.873127+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:21:14.873416+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:21:14.874515+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:21:14.875359+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:21:14.890169+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:21:14.890302+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:21:14.914693+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:21:14.936564+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:21:14.936786+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:21:14.936852+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:21:14.936905+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:21:14.937579+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"bb0ce6"},"request_uri":"http://localhost:8001/_wdt/bb0ce6","method":"GET"} []
[2024-01-10T13:21:14.938717+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:21:14.939479+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:21:14.939823+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:21:14.939967+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:21:14.940043+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:21:14.940128+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:21:14.942072+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:21:14.942194+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:21:14.942302+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:21:14.942401+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:21:15.629339+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:21:15.630202+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:21:15.630683+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:21:15.631156+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:21:15.633763+00:00] request.INFO: Matched route "newsletters_send". {"route":"newsletters_send","route_parameters":{"_route":"newsletters_send","_controller":"App\\Controller\\NewslettersController::send","id":"1"},"request_uri":"http://localhost:8001/newsletters/send/1","method":"GET"} []
[2024-01-10T13:21:15.643689+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:21:15.647001+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ? (parameters: array{"1":"1"}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ?","params":{"1":"1"},"types":{"1":1}} []
[2024-01-10T13:21:15.657268+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:21:15.661262+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:21:15.666691+00:00] messenger.INFO: Sending message App\Message\SendNewsletterMessage with async sender using Symfony\Component\Messenger\Bridge\Doctrine\Transport\DoctrineTransport {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage","alias":"async","sender":"Symfony\\Component\\Messenger\\Bridge\\Doctrine\\Transport\\DoctrineTransport"} []
[2024-01-10T13:21:15.668279+00:00] doctrine.DEBUG: Executing statement: INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?) (parameters: array{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:1:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"default","4":"2024-01-10 13:21:15","5":"2024-01-10 13:21:15"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?)","params":{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:1:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"default","4":"2024-01-10 13:21:15","5":"2024-01-10 13:21:15"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2024-01-10T13:21:15.683100+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:21:15.684263+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:21:15.685399+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:21:15.685908+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:21:15.686334+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:21:15.686751+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:21:15.690543+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:21:15.691065+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:21:15.691587+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:21:15.691992+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:21:15.693498+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:21:15.695822+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:21:15.697378+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:21:15.704568+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:21:15.706319+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:21:15.714605+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:21:15.715464+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:21:15.720286+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:21:15.720978+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:21:15.723901+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:21:15.729836+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:21:15.731304+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:21:15.733961+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:21:15.735452+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:21:15.751924+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:21:15.752044+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:21:15.775454+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:21:15.778456+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:21:15.778580+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:21:15.778632+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:21:15.778689+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:21:15.779250+00:00] request.INFO: Matched route "newsletters_list". {"route":"newsletters_list","route_parameters":{"_route":"newsletters_list","_controller":"App\\Controller\\NewslettersController::list"},"request_uri":"http://localhost:8001/newsletters/list","method":"GET"} []
[2024-01-10T13:21:15.782448+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:21:15.783225+00:00] doctrine.DEBUG: Executing query: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0"} []
[2024-01-10T13:21:15.785323+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:21:15.786065+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:21:15.787844+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:21:15.787940+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:21:15.788025+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:21:15.788097+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:21:15.788161+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:21:15.788227+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:21:15.788821+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:21:15.788915+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:21:15.789000+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:21:15.789073+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:21:15.789407+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:21:15.789816+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:21:15.790094+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:21:15.791693+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:21:15.791932+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:21:15.793417+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:21:15.793737+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:21:15.795089+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:21:15.795316+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:21:15.797080+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:21:15.800003+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:21:15.800220+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:21:15.801607+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:21:15.802478+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:21:15.817830+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:21:15.817953+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:21:15.840290+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:21:15.856903+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:21:15.857073+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:21:15.857136+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:21:15.857210+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:21:15.857838+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"2ce152"},"request_uri":"http://localhost:8001/_wdt/2ce152","method":"GET"} []
[2024-01-10T13:21:15.858783+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:21:15.858902+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:21:15.858986+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:21:15.859059+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:21:15.859128+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:21:15.859205+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:21:15.860589+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:21:15.860745+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:21:15.860855+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:21:15.860934+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:21:17.474284+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:21:17.474961+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:21:17.475177+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:21:17.475340+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:21:17.478816+00:00] request.INFO: Matched route "newsletters_list". {"route":"newsletters_list","route_parameters":{"_route":"newsletters_list","_controller":"App\\Controller\\NewslettersController::list"},"request_uri":"http://localhost:8001/newsletters/list","method":"GET"} []
[2024-01-10T13:21:17.503718+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:21:17.507630+00:00] doctrine.DEBUG: Executing query: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0"} []
[2024-01-10T13:21:17.518924+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:21:17.521578+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:21:17.525447+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:21:17.525621+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:21:17.525771+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:21:17.525923+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:21:17.526062+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:21:17.526225+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:21:17.527379+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:21:17.527532+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:21:17.527788+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:21:17.527914+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:21:17.528638+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:21:17.529793+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:21:17.530308+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:21:17.532969+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:21:17.533425+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:21:17.535512+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:21:17.535879+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:21:17.537845+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:21:17.538226+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:21:17.541149+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:21:17.544713+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:21:17.545121+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:21:17.547608+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:21:17.549783+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:21:17.573112+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:21:17.573274+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:21:17.600251+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:21:17.615057+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:21:17.615237+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:21:17.615299+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:21:17.615347+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:21:17.615944+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"9298df"},"request_uri":"http://localhost:8001/_wdt/9298df","method":"GET"} []
[2024-01-10T13:21:17.617036+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:21:17.617154+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:21:17.617249+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:21:17.617321+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:21:17.617394+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:21:17.617463+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:21:17.618823+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:21:17.618940+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:21:17.619041+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:21:17.619113+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:23:41.122967+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:23:41.123084+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:23:41.123132+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:23:41.123174+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:23:41.123219+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:23:41.123258+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:23:41.123296+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:23:41.123332+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:23:41.124209+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Routing\RouteCollection::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Routing\\RouteCollection::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/routing/RouteCollection.php:59)"} []
[2024-01-10T13:23:41.124293+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Routing\RouteCollection::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Routing\\RouteCollection::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/routing/RouteCollection.php:69)"} []
[2024-01-10T13:23:41.134639+00:00] request.INFO: Matched route "newsletters_send". {"route":"newsletters_send","route_parameters":{"_route":"newsletters_send","_controller":"App\\Controller\\NewslettersController::send","id":"1"},"request_uri":"http://localhost:8001/newsletters/send/1","method":"GET"} []
[2024-01-10T13:23:41.137991+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:23:41.138910+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ? (parameters: array{"1":"1"}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ?","params":{"1":"1"},"types":{"1":1}} []
[2024-01-10T13:23:41.141926+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:23:41.142744+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:23:41.144624+00:00] messenger.INFO: Sending message App\Message\SendNewsletterMessage with async sender using Symfony\Component\Messenger\Bridge\Doctrine\Transport\DoctrineTransport {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage","alias":"async","sender":"Symfony\\Component\\Messenger\\Bridge\\Doctrine\\Transport\\DoctrineTransport"} []
[2024-01-10T13:23:41.144808+00:00] doctrine.DEBUG: Executing statement: INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?) (parameters: array{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:1:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"default","4":"2024-01-10 13:23:41","5":"2024-01-10 13:23:41"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?)","params":{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:1:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"default","4":"2024-01-10 13:23:41","5":"2024-01-10 13:23:41"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2024-01-10T13:23:41.151609+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:23:41.151710+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:23:41.151780+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:23:41.151842+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:23:41.151920+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:23:41.151987+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:23:41.153305+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:23:41.154230+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:23:41.154515+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:23:41.155777+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:23:41.155980+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:23:41.157297+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:23:41.157510+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:23:41.158818+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:23:41.158990+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:23:41.160402+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:23:41.162742+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:23:41.162969+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:23:41.164131+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:23:41.165165+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:23:41.198922+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:23:41.205320+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:23:41.205426+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:23:41.205462+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:23:41.205489+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:23:41.206030+00:00] request.INFO: Matched route "newsletters_list". {"route":"newsletters_list","route_parameters":{"_route":"newsletters_list","_controller":"App\\Controller\\NewslettersController::list"},"request_uri":"http://localhost:8001/newsletters/list","method":"GET"} []
[2024-01-10T13:23:41.211427+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:23:41.212043+00:00] doctrine.DEBUG: Executing query: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0"} []
[2024-01-10T13:23:41.214151+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:23:41.214999+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:23:41.216558+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:23:41.216666+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:23:41.216739+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:23:41.216806+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:23:41.216883+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:23:41.216949+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:23:41.217735+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:23:41.217812+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:23:41.217886+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:23:41.217947+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:23:41.218268+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:23:41.218948+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:23:41.219178+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:23:41.220481+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:23:41.220644+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:23:41.221477+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:23:41.221646+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:23:41.222508+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:23:41.222693+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:23:41.224143+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:23:41.226339+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:23:41.226553+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:23:41.227757+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:23:41.228587+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:23:41.243559+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:23:41.243663+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:23:41.301364+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:23:41.325683+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:23:41.325843+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:23:41.325895+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:23:41.325936+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:23:41.326823+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"afd8ed"},"request_uri":"http://localhost:8001/_wdt/afd8ed","method":"GET"} []
[2024-01-10T13:23:41.337664+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:23:41.337787+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:23:41.337856+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:23:41.337913+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:23:41.337966+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:23:41.338019+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:23:41.340066+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:23:41.340189+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:23:41.340261+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:23:41.340314+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:23:44.049392+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:23:44.049537+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:23:44.049595+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:23:44.049657+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:23:44.050786+00:00] request.INFO: Matched route "newsletters_list". {"route":"newsletters_list","route_parameters":{"_route":"newsletters_list","_controller":"App\\Controller\\NewslettersController::list"},"request_uri":"http://localhost:8001/newsletters/list","method":"GET"} []
[2024-01-10T13:23:44.060091+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:23:44.061040+00:00] doctrine.DEBUG: Executing query: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0"} []
[2024-01-10T13:23:44.063066+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:23:44.063862+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:23:44.065549+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:23:44.065634+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:23:44.065682+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:23:44.065724+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:23:44.065762+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:23:44.065799+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:23:44.066787+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:23:44.066857+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:23:44.066941+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:23:44.066984+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:23:44.067265+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:23:44.068273+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:23:44.068579+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:23:44.069520+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:23:44.069711+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:23:44.070710+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:23:44.070895+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:23:44.071834+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:23:44.072025+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:23:44.073224+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:23:44.076130+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:23:44.076389+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:23:44.077871+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:23:44.078919+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:23:44.093279+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:23:44.093412+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:23:44.118933+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:23:44.137119+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:23:44.137401+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:23:44.137548+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:23:44.137698+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:23:44.138503+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"c05147"},"request_uri":"http://localhost:8001/_wdt/c05147","method":"GET"} []
[2024-01-10T13:23:44.140457+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:23:44.140720+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:23:44.140913+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:23:44.141068+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:23:44.141220+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:23:44.141350+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:23:44.142913+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:23:44.143152+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:23:44.143380+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:23:44.143545+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:24:13.992516+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:24:13.993563+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:24:13.993875+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:24:13.994119+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:24:13.998313+00:00] request.INFO: Matched route "newsletters_send". {"route":"newsletters_send","route_parameters":{"_route":"newsletters_send","_controller":"App\\Controller\\NewslettersController::send","id":"1"},"request_uri":"http://localhost:8001/newsletters/send/1","method":"GET"} []
[2024-01-10T13:24:14.018847+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:24:14.020967+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ? (parameters: array{"1":"1"}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ?","params":{"1":"1"},"types":{"1":1}} []
[2024-01-10T13:24:14.026443+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:24:14.027908+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:24:14.031148+00:00] messenger.INFO: Sending message App\Message\SendNewsletterMessage with async sender using Symfony\Component\Messenger\Bridge\Doctrine\Transport\DoctrineTransport {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage","alias":"async","sender":"Symfony\\Component\\Messenger\\Bridge\\Doctrine\\Transport\\DoctrineTransport"} []
[2024-01-10T13:24:14.031445+00:00] doctrine.DEBUG: Executing statement: INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?) (parameters: array{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:1:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"default","4":"2024-01-10 13:24:14","5":"2024-01-10 13:24:14"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?)","params":{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:1:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"default","4":"2024-01-10 13:24:14","5":"2024-01-10 13:24:14"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2024-01-10T13:24:14.037406+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:24:14.037590+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:24:14.037714+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:24:14.037836+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:24:14.037941+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:24:14.038051+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:24:14.039307+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:24:14.039468+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:24:14.039690+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:24:14.039824+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:24:14.040607+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:24:14.041883+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:24:14.042322+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:24:14.044273+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:24:14.044635+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:24:14.046291+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:24:14.046655+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:24:14.048243+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:24:14.048568+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:24:14.050541+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:24:14.054342+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:24:14.054684+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:24:14.056774+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:24:14.058477+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:24:14.078062+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:24:14.078202+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:24:14.097616+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:24:14.101607+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:24:14.101730+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:24:14.101803+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:24:14.101854+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:24:14.102359+00:00] request.INFO: Matched route "newsletters_list". {"route":"newsletters_list","route_parameters":{"_route":"newsletters_list","_controller":"App\\Controller\\NewslettersController::list"},"request_uri":"http://localhost:8001/newsletters/list","method":"GET"} []
[2024-01-10T13:24:14.104310+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:24:14.105062+00:00] doctrine.DEBUG: Executing query: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0"} []
[2024-01-10T13:24:14.107367+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:24:14.108178+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:24:14.109587+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:24:14.109739+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:24:14.109806+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:24:14.109878+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:24:14.109936+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:24:14.109993+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:24:14.110558+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:24:14.110620+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:24:14.110669+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:24:14.110707+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:24:14.111013+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:24:14.111334+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:24:14.111637+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:24:14.112717+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:24:14.113025+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:24:14.113997+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:24:14.114307+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:24:14.115269+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:24:14.115464+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:24:14.116980+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:24:14.119574+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:24:14.119873+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:24:14.120936+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:24:14.121714+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:24:14.136629+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:24:14.136741+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:24:14.158583+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:24:14.176435+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:24:14.176604+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:24:14.176677+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:24:14.176725+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:24:14.177323+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"9d14ed"},"request_uri":"http://localhost:8001/_wdt/9d14ed","method":"GET"} []
[2024-01-10T13:24:14.178825+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:24:14.178947+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:24:14.179058+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:24:14.179162+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:24:14.179265+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:24:14.179341+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:24:14.180820+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:24:14.180951+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:24:14.181037+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:24:14.181130+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:24:50.850428+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:24:50.850611+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:24:50.850658+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:24:50.850694+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:24:50.850728+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:24:50.850772+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:24:50.850806+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:24:50.850837+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:24:50.851777+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Routing\RouteCollection::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Routing\\RouteCollection::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/routing/RouteCollection.php:59)"} []
[2024-01-10T13:24:50.851858+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Routing\RouteCollection::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Routing\\RouteCollection::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/routing/RouteCollection.php:69)"} []
[2024-01-10T13:24:50.863156+00:00] request.INFO: Matched route "newsletters_send". {"route":"newsletters_send","route_parameters":{"_route":"newsletters_send","_controller":"App\\Controller\\NewslettersController::send","id":"1"},"request_uri":"http://localhost:8001/newsletters/send/1","method":"GET"} []
[2024-01-10T13:24:50.867356+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:24:50.868330+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ? (parameters: array{"1":"1"}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ?","params":{"1":"1"},"types":{"1":1}} []
[2024-01-10T13:24:50.872243+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:24:50.873181+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:24:50.875070+00:00] messenger.INFO: Sending message App\Message\SendNewsletterMessage with async sender using Symfony\Component\Messenger\Bridge\Doctrine\Transport\DoctrineTransport {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage","alias":"async","sender":"Symfony\\Component\\Messenger\\Bridge\\Doctrine\\Transport\\DoctrineTransport"} []
[2024-01-10T13:24:50.875295+00:00] doctrine.DEBUG: Executing statement: INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?) (parameters: array{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:1:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"default","4":"2024-01-10 13:24:50","5":"2024-01-10 13:24:50"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?)","params":{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:1:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"default","4":"2024-01-10 13:24:50","5":"2024-01-10 13:24:50"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2024-01-10T13:24:50.881562+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:24:50.881657+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:24:50.881731+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:24:50.881789+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:24:50.881856+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:24:50.881936+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:24:50.883526+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:24:50.884602+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:24:50.884890+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:24:50.886136+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:24:50.886391+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:24:50.887523+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:24:50.887753+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:24:50.888705+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:24:50.888890+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:24:50.889995+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:24:50.891697+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:24:50.891903+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:24:50.893115+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:24:50.894490+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:24:50.933276+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:24:50.943057+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:24:50.943192+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:24:50.943238+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:24:50.943274+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:24:50.944207+00:00] request.INFO: Matched route "newsletters_list". {"route":"newsletters_list","route_parameters":{"_route":"newsletters_list","_controller":"App\\Controller\\NewslettersController::list"},"request_uri":"http://localhost:8001/newsletters/list","method":"GET"} []
[2024-01-10T13:24:50.949634+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:24:50.950390+00:00] doctrine.DEBUG: Executing query: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0"} []
[2024-01-10T13:24:50.952747+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:24:50.954088+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:24:50.955822+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:24:50.955909+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:24:50.955970+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:24:50.956028+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:24:50.956080+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:24:50.956130+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:24:50.956925+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:24:50.957002+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:24:50.957075+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:24:50.957132+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:24:50.957440+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:24:50.958131+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:24:50.958393+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:24:50.959291+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:24:50.959509+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:24:50.960419+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:24:50.960669+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:24:50.961554+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:24:50.961757+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:24:50.962809+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:24:50.964440+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:24:50.964670+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:24:50.965652+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:24:50.966431+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:24:50.979653+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:24:50.979755+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:24:51.000247+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:24:51.044331+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:24:51.044562+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:24:51.044627+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:24:51.044689+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:24:51.054466+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"b43d27"},"request_uri":"http://localhost:8001/_wdt/b43d27","method":"GET"} []
[2024-01-10T13:24:51.058411+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:24:51.058540+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:24:51.058621+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:24:51.058707+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:24:51.058759+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:24:51.058800+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:24:51.061248+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:24:51.061350+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:24:51.061520+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:24:51.062002+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:25:09.320870+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:25:09.321668+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:25:09.321703+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:25:09.321728+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:25:09.321751+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Console\Helper\HelperSet::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Console\\Helper\\HelperSet::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Helper/HelperSet.php:94)"} []
[2024-01-10T13:25:09.340826+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:25:09.342950+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:09.349331+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:09","2":"2024-01-10 13:25:09","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:09","2":"2024-01-10 13:25:09","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:09.351107+00:00] doctrine.DEBUG: Executing statement: UPDATE messenger_messages SET delivered_at = ? WHERE id = ? (parameters: array{"1":"2024-01-10 13:25:09","2":1}, types: array{"1":2,"2":2}) {"sql":"UPDATE messenger_messages SET delivered_at = ? WHERE id = ?","params":{"1":"2024-01-10 13:25:09","2":1},"types":{"1":2,"2":2}} []
[2024-01-10T13:25:09.351757+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:09.360158+00:00] messenger.INFO: Received message App\Message\SendNewsletterMessage {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage"} []
[2024-01-10T13:25:09.402824+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:25:09.412604+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ? (parameters: array{"1":1}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ?","params":{"1":1},"types":{"1":1}} []
[2024-01-10T13:25:12.452767+00:00] app.DEBUG: Email transport "Symfony\Component\Mailer\Transport\Smtp\SmtpTransport" starting [] []
[2024-01-10T13:25:12.566416+00:00] app.DEBUG: Email transport "Symfony\Component\Mailer\Transport\Smtp\SmtpTransport" started [] []
[2024-01-10T13:25:12.614183+00:00] messenger.INFO: Message Symfony\Component\Mailer\Messenger\SendEmailMessage handled by Symfony\Component\Mailer\Messenger\MessageHandler::__invoke {"message":{"Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage":[]},"class":"Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage","handler":"Symfony\\Component\\Mailer\\Messenger\\MessageHandler::__invoke"} []
[2024-01-10T13:25:12.614417+00:00] messenger.INFO: Message App\Message\SendNewsletterMessage handled by App\MessageHandler\SendNewsletterMessageHandler::__invoke {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage","handler":"App\\MessageHandler\\SendNewsletterMessageHandler::__invoke"} []
[2024-01-10T13:25:12.615100+00:00] messenger.INFO: App\Message\SendNewsletterMessage was handled successfully (acknowledging to transport). {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage"} []
[2024-01-10T13:25:12.615225+00:00] doctrine.DEBUG: Executing statement: DELETE FROM messenger_messages WHERE id = ? (parameters: array{"1":"1"}, types: array{"1":2}) {"sql":"DELETE FROM messenger_messages WHERE id = ?","params":{"1":"1"},"types":{"1":2}} []
[2024-01-10T13:25:12.623396+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:12.623737+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:12","2":"2024-01-10 13:25:12","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:12","2":"2024-01-10 13:25:12","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:12.624611+00:00] doctrine.DEBUG: Executing statement: UPDATE messenger_messages SET delivered_at = ? WHERE id = ? (parameters: array{"1":"2024-01-10 13:25:12","2":2}, types: array{"1":2,"2":2}) {"sql":"UPDATE messenger_messages SET delivered_at = ? WHERE id = ?","params":{"1":"2024-01-10 13:25:12","2":2},"types":{"1":2,"2":2}} []
[2024-01-10T13:25:12.625116+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:12.630723+00:00] messenger.INFO: Received message App\Message\SendNewsletterMessage {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage"} []
[2024-01-10T13:25:12.631115+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:25:12.631810+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ? (parameters: array{"1":1}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ?","params":{"1":1},"types":{"1":1}} []
[2024-01-10T13:25:15.685993+00:00] messenger.INFO: Message Symfony\Component\Mailer\Messenger\SendEmailMessage handled by Symfony\Component\Mailer\Messenger\MessageHandler::__invoke {"message":{"Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage":[]},"class":"Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage","handler":"Symfony\\Component\\Mailer\\Messenger\\MessageHandler::__invoke"} []
[2024-01-10T13:25:15.686192+00:00] messenger.INFO: Message App\Message\SendNewsletterMessage handled by App\MessageHandler\SendNewsletterMessageHandler::__invoke {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage","handler":"App\\MessageHandler\\SendNewsletterMessageHandler::__invoke"} []
[2024-01-10T13:25:15.686385+00:00] messenger.INFO: App\Message\SendNewsletterMessage was handled successfully (acknowledging to transport). {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage"} []
[2024-01-10T13:25:15.686487+00:00] doctrine.DEBUG: Executing statement: DELETE FROM messenger_messages WHERE id = ? (parameters: array{"1":"2"}, types: array{"1":2}) {"sql":"DELETE FROM messenger_messages WHERE id = ?","params":{"1":"2"},"types":{"1":2}} []
[2024-01-10T13:25:15.692650+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:15.693147+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:15","2":"2024-01-10 13:25:15","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:15","2":"2024-01-10 13:25:15","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:15.694068+00:00] doctrine.DEBUG: Executing statement: UPDATE messenger_messages SET delivered_at = ? WHERE id = ? (parameters: array{"1":"2024-01-10 13:25:15","2":3}, types: array{"1":2,"2":2}) {"sql":"UPDATE messenger_messages SET delivered_at = ? WHERE id = ?","params":{"1":"2024-01-10 13:25:15","2":3},"types":{"1":2,"2":2}} []
[2024-01-10T13:25:15.694928+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:15.698003+00:00] messenger.INFO: Received message App\Message\SendNewsletterMessage {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage"} []
[2024-01-10T13:25:15.698234+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:25:15.699635+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ? (parameters: array{"1":1}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ?","params":{"1":1},"types":{"1":1}} []
[2024-01-10T13:25:18.754621+00:00] messenger.INFO: Message Symfony\Component\Mailer\Messenger\SendEmailMessage handled by Symfony\Component\Mailer\Messenger\MessageHandler::__invoke {"message":{"Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage":[]},"class":"Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage","handler":"Symfony\\Component\\Mailer\\Messenger\\MessageHandler::__invoke"} []
[2024-01-10T13:25:18.755063+00:00] messenger.INFO: Message App\Message\SendNewsletterMessage handled by App\MessageHandler\SendNewsletterMessageHandler::__invoke {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage","handler":"App\\MessageHandler\\SendNewsletterMessageHandler::__invoke"} []
[2024-01-10T13:25:18.755584+00:00] messenger.INFO: App\Message\SendNewsletterMessage was handled successfully (acknowledging to transport). {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage"} []
[2024-01-10T13:25:18.755911+00:00] doctrine.DEBUG: Executing statement: DELETE FROM messenger_messages WHERE id = ? (parameters: array{"1":"3"}, types: array{"1":2}) {"sql":"DELETE FROM messenger_messages WHERE id = ?","params":{"1":"3"},"types":{"1":2}} []
[2024-01-10T13:25:18.765597+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:18.767437+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:18","2":"2024-01-10 13:25:18","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:18","2":"2024-01-10 13:25:18","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:18.771124+00:00] doctrine.DEBUG: Executing statement: UPDATE messenger_messages SET delivered_at = ? WHERE id = ? (parameters: array{"1":"2024-01-10 13:25:18","2":4}, types: array{"1":2,"2":2}) {"sql":"UPDATE messenger_messages SET delivered_at = ? WHERE id = ?","params":{"1":"2024-01-10 13:25:18","2":4},"types":{"1":2,"2":2}} []
[2024-01-10T13:25:18.772988+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:18.779167+00:00] messenger.INFO: Received message App\Message\SendNewsletterMessage {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage"} []
[2024-01-10T13:25:18.780869+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:25:18.782688+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ? (parameters: array{"1":1}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ?","params":{"1":1},"types":{"1":1}} []
[2024-01-10T13:25:21.838244+00:00] messenger.INFO: Message Symfony\Component\Mailer\Messenger\SendEmailMessage handled by Symfony\Component\Mailer\Messenger\MessageHandler::__invoke {"message":{"Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage":[]},"class":"Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage","handler":"Symfony\\Component\\Mailer\\Messenger\\MessageHandler::__invoke"} []
[2024-01-10T13:25:21.838824+00:00] messenger.INFO: Message App\Message\SendNewsletterMessage handled by App\MessageHandler\SendNewsletterMessageHandler::__invoke {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage","handler":"App\\MessageHandler\\SendNewsletterMessageHandler::__invoke"} []
[2024-01-10T13:25:21.839487+00:00] messenger.INFO: App\Message\SendNewsletterMessage was handled successfully (acknowledging to transport). {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage"} []
[2024-01-10T13:25:21.839894+00:00] doctrine.DEBUG: Executing statement: DELETE FROM messenger_messages WHERE id = ? (parameters: array{"1":"4"}, types: array{"1":2}) {"sql":"DELETE FROM messenger_messages WHERE id = ?","params":{"1":"4"},"types":{"1":2}} []
[2024-01-10T13:25:21.848832+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:21.850079+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:21","2":"2024-01-10 13:25:21","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:21","2":"2024-01-10 13:25:21","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:21.852601+00:00] doctrine.DEBUG: Executing statement: UPDATE messenger_messages SET delivered_at = ? WHERE id = ? (parameters: array{"1":"2024-01-10 13:25:21","2":5}, types: array{"1":2,"2":2}) {"sql":"UPDATE messenger_messages SET delivered_at = ? WHERE id = ?","params":{"1":"2024-01-10 13:25:21","2":5},"types":{"1":2,"2":2}} []
[2024-01-10T13:25:21.855006+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:21.874226+00:00] messenger.INFO: Received message App\Message\SendNewsletterMessage {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage"} []
[2024-01-10T13:25:21.875107+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:25:21.877146+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ? (parameters: array{"1":1}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ?","params":{"1":1},"types":{"1":1}} []
[2024-01-10T13:25:24.976882+00:00] messenger.INFO: Message Symfony\Component\Mailer\Messenger\SendEmailMessage handled by Symfony\Component\Mailer\Messenger\MessageHandler::__invoke {"message":{"Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage":[]},"class":"Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage","handler":"Symfony\\Component\\Mailer\\Messenger\\MessageHandler::__invoke"} []
[2024-01-10T13:25:24.977098+00:00] messenger.INFO: Message App\Message\SendNewsletterMessage handled by App\MessageHandler\SendNewsletterMessageHandler::__invoke {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage","handler":"App\\MessageHandler\\SendNewsletterMessageHandler::__invoke"} []
[2024-01-10T13:25:24.977339+00:00] messenger.INFO: App\Message\SendNewsletterMessage was handled successfully (acknowledging to transport). {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage"} []
[2024-01-10T13:25:24.977480+00:00] doctrine.DEBUG: Executing statement: DELETE FROM messenger_messages WHERE id = ? (parameters: array{"1":"5"}, types: array{"1":2}) {"sql":"DELETE FROM messenger_messages WHERE id = ?","params":{"1":"5"},"types":{"1":2}} []
[2024-01-10T13:25:24.983827+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:24.984273+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:24","2":"2024-01-10 13:25:24","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:24","2":"2024-01-10 13:25:24","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:24.985111+00:00] doctrine.DEBUG: Executing statement: UPDATE messenger_messages SET delivered_at = ? WHERE id = ? (parameters: array{"1":"2024-01-10 13:25:24","2":6}, types: array{"1":2,"2":2}) {"sql":"UPDATE messenger_messages SET delivered_at = ? WHERE id = ?","params":{"1":"2024-01-10 13:25:24","2":6},"types":{"1":2,"2":2}} []
[2024-01-10T13:25:24.985821+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:24.989288+00:00] messenger.INFO: Received message App\Message\SendNewsletterMessage {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage"} []
[2024-01-10T13:25:24.989483+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:25:24.989936+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ? (parameters: array{"1":1}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ?","params":{"1":1},"types":{"1":1}} []
[2024-01-10T13:25:28.046515+00:00] messenger.INFO: Message Symfony\Component\Mailer\Messenger\SendEmailMessage handled by Symfony\Component\Mailer\Messenger\MessageHandler::__invoke {"message":{"Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage":[]},"class":"Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage","handler":"Symfony\\Component\\Mailer\\Messenger\\MessageHandler::__invoke"} []
[2024-01-10T13:25:28.046976+00:00] messenger.INFO: Message App\Message\SendNewsletterMessage handled by App\MessageHandler\SendNewsletterMessageHandler::__invoke {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage","handler":"App\\MessageHandler\\SendNewsletterMessageHandler::__invoke"} []
[2024-01-10T13:25:28.047637+00:00] messenger.INFO: App\Message\SendNewsletterMessage was handled successfully (acknowledging to transport). {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage"} []
[2024-01-10T13:25:28.048016+00:00] doctrine.DEBUG: Executing statement: DELETE FROM messenger_messages WHERE id = ? (parameters: array{"1":"6"}, types: array{"1":2}) {"sql":"DELETE FROM messenger_messages WHERE id = ?","params":{"1":"6"},"types":{"1":2}} []
[2024-01-10T13:25:28.056950+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:28.058787+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:28","2":"2024-01-10 13:25:28","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:28","2":"2024-01-10 13:25:28","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:28.061126+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:29.062917+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:29.064431+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:29","2":"2024-01-10 13:25:29","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:29","2":"2024-01-10 13:25:29","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:29.066129+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:30.067403+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:30.068457+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:30","2":"2024-01-10 13:25:30","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:30","2":"2024-01-10 13:25:30","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:30.070075+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:31.071298+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:31.072667+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:31","2":"2024-01-10 13:25:31","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:31","2":"2024-01-10 13:25:31","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:31.074691+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:32.076256+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:32.077703+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:32","2":"2024-01-10 13:25:32","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:32","2":"2024-01-10 13:25:32","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:32.079543+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:33.081159+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:33.082454+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:33","2":"2024-01-10 13:25:33","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:33","2":"2024-01-10 13:25:33","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:33.083971+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:34.085158+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:34.086176+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:34","2":"2024-01-10 13:25:34","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:34","2":"2024-01-10 13:25:34","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:34.087658+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:35.088835+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:35.089889+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:35","2":"2024-01-10 13:25:35","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:35","2":"2024-01-10 13:25:35","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:35.091739+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:36.093093+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:36.094084+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:36","2":"2024-01-10 13:25:36","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:36","2":"2024-01-10 13:25:36","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:36.095764+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:37.097096+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:37.098491+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:37","2":"2024-01-10 13:25:37","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:37","2":"2024-01-10 13:25:37","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:37.100913+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:38.102468+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:38.103749+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:38","2":"2024-01-10 13:25:38","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:38","2":"2024-01-10 13:25:38","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:38.105677+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:39.106983+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:39.108604+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:39","2":"2024-01-10 13:25:39","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:39","2":"2024-01-10 13:25:39","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:39.110521+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:40.112189+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:40.113075+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:40","2":"2024-01-10 13:25:40","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:40","2":"2024-01-10 13:25:40","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:40.114444+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:41.115574+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:41.116529+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:41","2":"2024-01-10 13:25:41","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:41","2":"2024-01-10 13:25:41","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:41.117823+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:42.118797+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:42.119672+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:42","2":"2024-01-10 13:25:42","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:42","2":"2024-01-10 13:25:42","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:42.121286+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:43.122522+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:43.123589+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:43","2":"2024-01-10 13:25:43","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:43","2":"2024-01-10 13:25:43","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:43.125255+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:44.126298+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:44.127118+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:44","2":"2024-01-10 13:25:44","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:44","2":"2024-01-10 13:25:44","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:44.128511+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:45.129557+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:45.130143+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:45","2":"2024-01-10 13:25:45","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:45","2":"2024-01-10 13:25:45","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:45.130799+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:46.131362+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:46.131937+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:46","2":"2024-01-10 13:25:46","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:46","2":"2024-01-10 13:25:46","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:46.132955+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:47.133777+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:47.135774+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:47","2":"2024-01-10 13:25:47","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:47","2":"2024-01-10 13:25:47","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:47.139211+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:48.141465+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:48.142873+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:48","2":"2024-01-10 13:25:48","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:48","2":"2024-01-10 13:25:48","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:48.144997+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:49.146331+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:49.146865+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:49","2":"2024-01-10 13:25:49","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:49","2":"2024-01-10 13:25:49","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:49.147620+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:50.148222+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:50.149161+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:50","2":"2024-01-10 13:25:50","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:50","2":"2024-01-10 13:25:50","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:50.150346+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:51.151330+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:51.152015+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:51","2":"2024-01-10 13:25:51","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:51","2":"2024-01-10 13:25:51","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:51.153107+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:52.154429+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:52.156585+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:52","2":"2024-01-10 13:25:52","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:52","2":"2024-01-10 13:25:52","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:52.159289+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:53.161276+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:53.161604+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:53","2":"2024-01-10 13:25:53","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:53","2":"2024-01-10 13:25:53","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:53.162087+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:54.162559+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:54.165265+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:54","2":"2024-01-10 13:25:54","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:54","2":"2024-01-10 13:25:54","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:54.168144+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:55.170572+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:55.172124+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:55","2":"2024-01-10 13:25:55","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:55","2":"2024-01-10 13:25:55","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:55.174177+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:56.175445+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:56.175972+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:56","2":"2024-01-10 13:25:56","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:56","2":"2024-01-10 13:25:56","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:56.176821+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:57.177539+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:57.178707+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:57","2":"2024-01-10 13:25:57","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:57","2":"2024-01-10 13:25:57","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:57.180783+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:58.182143+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:58.182473+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:58","2":"2024-01-10 13:25:58","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:58","2":"2024-01-10 13:25:58","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:58.182921+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:25:59.183392+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:25:59.184691+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:25:59","2":"2024-01-10 13:25:59","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:25:59","2":"2024-01-10 13:25:59","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:25:59.187152+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:00.189225+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:00.190576+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:00","2":"2024-01-10 13:26:00","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:00","2":"2024-01-10 13:26:00","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:00.193140+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:01.196522+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:01.197998+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:01","2":"2024-01-10 13:26:01","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:01","2":"2024-01-10 13:26:01","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:01.200261+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:02.201956+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:02.203782+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:02","2":"2024-01-10 13:26:02","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:02","2":"2024-01-10 13:26:02","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:02.206851+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:03.208951+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:03.210871+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:03","2":"2024-01-10 13:26:03","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:03","2":"2024-01-10 13:26:03","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:03.212875+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:04.214305+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:04.216315+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:04","2":"2024-01-10 13:26:04","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:04","2":"2024-01-10 13:26:04","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:04.218736+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:05.220731+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:05.222316+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:05","2":"2024-01-10 13:26:05","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:05","2":"2024-01-10 13:26:05","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:05.224306+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:06.226388+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:06.227228+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:06","2":"2024-01-10 13:26:06","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:06","2":"2024-01-10 13:26:06","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:06.228432+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:07.229261+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:07.229630+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:07","2":"2024-01-10 13:26:07","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:07","2":"2024-01-10 13:26:07","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:07.230172+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:07.442657+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:26:07.442773+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:26:07.442822+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:26:07.442863+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:26:07.442902+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:26:07.442940+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:26:07.442986+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:26:07.443024+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:26:07.443841+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Routing\RouteCollection::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Routing\\RouteCollection::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/routing/RouteCollection.php:59)"} []
[2024-01-10T13:26:07.443913+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Routing\RouteCollection::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Routing\\RouteCollection::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/routing/RouteCollection.php:69)"} []
[2024-01-10T13:26:07.455769+00:00] request.INFO: Matched route "newsletters_list". {"route":"newsletters_list","route_parameters":{"_route":"newsletters_list","_controller":"App\\Controller\\NewslettersController::list"},"request_uri":"http://localhost:8001/newsletters/list","method":"GET"} []
[2024-01-10T13:26:07.459404+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:26:07.460413+00:00] doctrine.DEBUG: Executing query: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0"} []
[2024-01-10T13:26:07.463031+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:26:07.463950+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:26:07.466244+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:26:07.466315+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:26:07.466361+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:26:07.466402+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:26:07.466447+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:26:07.466484+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:26:07.467423+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:26:07.468568+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:26:07.468867+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:26:07.470724+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:26:07.470974+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:26:07.472449+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:26:07.472640+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:26:07.474049+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:26:07.474250+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:26:07.475491+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:07.477262+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:26:07.477463+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:26:07.478468+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:26:07.479934+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:26:07.526704+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:26:07.568088+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:26:07.568247+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:26:07.568307+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:26:07.569984+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:26:07.571279+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"703d10"},"request_uri":"http://localhost:8001/_wdt/703d10","method":"GET"} []
[2024-01-10T13:26:07.574166+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:26:07.574281+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:26:07.574370+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:26:07.574439+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:26:07.574513+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:26:07.574601+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:26:07.577020+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:26:07.577162+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:26:07.577276+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:26:07.577369+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:26:08.230632+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:08.231634+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:08","2":"2024-01-10 13:26:08","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:08","2":"2024-01-10 13:26:08","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:08.233199+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:08.497324+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:26:08.497466+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:26:08.497531+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:26:08.497582+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:26:08.498295+00:00] request.INFO: Matched route "newsletters_send". {"route":"newsletters_send","route_parameters":{"_route":"newsletters_send","_controller":"App\\Controller\\NewslettersController::send","id":"1"},"request_uri":"http://localhost:8001/newsletters/send/1","method":"GET"} []
[2024-01-10T13:26:08.502047+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:26:08.502722+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ? (parameters: array{"1":"1"}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ?","params":{"1":"1"},"types":{"1":1}} []
[2024-01-10T13:26:08.505643+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:26:08.506552+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:26:08.508161+00:00] messenger.INFO: Sending message App\Message\SendNewsletterMessage with async sender using Symfony\Component\Messenger\Bridge\Doctrine\Transport\DoctrineTransport {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage","alias":"async","sender":"Symfony\\Component\\Messenger\\Bridge\\Doctrine\\Transport\\DoctrineTransport"} []
[2024-01-10T13:26:08.508392+00:00] doctrine.DEBUG: Executing statement: INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?) (parameters: array{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:1:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"default","4":"2024-01-10 13:26:08","5":"2024-01-10 13:26:08"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?)","params":{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:1:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"default","4":"2024-01-10 13:26:08","5":"2024-01-10 13:26:08"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2024-01-10T13:26:08.514916+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:26:08.514996+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:26:08.515080+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:26:08.515156+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:26:08.515225+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:26:08.515291+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:26:08.516350+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:26:08.516436+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:26:08.516502+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:26:08.516582+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:26:08.516948+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:26:08.517853+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:26:08.518186+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:26:08.519461+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:26:08.519749+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:26:08.521243+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:26:08.521533+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:26:08.522795+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:26:08.523012+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:26:08.524680+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:08.526612+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:26:08.526914+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:26:08.527945+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:26:08.528671+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:26:08.539775+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:26:08.539871+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:26:08.552926+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:26:08.561816+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:26:08.562009+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:26:08.562066+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:26:08.562113+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:26:08.563043+00:00] request.INFO: Matched route "newsletters_list". {"route":"newsletters_list","route_parameters":{"_route":"newsletters_list","_controller":"App\\Controller\\NewslettersController::list"},"request_uri":"http://localhost:8001/newsletters/list","method":"GET"} []
[2024-01-10T13:26:08.569472+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:26:08.574497+00:00] doctrine.DEBUG: Executing query: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0"} []
[2024-01-10T13:26:08.577153+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:26:08.579032+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:26:08.581315+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:26:08.581560+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:26:08.581749+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:26:08.581919+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:26:08.582076+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:26:08.582233+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:26:08.583302+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:26:08.583540+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:26:08.583723+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:26:08.583905+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:26:08.584447+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:26:08.585485+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:26:08.585999+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:26:08.587390+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:26:08.587645+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:26:08.589632+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:26:08.589934+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:26:08.591481+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:26:08.591784+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:26:08.593628+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:08.596221+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:26:08.596461+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:26:08.597606+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:26:08.598818+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:26:08.615073+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:26:08.615196+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:26:08.635655+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:26:08.680162+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:26:08.680456+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:26:08.680617+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:26:08.680754+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:26:08.681980+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"266fd3"},"request_uri":"http://localhost:8001/_wdt/266fd3","method":"GET"} []
[2024-01-10T13:26:08.683788+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:26:08.683888+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:26:08.683966+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:26:08.684047+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:26:08.684123+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:26:08.684198+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:26:08.686889+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:26:08.687154+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:26:08.687387+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:26:08.687590+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:26:09.234347+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:09.235131+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:09","2":"2024-01-10 13:26:09","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:09","2":"2024-01-10 13:26:09","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:09.236512+00:00] doctrine.DEBUG: Executing statement: UPDATE messenger_messages SET delivered_at = ? WHERE id = ? (parameters: array{"1":"2024-01-10 13:26:09","2":7}, types: array{"1":2,"2":2}) {"sql":"UPDATE messenger_messages SET delivered_at = ? WHERE id = ?","params":{"1":"2024-01-10 13:26:09","2":7},"types":{"1":2,"2":2}} []
[2024-01-10T13:26:09.237590+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:09.246857+00:00] messenger.INFO: Received message App\Message\SendNewsletterMessage {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage"} []
[2024-01-10T13:26:09.247238+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:26:09.248627+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ? (parameters: array{"1":1}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ?","params":{"1":1},"types":{"1":1}} []
[2024-01-10T13:26:12.302704+00:00] messenger.INFO: Message Symfony\Component\Mailer\Messenger\SendEmailMessage handled by Symfony\Component\Mailer\Messenger\MessageHandler::__invoke {"message":{"Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage":[]},"class":"Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage","handler":"Symfony\\Component\\Mailer\\Messenger\\MessageHandler::__invoke"} []
[2024-01-10T13:26:12.303295+00:00] messenger.INFO: Message App\Message\SendNewsletterMessage handled by App\MessageHandler\SendNewsletterMessageHandler::__invoke {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage","handler":"App\\MessageHandler\\SendNewsletterMessageHandler::__invoke"} []
[2024-01-10T13:26:12.304002+00:00] messenger.INFO: App\Message\SendNewsletterMessage was handled successfully (acknowledging to transport). {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage"} []
[2024-01-10T13:26:12.304342+00:00] doctrine.DEBUG: Executing statement: DELETE FROM messenger_messages WHERE id = ? (parameters: array{"1":"7"}, types: array{"1":2}) {"sql":"DELETE FROM messenger_messages WHERE id = ?","params":{"1":"7"},"types":{"1":2}} []
[2024-01-10T13:26:12.313069+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:12.319205+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:12","2":"2024-01-10 13:26:12","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:12","2":"2024-01-10 13:26:12","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:12.322705+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:13.326529+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:13.328044+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:13","2":"2024-01-10 13:26:13","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:13","2":"2024-01-10 13:26:13","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:13.330509+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:14.332608+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:14.333890+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:14","2":"2024-01-10 13:26:14","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:14","2":"2024-01-10 13:26:14","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:14.336056+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:15.337572+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:15.338676+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:15","2":"2024-01-10 13:26:15","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:15","2":"2024-01-10 13:26:15","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:15.340754+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:16.341864+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:16.342964+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:16","2":"2024-01-10 13:26:16","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:16","2":"2024-01-10 13:26:16","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:16.344529+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:17.345533+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:17.346262+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:17","2":"2024-01-10 13:26:17","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:17","2":"2024-01-10 13:26:17","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:17.347341+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:18.348633+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:18.349829+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:18","2":"2024-01-10 13:26:18","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:18","2":"2024-01-10 13:26:18","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:18.351618+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:19.353017+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:19.354356+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:19","2":"2024-01-10 13:26:19","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:19","2":"2024-01-10 13:26:19","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:19.356478+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:19.902808+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:26:19.903068+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:26:19.903155+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:26:19.903227+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:26:19.904831+00:00] request.INFO: Matched route "newsletters_send". {"route":"newsletters_send","route_parameters":{"_route":"newsletters_send","_controller":"App\\Controller\\NewslettersController::send","id":"1"},"request_uri":"http://localhost:8001/newsletters/send/1","method":"GET"} []
[2024-01-10T13:26:19.915360+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:26:19.916293+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ? (parameters: array{"1":"1"}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ?","params":{"1":"1"},"types":{"1":1}} []
[2024-01-10T13:26:19.920183+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:26:19.921349+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:26:19.924131+00:00] messenger.INFO: Sending message App\Message\SendNewsletterMessage with async sender using Symfony\Component\Messenger\Bridge\Doctrine\Transport\DoctrineTransport {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage","alias":"async","sender":"Symfony\\Component\\Messenger\\Bridge\\Doctrine\\Transport\\DoctrineTransport"} []
[2024-01-10T13:26:19.924333+00:00] doctrine.DEBUG: Executing statement: INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?) (parameters: array{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:1:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"default","4":"2024-01-10 13:26:19","5":"2024-01-10 13:26:19"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?)","params":{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:1:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"default","4":"2024-01-10 13:26:19","5":"2024-01-10 13:26:19"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2024-01-10T13:26:19.929569+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:26:19.929655+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:26:19.929725+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:26:19.929796+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:26:19.929891+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:26:19.929988+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:26:19.931682+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:26:19.931762+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:26:19.931886+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:26:19.931947+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:26:19.932338+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:26:19.933452+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:26:19.933750+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:26:19.935137+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:26:19.935406+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:26:19.936582+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:26:19.936860+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:26:19.937874+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:26:19.938152+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:26:19.939376+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:19.941390+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:26:19.941647+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:26:19.943135+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:26:19.943874+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:26:19.954594+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:26:19.954675+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:26:19.969641+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:26:19.972458+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:26:19.972563+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:26:19.972601+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:26:19.972629+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:26:19.973014+00:00] request.INFO: Matched route "newsletters_list". {"route":"newsletters_list","route_parameters":{"_route":"newsletters_list","_controller":"App\\Controller\\NewslettersController::list"},"request_uri":"http://localhost:8001/newsletters/list","method":"GET"} []
[2024-01-10T13:26:19.974949+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:26:19.975631+00:00] doctrine.DEBUG: Executing query: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0"} []
[2024-01-10T13:26:19.977722+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:26:19.978589+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:26:19.979990+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:26:19.980079+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:26:19.980147+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:26:19.980216+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:26:19.980283+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:26:19.980371+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:26:19.980918+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:26:19.980993+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:26:19.981066+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:26:19.981127+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:26:19.981443+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:26:19.981828+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:26:19.982065+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:26:19.983332+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:26:19.983593+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:26:19.985194+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:26:19.985447+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:26:19.986857+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:26:19.987034+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:26:19.988642+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:19.990331+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:26:19.990548+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:26:19.992074+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:26:19.993183+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:26:20.007537+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:26:20.007649+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:26:20.028287+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:26:20.049078+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:26:20.049237+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:26:20.049298+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:26:20.049349+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:26:20.050190+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"7df937"},"request_uri":"http://localhost:8001/_wdt/7df937","method":"GET"} []
[2024-01-10T13:26:20.051936+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:26:20.052063+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:26:20.052166+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:26:20.052239+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:26:20.052312+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:26:20.052401+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:26:20.054343+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:26:20.054452+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:26:20.054544+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:26:20.054604+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:26:20.358051+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:20.359240+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:20","2":"2024-01-10 13:26:20","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:20","2":"2024-01-10 13:26:20","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:20.361504+00:00] doctrine.DEBUG: Executing statement: UPDATE messenger_messages SET delivered_at = ? WHERE id = ? (parameters: array{"1":"2024-01-10 13:26:20","2":8}, types: array{"1":2,"2":2}) {"sql":"UPDATE messenger_messages SET delivered_at = ? WHERE id = ?","params":{"1":"2024-01-10 13:26:20","2":8},"types":{"1":2,"2":2}} []
[2024-01-10T13:26:20.363149+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:20.371336+00:00] messenger.INFO: Received message App\Message\SendNewsletterMessage {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage"} []
[2024-01-10T13:26:20.372248+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:26:20.374360+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ? (parameters: array{"1":1}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ?","params":{"1":1},"types":{"1":1}} []
[2024-01-10T13:26:23.433370+00:00] messenger.INFO: Message Symfony\Component\Mailer\Messenger\SendEmailMessage handled by Symfony\Component\Mailer\Messenger\MessageHandler::__invoke {"message":{"Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage":[]},"class":"Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage","handler":"Symfony\\Component\\Mailer\\Messenger\\MessageHandler::__invoke"} []
[2024-01-10T13:26:23.434430+00:00] messenger.INFO: Message App\Message\SendNewsletterMessage handled by App\MessageHandler\SendNewsletterMessageHandler::__invoke {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage","handler":"App\\MessageHandler\\SendNewsletterMessageHandler::__invoke"} []
[2024-01-10T13:26:23.436497+00:00] messenger.INFO: App\Message\SendNewsletterMessage was handled successfully (acknowledging to transport). {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage"} []
[2024-01-10T13:26:23.437220+00:00] doctrine.DEBUG: Executing statement: DELETE FROM messenger_messages WHERE id = ? (parameters: array{"1":"8"}, types: array{"1":2}) {"sql":"DELETE FROM messenger_messages WHERE id = ?","params":{"1":"8"},"types":{"1":2}} []
[2024-01-10T13:26:23.446619+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:23.447826+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:23","2":"2024-01-10 13:26:23","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:23","2":"2024-01-10 13:26:23","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:23.451395+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:24.452812+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:24.454104+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:24","2":"2024-01-10 13:26:24","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:24","2":"2024-01-10 13:26:24","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:24.455960+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:25.457107+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:25.457604+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:25","2":"2024-01-10 13:26:25","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:25","2":"2024-01-10 13:26:25","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:25.458457+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:26.459226+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:26.460435+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:26","2":"2024-01-10 13:26:26","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:26","2":"2024-01-10 13:26:26","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:26.462290+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:27.463607+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:27.464485+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:27","2":"2024-01-10 13:26:27","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:27","2":"2024-01-10 13:26:27","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:27.465839+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:28.466935+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:28.468240+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:28","2":"2024-01-10 13:26:28","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:28","2":"2024-01-10 13:26:28","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:28.470318+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:29.471446+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:29.471796+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:29","2":"2024-01-10 13:26:29","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:29","2":"2024-01-10 13:26:29","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:29.472316+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:30.472791+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:30.473187+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:30","2":"2024-01-10 13:26:30","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:30","2":"2024-01-10 13:26:30","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:30.473836+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:31.474499+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:31.475618+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:31","2":"2024-01-10 13:26:31","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:31","2":"2024-01-10 13:26:31","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:31.477374+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:32.479112+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:32.480433+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:32","2":"2024-01-10 13:26:32","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:32","2":"2024-01-10 13:26:32","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:32.482399+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:33.483823+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:33.484275+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:33","2":"2024-01-10 13:26:33","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:33","2":"2024-01-10 13:26:33","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:33.485044+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:34.485695+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:34.487114+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:34","2":"2024-01-10 13:26:34","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:34","2":"2024-01-10 13:26:34","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:34.489182+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:35.490670+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:35.491104+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:35","2":"2024-01-10 13:26:35","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:35","2":"2024-01-10 13:26:35","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:35.491636+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:36.492105+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:36.493568+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:36","2":"2024-01-10 13:26:36","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:36","2":"2024-01-10 13:26:36","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:36.495509+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:37.496885+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:37.497962+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:37","2":"2024-01-10 13:26:37","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:37","2":"2024-01-10 13:26:37","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:37.499407+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:38.500627+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:38.501749+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:38","2":"2024-01-10 13:26:38","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:38","2":"2024-01-10 13:26:38","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:38.503290+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:39.504522+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:39.505355+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:39","2":"2024-01-10 13:26:39","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:39","2":"2024-01-10 13:26:39","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:39.506704+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:40.508288+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:40.509611+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:40","2":"2024-01-10 13:26:40","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:40","2":"2024-01-10 13:26:40","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:40.510965+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:41.511938+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:41.512762+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:41","2":"2024-01-10 13:26:41","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:41","2":"2024-01-10 13:26:41","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:41.513896+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:42.514790+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:42.515879+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:42","2":"2024-01-10 13:26:42","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:42","2":"2024-01-10 13:26:42","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:42.517895+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:43.519524+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:43.520779+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:43","2":"2024-01-10 13:26:43","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:43","2":"2024-01-10 13:26:43","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:43.522586+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:44.524039+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:44.525103+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:44","2":"2024-01-10 13:26:44","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:44","2":"2024-01-10 13:26:44","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:44.526690+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:45.527997+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:45.528977+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:45","2":"2024-01-10 13:26:45","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:45","2":"2024-01-10 13:26:45","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:45.530259+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:46.531313+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:46.531663+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:46","2":"2024-01-10 13:26:46","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:46","2":"2024-01-10 13:26:46","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:46.532204+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:47.532713+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:47.533743+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:47","2":"2024-01-10 13:26:47","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:47","2":"2024-01-10 13:26:47","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:47.535349+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:48.536604+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:48.536924+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:48","2":"2024-01-10 13:26:48","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:48","2":"2024-01-10 13:26:48","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:48.537361+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:49.537846+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:49.538618+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:49","2":"2024-01-10 13:26:49","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:49","2":"2024-01-10 13:26:49","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:49.539859+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:50.540944+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:50.542009+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:50","2":"2024-01-10 13:26:50","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:50","2":"2024-01-10 13:26:50","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:50.543520+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:51.544846+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:51.547209+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:51","2":"2024-01-10 13:26:51","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:51","2":"2024-01-10 13:26:51","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:51.550141+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:52.551913+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:52.552982+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:52","2":"2024-01-10 13:26:52","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:52","2":"2024-01-10 13:26:52","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:52.554489+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:53.555784+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:53.556882+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:53","2":"2024-01-10 13:26:53","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:53","2":"2024-01-10 13:26:53","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:53.558414+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:54.559807+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:54.561253+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:54","2":"2024-01-10 13:26:54","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:54","2":"2024-01-10 13:26:54","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:54.563446+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:55.565351+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:55.567006+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:55","2":"2024-01-10 13:26:55","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:55","2":"2024-01-10 13:26:55","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:55.569319+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:56.570778+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:56.571916+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:56","2":"2024-01-10 13:26:56","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:56","2":"2024-01-10 13:26:56","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:56.573393+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:57.574584+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:57.576203+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:57","2":"2024-01-10 13:26:57","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:57","2":"2024-01-10 13:26:57","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:57.578448+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:58.580852+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:58.582138+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:58","2":"2024-01-10 13:26:58","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:58","2":"2024-01-10 13:26:58","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:58.583645+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:26:59.584764+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:26:59.585126+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:26:59","2":"2024-01-10 13:26:59","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:26:59","2":"2024-01-10 13:26:59","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:26:59.585714+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:00.586286+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:00.587313+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:00","2":"2024-01-10 13:27:00","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:00","2":"2024-01-10 13:27:00","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:00.588981+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:01.590252+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:01.591174+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:01","2":"2024-01-10 13:27:01","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:01","2":"2024-01-10 13:27:01","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:01.592675+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:02.593896+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:02.595592+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:02","2":"2024-01-10 13:27:02","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:02","2":"2024-01-10 13:27:02","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:02.597989+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:03.599971+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:03.601041+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:03","2":"2024-01-10 13:27:03","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:03","2":"2024-01-10 13:27:03","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:03.602620+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:04.603949+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:04.605282+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:04","2":"2024-01-10 13:27:04","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:04","2":"2024-01-10 13:27:04","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:04.607213+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:05.608649+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:05.609619+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:05","2":"2024-01-10 13:27:05","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:05","2":"2024-01-10 13:27:05","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:05.611200+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:06.612504+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:06.613651+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:06","2":"2024-01-10 13:27:06","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:06","2":"2024-01-10 13:27:06","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:06.615336+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:07.617034+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:07.618456+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:07","2":"2024-01-10 13:27:07","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:07","2":"2024-01-10 13:27:07","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:07.620903+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:08.622746+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:08.623603+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:08","2":"2024-01-10 13:27:08","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:08","2":"2024-01-10 13:27:08","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:08.624898+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:09.625941+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:09.627009+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:09","2":"2024-01-10 13:27:09","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:09","2":"2024-01-10 13:27:09","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:09.628626+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:10.629783+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:10.630317+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:10","2":"2024-01-10 13:27:10","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:10","2":"2024-01-10 13:27:10","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:10.631181+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:11.632008+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:11.633272+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:11","2":"2024-01-10 13:27:11","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:11","2":"2024-01-10 13:27:11","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:11.635019+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:12.636516+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:12.637766+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:12","2":"2024-01-10 13:27:12","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:12","2":"2024-01-10 13:27:12","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:12.639718+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:13.641172+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:13.642022+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:13","2":"2024-01-10 13:27:13","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:13","2":"2024-01-10 13:27:13","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:13.643238+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:14.644197+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:14.645319+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:14","2":"2024-01-10 13:27:14","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:14","2":"2024-01-10 13:27:14","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:14.647393+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:15.648872+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:15.650368+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:15","2":"2024-01-10 13:27:15","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:15","2":"2024-01-10 13:27:15","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:15.653300+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:16.654785+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:16.655641+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:16","2":"2024-01-10 13:27:16","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:16","2":"2024-01-10 13:27:16","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:16.656991+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:17.658106+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:17.658730+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:17","2":"2024-01-10 13:27:17","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:17","2":"2024-01-10 13:27:17","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:17.659726+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:18.660668+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:18.661878+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:18","2":"2024-01-10 13:27:18","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:18","2":"2024-01-10 13:27:18","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:18.663774+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:19.665265+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:19.666335+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:19","2":"2024-01-10 13:27:19","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:19","2":"2024-01-10 13:27:19","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:19.667959+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:20.669486+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:20.670089+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:20","2":"2024-01-10 13:27:20","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:20","2":"2024-01-10 13:27:20","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:20.671288+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:21.672259+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:21.672733+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:21","2":"2024-01-10 13:27:21","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:21","2":"2024-01-10 13:27:21","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:21.673194+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:22.673647+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:22.674284+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:22","2":"2024-01-10 13:27:22","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:22","2":"2024-01-10 13:27:22","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:22.675309+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:23.676323+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:23.677571+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:23","2":"2024-01-10 13:27:23","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:23","2":"2024-01-10 13:27:23","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:23.679320+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:24.680391+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:24.680784+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:24","2":"2024-01-10 13:27:24","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:24","2":"2024-01-10 13:27:24","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:24.681436+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:25.682030+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:25.682927+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:25","2":"2024-01-10 13:27:25","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:25","2":"2024-01-10 13:27:25","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:25.684312+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:26.685518+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:26.686393+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:26","2":"2024-01-10 13:27:26","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:26","2":"2024-01-10 13:27:26","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:26.687622+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:27.688662+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:27.690345+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:27","2":"2024-01-10 13:27:27","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:27","2":"2024-01-10 13:27:27","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:27.692597+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:28.694278+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:28.694648+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:28","2":"2024-01-10 13:27:28","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:28","2":"2024-01-10 13:27:28","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:28.695098+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:29.695710+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:29.695992+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:29","2":"2024-01-10 13:27:29","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:29","2":"2024-01-10 13:27:29","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:29.696544+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:30.697118+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:30.699722+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:30","2":"2024-01-10 13:27:30","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:30","2":"2024-01-10 13:27:30","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:30.703039+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:31.704944+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:31.705563+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:31","2":"2024-01-10 13:27:31","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:31","2":"2024-01-10 13:27:31","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:31.706221+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:32.706739+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:32.707198+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:32","2":"2024-01-10 13:27:32","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:32","2":"2024-01-10 13:27:32","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:32.707841+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:33.708424+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:33.709490+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:33","2":"2024-01-10 13:27:33","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:33","2":"2024-01-10 13:27:33","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:33.710951+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:34.712094+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:34.712456+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:34","2":"2024-01-10 13:27:34","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:34","2":"2024-01-10 13:27:34","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:34.712919+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:35.713471+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:35.714700+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:35","2":"2024-01-10 13:27:35","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:35","2":"2024-01-10 13:27:35","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:35.716646+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:36.718089+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:36.720251+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:36","2":"2024-01-10 13:27:36","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:36","2":"2024-01-10 13:27:36","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:36.722235+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:37.723686+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:37.724808+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:37","2":"2024-01-10 13:27:37","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:37","2":"2024-01-10 13:27:37","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:37.726445+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:38.727648+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:38.728659+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:38","2":"2024-01-10 13:27:38","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:38","2":"2024-01-10 13:27:38","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:38.730274+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:39.731729+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:39.733191+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:39","2":"2024-01-10 13:27:39","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:39","2":"2024-01-10 13:27:39","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:39.734955+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:40.736314+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:40.737826+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:40","2":"2024-01-10 13:27:40","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:40","2":"2024-01-10 13:27:40","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:40.739671+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:41.741001+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:41.741354+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:41","2":"2024-01-10 13:27:41","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:41","2":"2024-01-10 13:27:41","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:41.741822+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:42.742206+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:42.742921+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:42","2":"2024-01-10 13:27:42","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:42","2":"2024-01-10 13:27:42","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:42.743791+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:43.744591+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:43.746469+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:43","2":"2024-01-10 13:27:43","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:43","2":"2024-01-10 13:27:43","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:43.749050+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:44.751339+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:44.752761+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:44","2":"2024-01-10 13:27:44","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:44","2":"2024-01-10 13:27:44","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:44.754709+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:45.756256+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:45.756624+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:45","2":"2024-01-10 13:27:45","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:45","2":"2024-01-10 13:27:45","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:45.758429+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:46.759015+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:46.759883+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:46","2":"2024-01-10 13:27:46","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:46","2":"2024-01-10 13:27:46","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:46.761340+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:47.762381+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:47.763997+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:47","2":"2024-01-10 13:27:47","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:47","2":"2024-01-10 13:27:47","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:47.766236+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:48.768254+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:48.768865+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:48","2":"2024-01-10 13:27:48","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:48","2":"2024-01-10 13:27:48","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:48.769486+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:49.770049+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:49.770581+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:49","2":"2024-01-10 13:27:49","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:49","2":"2024-01-10 13:27:49","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:49.771439+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:50.772104+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:50.773185+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:50","2":"2024-01-10 13:27:50","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:50","2":"2024-01-10 13:27:50","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:50.774583+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:51.776473+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:51.778025+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:51","2":"2024-01-10 13:27:51","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:51","2":"2024-01-10 13:27:51","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:51.779217+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:52.780121+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:52.780804+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:52","2":"2024-01-10 13:27:52","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:52","2":"2024-01-10 13:27:52","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:52.781823+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:53.782862+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:53.784429+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:53","2":"2024-01-10 13:27:53","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:53","2":"2024-01-10 13:27:53","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:53.786878+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:54.788679+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:54.790098+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:54","2":"2024-01-10 13:27:54","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:54","2":"2024-01-10 13:27:54","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:54.792117+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:55.794181+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:55.795724+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:55","2":"2024-01-10 13:27:55","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:55","2":"2024-01-10 13:27:55","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:55.797631+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:56.798961+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:56.800345+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:56","2":"2024-01-10 13:27:56","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:56","2":"2024-01-10 13:27:56","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:56.802880+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:57.804648+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:57.805653+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:57","2":"2024-01-10 13:27:57","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:57","2":"2024-01-10 13:27:57","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:57.807406+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:58.808960+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:58.810277+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:58","2":"2024-01-10 13:27:58","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:58","2":"2024-01-10 13:27:58","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:58.811435+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:27:59.812388+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:27:59.813156+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:27:59","2":"2024-01-10 13:27:59","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:27:59","2":"2024-01-10 13:27:59","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:27:59.814415+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:00.815436+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:00.816655+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:00","2":"2024-01-10 13:28:00","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:00","2":"2024-01-10 13:28:00","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:00.818344+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:01.819807+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:01.820788+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:01","2":"2024-01-10 13:28:01","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:01","2":"2024-01-10 13:28:01","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:01.822380+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:02.823646+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:02.824836+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:02","2":"2024-01-10 13:28:02","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:02","2":"2024-01-10 13:28:02","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:02.826722+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:03.828266+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:03.829168+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:03","2":"2024-01-10 13:28:03","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:03","2":"2024-01-10 13:28:03","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:03.830473+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:04.831376+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:04.832056+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:04","2":"2024-01-10 13:28:04","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:04","2":"2024-01-10 13:28:04","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:04.833384+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:05.834226+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:05.835515+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:05","2":"2024-01-10 13:28:05","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:05","2":"2024-01-10 13:28:05","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:05.837189+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:06.838214+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:06.838597+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:06","2":"2024-01-10 13:28:06","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:06","2":"2024-01-10 13:28:06","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:06.839317+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:07.839954+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:07.840957+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:07","2":"2024-01-10 13:28:07","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:07","2":"2024-01-10 13:28:07","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:07.842461+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:08.843366+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:08.844557+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:08","2":"2024-01-10 13:28:08","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:08","2":"2024-01-10 13:28:08","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:08.846247+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:09.847526+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:09.849075+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:09","2":"2024-01-10 13:28:09","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:09","2":"2024-01-10 13:28:09","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:09.852270+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:10.854722+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:10.855045+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:10","2":"2024-01-10 13:28:10","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:10","2":"2024-01-10 13:28:10","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:10.855455+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:11.855956+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:11.857843+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:11","2":"2024-01-10 13:28:11","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:11","2":"2024-01-10 13:28:11","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:11.860089+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:12.861534+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:12.863002+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:12","2":"2024-01-10 13:28:12","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:12","2":"2024-01-10 13:28:12","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:12.865626+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:13.867490+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:13.869235+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:13","2":"2024-01-10 13:28:13","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:13","2":"2024-01-10 13:28:13","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:13.871789+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:14.873576+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:14.875196+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:14","2":"2024-01-10 13:28:14","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:14","2":"2024-01-10 13:28:14","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:14.878482+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:15.881501+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:15.882581+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:15","2":"2024-01-10 13:28:15","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:15","2":"2024-01-10 13:28:15","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:15.884199+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:16.885723+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:16.886653+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:16","2":"2024-01-10 13:28:16","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:16","2":"2024-01-10 13:28:16","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:16.888018+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:17.889260+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:17.890263+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:17","2":"2024-01-10 13:28:17","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:17","2":"2024-01-10 13:28:17","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:17.891915+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:18.893273+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:18.894385+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:18","2":"2024-01-10 13:28:18","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:18","2":"2024-01-10 13:28:18","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:18.896226+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:19.897671+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:19.899090+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:19","2":"2024-01-10 13:28:19","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:19","2":"2024-01-10 13:28:19","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:19.901064+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:20.902606+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:20.903877+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:20","2":"2024-01-10 13:28:20","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:20","2":"2024-01-10 13:28:20","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:20.905887+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:21.907225+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:21.908212+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:21","2":"2024-01-10 13:28:21","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:21","2":"2024-01-10 13:28:21","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:21.909828+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:22.911043+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:22.911848+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:22","2":"2024-01-10 13:28:22","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:22","2":"2024-01-10 13:28:22","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:22.913112+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:23.914069+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:23.914975+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:23","2":"2024-01-10 13:28:23","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:23","2":"2024-01-10 13:28:23","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:23.916620+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:24.917754+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:24.918778+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:24","2":"2024-01-10 13:28:24","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:24","2":"2024-01-10 13:28:24","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:24.920424+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:25.921687+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:25.922626+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:25","2":"2024-01-10 13:28:25","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:25","2":"2024-01-10 13:28:25","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:25.924084+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:26.925240+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:26.926890+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:26","2":"2024-01-10 13:28:26","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:26","2":"2024-01-10 13:28:26","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:26.929404+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:27.932578+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:27.934039+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:27","2":"2024-01-10 13:28:27","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:27","2":"2024-01-10 13:28:27","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:27.936296+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:28.938002+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:28.939035+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:28","2":"2024-01-10 13:28:28","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:28","2":"2024-01-10 13:28:28","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:28.940529+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:29.941561+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:29.941964+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:29","2":"2024-01-10 13:28:29","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:29","2":"2024-01-10 13:28:29","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:29.942527+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:30.943024+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:30.943994+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:30","2":"2024-01-10 13:28:30","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:30","2":"2024-01-10 13:28:30","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:30.945430+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:31.946677+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:31.948003+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:31","2":"2024-01-10 13:28:31","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:31","2":"2024-01-10 13:28:31","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:31.949975+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:32.951684+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:32.953266+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:32","2":"2024-01-10 13:28:32","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:32","2":"2024-01-10 13:28:32","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:32.955919+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:33.957718+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:33.959026+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:33","2":"2024-01-10 13:28:33","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:33","2":"2024-01-10 13:28:33","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:33.961039+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:34.962697+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:34.963091+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:34","2":"2024-01-10 13:28:34","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:34","2":"2024-01-10 13:28:34","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:34.963587+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:35.964033+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:35.965320+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:35","2":"2024-01-10 13:28:35","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:35","2":"2024-01-10 13:28:35","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:35.967027+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:36.968355+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:36.969228+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:36","2":"2024-01-10 13:28:36","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:36","2":"2024-01-10 13:28:36","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:36.969893+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:37.970462+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:37.971471+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:37","2":"2024-01-10 13:28:37","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:37","2":"2024-01-10 13:28:37","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:37.972985+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:38.974062+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:38.975201+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:38","2":"2024-01-10 13:28:38","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:38","2":"2024-01-10 13:28:38","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:38.976853+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:39.978102+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:39.978978+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:39","2":"2024-01-10 13:28:39","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:39","2":"2024-01-10 13:28:39","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:39.980532+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:40.981888+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:40.982932+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:40","2":"2024-01-10 13:28:40","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:40","2":"2024-01-10 13:28:40","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:40.984520+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:41.986401+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:41.987593+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:41","2":"2024-01-10 13:28:41","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:41","2":"2024-01-10 13:28:41","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:41.989489+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:42.990819+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:42.991897+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:42","2":"2024-01-10 13:28:42","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:42","2":"2024-01-10 13:28:42","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:42.993343+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:43.994362+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:43.995275+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:43","2":"2024-01-10 13:28:43","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:43","2":"2024-01-10 13:28:43","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:43.996582+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:44.997615+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:44.999298+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:44","2":"2024-01-10 13:28:44","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:44","2":"2024-01-10 13:28:44","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:45.001315+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:46.002643+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:46.002997+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:46","2":"2024-01-10 13:28:46","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:46","2":"2024-01-10 13:28:46","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:46.003509+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:47.003833+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:47.004167+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:47","2":"2024-01-10 13:28:47","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:47","2":"2024-01-10 13:28:47","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:47.004708+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:48.005078+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:48.005625+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:48","2":"2024-01-10 13:28:48","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:48","2":"2024-01-10 13:28:48","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:48.006305+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:49.006939+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:49.008254+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:49","2":"2024-01-10 13:28:49","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:49","2":"2024-01-10 13:28:49","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:49.010800+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:50.012922+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:50.014011+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:50","2":"2024-01-10 13:28:50","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:50","2":"2024-01-10 13:28:50","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:50.015562+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:51.016914+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:51.018380+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:51","2":"2024-01-10 13:28:51","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:51","2":"2024-01-10 13:28:51","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:51.020304+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:52.021738+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:52.023166+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:52","2":"2024-01-10 13:28:52","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:52","2":"2024-01-10 13:28:52","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:52.025261+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:53.027068+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:53.028635+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:53","2":"2024-01-10 13:28:53","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:53","2":"2024-01-10 13:28:53","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:53.030147+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:54.031331+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:54.032262+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:54","2":"2024-01-10 13:28:54","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:54","2":"2024-01-10 13:28:54","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:54.033945+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:55.035120+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:55.036168+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:55","2":"2024-01-10 13:28:55","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:55","2":"2024-01-10 13:28:55","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:55.037802+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:56.038950+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:56.039995+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:56","2":"2024-01-10 13:28:56","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:56","2":"2024-01-10 13:28:56","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:56.041696+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:57.043411+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:57.045478+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:57","2":"2024-01-10 13:28:57","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:57","2":"2024-01-10 13:28:57","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:57.047318+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:58.048618+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:58.049507+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:58","2":"2024-01-10 13:28:58","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:58","2":"2024-01-10 13:28:58","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:58.050906+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:28:59.052224+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:28:59.053303+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:28:59","2":"2024-01-10 13:28:59","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:28:59","2":"2024-01-10 13:28:59","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:28:59.054908+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:00.056042+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:00.056407+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:00","2":"2024-01-10 13:29:00","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:00","2":"2024-01-10 13:29:00","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:00.056853+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:01.057363+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:01.058838+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:01","2":"2024-01-10 13:29:01","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:01","2":"2024-01-10 13:29:01","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:01.062014+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:02.064350+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:02.066068+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:02","2":"2024-01-10 13:29:02","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:02","2":"2024-01-10 13:29:02","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:02.068606+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:03.070191+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:03.071320+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:03","2":"2024-01-10 13:29:03","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:03","2":"2024-01-10 13:29:03","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:03.073057+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:04.074301+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:04.075784+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:04","2":"2024-01-10 13:29:04","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:04","2":"2024-01-10 13:29:04","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:04.078334+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:05.079957+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:05.080308+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:05","2":"2024-01-10 13:29:05","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:05","2":"2024-01-10 13:29:05","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:05.080856+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:06.081257+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:06.081974+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:06","2":"2024-01-10 13:29:06","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:06","2":"2024-01-10 13:29:06","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:06.082725+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:07.083474+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:07.084844+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:07","2":"2024-01-10 13:29:07","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:07","2":"2024-01-10 13:29:07","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:07.086811+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:08.088237+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:08.088593+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:08","2":"2024-01-10 13:29:08","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:08","2":"2024-01-10 13:29:08","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:08.089139+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:09.089691+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:09.090640+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:09","2":"2024-01-10 13:29:09","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:09","2":"2024-01-10 13:29:09","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:09.092239+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:10.093312+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:10.093625+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:10","2":"2024-01-10 13:29:10","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:10","2":"2024-01-10 13:29:10","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:10.094091+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:11.094631+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:11.096196+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:11","2":"2024-01-10 13:29:11","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:11","2":"2024-01-10 13:29:11","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:11.098595+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:12.100732+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:12.101619+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:12","2":"2024-01-10 13:29:12","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:12","2":"2024-01-10 13:29:12","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:12.103109+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:13.104417+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:13.106464+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:13","2":"2024-01-10 13:29:13","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:13","2":"2024-01-10 13:29:13","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:13.108698+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:14.110822+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:14.114130+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:14","2":"2024-01-10 13:29:14","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:14","2":"2024-01-10 13:29:14","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:14.118409+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:15.121623+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:15.122743+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:15","2":"2024-01-10 13:29:15","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:15","2":"2024-01-10 13:29:15","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:15.124430+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:16.125647+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:16.126364+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:16","2":"2024-01-10 13:29:16","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:16","2":"2024-01-10 13:29:16","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:16.127485+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:17.128300+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:17.129827+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:17","2":"2024-01-10 13:29:17","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:17","2":"2024-01-10 13:29:17","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:17.132209+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:18.133933+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:18.134847+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:18","2":"2024-01-10 13:29:18","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:18","2":"2024-01-10 13:29:18","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:18.136513+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:19.137787+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:19.138995+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:19","2":"2024-01-10 13:29:19","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:19","2":"2024-01-10 13:29:19","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:19.141250+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:20.142717+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:20.143932+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:20","2":"2024-01-10 13:29:20","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:20","2":"2024-01-10 13:29:20","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:20.145911+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:21.147597+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:21.149034+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:21","2":"2024-01-10 13:29:21","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:21","2":"2024-01-10 13:29:21","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:21.151180+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:22.152722+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:22.154308+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:22","2":"2024-01-10 13:29:22","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:22","2":"2024-01-10 13:29:22","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:22.156269+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:23.157700+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:23.158249+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:23","2":"2024-01-10 13:29:23","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:23","2":"2024-01-10 13:29:23","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:23.158863+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:24.159634+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:24.160771+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:24","2":"2024-01-10 13:29:24","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:24","2":"2024-01-10 13:29:24","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:24.162943+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:25.164770+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:25.166129+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:25","2":"2024-01-10 13:29:25","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:25","2":"2024-01-10 13:29:25","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:25.167486+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:26.168490+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:26.169319+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:26","2":"2024-01-10 13:29:26","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:26","2":"2024-01-10 13:29:26","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:26.170506+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:27.171691+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:27.172917+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:27","2":"2024-01-10 13:29:27","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:27","2":"2024-01-10 13:29:27","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:27.175307+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:28.176783+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:28.178568+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:28","2":"2024-01-10 13:29:28","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:28","2":"2024-01-10 13:29:28","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:28.180134+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:29.181417+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:29.182748+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:29","2":"2024-01-10 13:29:29","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:29","2":"2024-01-10 13:29:29","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:29.184787+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:30.186631+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:30.187948+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:30","2":"2024-01-10 13:29:30","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:30","2":"2024-01-10 13:29:30","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:30.189838+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:31.191219+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:31.191690+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:31","2":"2024-01-10 13:29:31","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:31","2":"2024-01-10 13:29:31","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:31.192283+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:32.192859+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:32.193770+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:32","2":"2024-01-10 13:29:32","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:32","2":"2024-01-10 13:29:32","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:32.195171+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:33.196469+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:33.197793+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:33","2":"2024-01-10 13:29:33","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:33","2":"2024-01-10 13:29:33","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:33.200113+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:34.201528+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:34.203066+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:34","2":"2024-01-10 13:29:34","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:34","2":"2024-01-10 13:29:34","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:34.205540+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:35.207183+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:35.207610+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:35","2":"2024-01-10 13:29:35","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:35","2":"2024-01-10 13:29:35","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:35.208225+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:36.208819+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:36.210925+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:36","2":"2024-01-10 13:29:36","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:36","2":"2024-01-10 13:29:36","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:36.215026+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:37.218267+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:37.219791+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:37","2":"2024-01-10 13:29:37","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:37","2":"2024-01-10 13:29:37","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:37.222319+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:37.835550+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:29:37.836416+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:29:37.836746+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:29:37.836948+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:29:37.840076+00:00] request.INFO: Matched route "newsletters_send". {"route":"newsletters_send","route_parameters":{"_route":"newsletters_send","_controller":"App\\Controller\\NewslettersController::send","id":"1"},"request_uri":"http://localhost:8001/newsletters/send/1","method":"GET"} []
[2024-01-10T13:29:37.856178+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:29:37.858201+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ? (parameters: array{"1":"1"}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ?","params":{"1":"1"},"types":{"1":1}} []
[2024-01-10T13:29:37.863058+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:29:37.864544+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:29:37.867008+00:00] messenger.INFO: Sending message App\Message\SendNewsletterMessage with async sender using Symfony\Component\Messenger\Bridge\Doctrine\Transport\DoctrineTransport {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage","alias":"async","sender":"Symfony\\Component\\Messenger\\Bridge\\Doctrine\\Transport\\DoctrineTransport"} []
[2024-01-10T13:29:37.867428+00:00] doctrine.DEBUG: Executing statement: INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?) (parameters: array{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:1:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"default","4":"2024-01-10 13:29:37","5":"2024-01-10 13:29:37"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?)","params":{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:1:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"default","4":"2024-01-10 13:29:37","5":"2024-01-10 13:29:37"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2024-01-10T13:29:37.876283+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:29:37.876578+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:29:37.876904+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:29:37.877077+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:29:37.877236+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:29:37.877400+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:29:37.879489+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:29:37.879654+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:29:37.879853+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:29:37.879948+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:29:37.880726+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:29:37.882235+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:29:37.882765+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:29:37.885304+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:29:37.885691+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:29:37.887773+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:29:37.888131+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:29:37.890123+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:29:37.890728+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:29:37.894937+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:37.901597+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:29:37.902241+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:29:37.904324+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:29:37.905695+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:29:37.924341+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:29:37.924467+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:29:37.941614+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:29:37.945890+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:29:37.946032+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:29:37.946094+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:29:37.946133+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:29:37.946615+00:00] request.INFO: Matched route "newsletters_list". {"route":"newsletters_list","route_parameters":{"_route":"newsletters_list","_controller":"App\\Controller\\NewslettersController::list"},"request_uri":"http://localhost:8001/newsletters/list","method":"GET"} []
[2024-01-10T13:29:37.949065+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:29:37.949893+00:00] doctrine.DEBUG: Executing query: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0"} []
[2024-01-10T13:29:37.952865+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:29:37.953828+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:29:37.955346+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:29:37.955453+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:29:37.955518+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:29:37.955571+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:29:37.955639+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:29:37.955705+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:29:37.956396+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:29:37.956484+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:29:37.956551+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:29:37.956601+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:29:37.956936+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:29:37.957322+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:29:37.957642+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:29:37.959781+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:29:37.960053+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:29:37.962054+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:29:37.962408+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:29:37.964481+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:29:37.964828+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:29:37.966258+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:37.968917+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:29:37.969237+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:29:37.971181+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:29:37.971993+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:29:37.993700+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:29:37.994033+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:29:38.023482+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:29:38.043982+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:29:38.044193+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:29:38.044295+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:29:38.044366+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:29:38.045036+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"f73001"},"request_uri":"http://localhost:8001/_wdt/f73001","method":"GET"} []
[2024-01-10T13:29:38.046341+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:29:38.046474+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:29:38.046578+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:29:38.046673+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:29:38.046786+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:29:38.046880+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:29:38.048429+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:29:38.048534+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:29:38.048620+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:29:38.049394+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:29:38.226340+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:38.227613+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:38","2":"2024-01-10 13:29:38","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:38","2":"2024-01-10 13:29:38","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:38.230145+00:00] doctrine.DEBUG: Executing statement: UPDATE messenger_messages SET delivered_at = ? WHERE id = ? (parameters: array{"1":"2024-01-10 13:29:38","2":9}, types: array{"1":2,"2":2}) {"sql":"UPDATE messenger_messages SET delivered_at = ? WHERE id = ?","params":{"1":"2024-01-10 13:29:38","2":9},"types":{"1":2,"2":2}} []
[2024-01-10T13:29:38.232124+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:38.242226+00:00] messenger.INFO: Received message App\Message\SendNewsletterMessage {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage"} []
[2024-01-10T13:29:38.244754+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:29:38.248153+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ? (parameters: array{"1":1}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ?","params":{"1":1},"types":{"1":1}} []
[2024-01-10T13:29:41.260510+00:00] app.DEBUG: Email transport "Symfony\Component\Mailer\Transport\Smtp\SmtpTransport" stopping [] []
[2024-01-10T13:29:41.261437+00:00] app.DEBUG: Email transport "Symfony\Component\Mailer\Transport\Smtp\SmtpTransport" stopped [] []
[2024-01-10T13:29:41.261803+00:00] app.DEBUG: Email transport "Symfony\Component\Mailer\Transport\Smtp\SmtpTransport" starting [] []
[2024-01-10T13:29:41.375817+00:00] app.DEBUG: Email transport "Symfony\Component\Mailer\Transport\Smtp\SmtpTransport" started [] []
[2024-01-10T13:29:41.431149+00:00] messenger.INFO: Message Symfony\Component\Mailer\Messenger\SendEmailMessage handled by Symfony\Component\Mailer\Messenger\MessageHandler::__invoke {"message":{"Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage":[]},"class":"Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage","handler":"Symfony\\Component\\Mailer\\Messenger\\MessageHandler::__invoke"} []
[2024-01-10T13:29:41.431818+00:00] messenger.INFO: Message App\Message\SendNewsletterMessage handled by App\MessageHandler\SendNewsletterMessageHandler::__invoke {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage","handler":"App\\MessageHandler\\SendNewsletterMessageHandler::__invoke"} []
[2024-01-10T13:29:41.432913+00:00] messenger.INFO: App\Message\SendNewsletterMessage was handled successfully (acknowledging to transport). {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage"} []
[2024-01-10T13:29:41.433408+00:00] doctrine.DEBUG: Executing statement: DELETE FROM messenger_messages WHERE id = ? (parameters: array{"1":"9"}, types: array{"1":2}) {"sql":"DELETE FROM messenger_messages WHERE id = ?","params":{"1":"9"},"types":{"1":2}} []
[2024-01-10T13:29:41.443523+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:41.445053+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:41","2":"2024-01-10 13:29:41","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:41","2":"2024-01-10 13:29:41","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:41.447592+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:42.449569+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:42.450785+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:42","2":"2024-01-10 13:29:42","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:42","2":"2024-01-10 13:29:42","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:42.452985+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:43.455028+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:43.456476+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:43","2":"2024-01-10 13:29:43","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:43","2":"2024-01-10 13:29:43","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:43.458356+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:44.460098+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:44.460986+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:44","2":"2024-01-10 13:29:44","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:44","2":"2024-01-10 13:29:44","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:44.462482+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:45.463860+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:45.465093+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:45","2":"2024-01-10 13:29:45","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:45","2":"2024-01-10 13:29:45","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:45.467021+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:46.468448+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:46.469590+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:46","2":"2024-01-10 13:29:46","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:46","2":"2024-01-10 13:29:46","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:46.471342+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:47.472808+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:47.474335+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:47","2":"2024-01-10 13:29:47","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:47","2":"2024-01-10 13:29:47","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:47.476886+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:48.478596+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:48.480144+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:48","2":"2024-01-10 13:29:48","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:48","2":"2024-01-10 13:29:48","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:48.482568+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:49.484331+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:49.486174+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:49","2":"2024-01-10 13:29:49","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:49","2":"2024-01-10 13:29:49","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:49.487802+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:50.488979+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:50.490019+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:50","2":"2024-01-10 13:29:50","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:50","2":"2024-01-10 13:29:50","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:50.491494+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:51.492330+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:51.493455+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:51","2":"2024-01-10 13:29:51","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:51","2":"2024-01-10 13:29:51","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:51.495035+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:52.496255+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:52.497266+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:52","2":"2024-01-10 13:29:52","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:52","2":"2024-01-10 13:29:52","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:52.498687+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:53.499768+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:53.500737+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:53","2":"2024-01-10 13:29:53","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:53","2":"2024-01-10 13:29:53","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:53.502462+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:54.504012+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:54.505975+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:54","2":"2024-01-10 13:29:54","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:54","2":"2024-01-10 13:29:54","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:54.508011+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:55.509502+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:55.509962+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:55","2":"2024-01-10 13:29:55","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:55","2":"2024-01-10 13:29:55","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:55.510664+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:56.511313+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:56.512390+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:56","2":"2024-01-10 13:29:56","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:56","2":"2024-01-10 13:29:56","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:56.513874+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:57.515232+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:57.516768+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:57","2":"2024-01-10 13:29:57","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:57","2":"2024-01-10 13:29:57","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:57.518573+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:58.520156+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:58.521575+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:58","2":"2024-01-10 13:29:58","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:58","2":"2024-01-10 13:29:58","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:58.523521+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:29:59.524957+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:29:59.526245+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:29:59","2":"2024-01-10 13:29:59","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:29:59","2":"2024-01-10 13:29:59","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:29:59.528023+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:00.529423+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:00.530237+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:00","2":"2024-01-10 13:30:00","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:00","2":"2024-01-10 13:30:00","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:00.531474+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:01.532559+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:01.534152+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:01","2":"2024-01-10 13:30:01","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:01","2":"2024-01-10 13:30:01","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:01.536237+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:02.538906+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:02.540432+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:02","2":"2024-01-10 13:30:02","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:02","2":"2024-01-10 13:30:02","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:02.542454+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:03.544410+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:03.545563+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:03","2":"2024-01-10 13:30:03","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:03","2":"2024-01-10 13:30:03","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:03.547225+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:04.548770+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:04.550135+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:04","2":"2024-01-10 13:30:04","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:04","2":"2024-01-10 13:30:04","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:04.552152+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:05.553631+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:05.554618+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:05","2":"2024-01-10 13:30:05","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:05","2":"2024-01-10 13:30:05","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:05.556424+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:06.557594+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:06.558479+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:06","2":"2024-01-10 13:30:06","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:06","2":"2024-01-10 13:30:06","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:06.559949+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:07.560970+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:07.562219+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:07","2":"2024-01-10 13:30:07","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:07","2":"2024-01-10 13:30:07","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:07.564559+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:08.565952+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:08.566999+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:08","2":"2024-01-10 13:30:08","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:08","2":"2024-01-10 13:30:08","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:08.568654+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:09.569795+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:09.571255+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:09","2":"2024-01-10 13:30:09","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:09","2":"2024-01-10 13:30:09","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:09.574150+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:10.575850+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:10.576604+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:10","2":"2024-01-10 13:30:10","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:10","2":"2024-01-10 13:30:10","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:10.577397+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:11.578129+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:11.580347+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:11","2":"2024-01-10 13:30:11","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:11","2":"2024-01-10 13:30:11","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:11.582686+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:12.584668+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:12.587893+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:12","2":"2024-01-10 13:30:12","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:12","2":"2024-01-10 13:30:12","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:12.590853+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:13.592714+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:13.593784+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:13","2":"2024-01-10 13:30:13","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:13","2":"2024-01-10 13:30:13","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:13.595337+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:14.596527+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:14.598129+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:14","2":"2024-01-10 13:30:14","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:14","2":"2024-01-10 13:30:14","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:14.600316+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:15.601960+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:15.602889+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:15","2":"2024-01-10 13:30:15","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:15","2":"2024-01-10 13:30:15","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:15.604546+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:16.605870+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:16.606983+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:16","2":"2024-01-10 13:30:16","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:16","2":"2024-01-10 13:30:16","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:16.608573+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:17.609766+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:17.611350+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:17","2":"2024-01-10 13:30:17","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:17","2":"2024-01-10 13:30:17","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:17.614442+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:18.616131+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:18.616430+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:18","2":"2024-01-10 13:30:18","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:18","2":"2024-01-10 13:30:18","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:18.616883+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:19.617334+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:19.618797+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:19","2":"2024-01-10 13:30:19","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:19","2":"2024-01-10 13:30:19","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:19.620764+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:20.622272+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:20.623312+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:20","2":"2024-01-10 13:30:20","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:20","2":"2024-01-10 13:30:20","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:20.624861+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:21.626089+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:21.627241+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:21","2":"2024-01-10 13:30:21","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:21","2":"2024-01-10 13:30:21","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:21.629105+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:22.630473+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:22.631725+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:22","2":"2024-01-10 13:30:22","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:22","2":"2024-01-10 13:30:22","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:22.634107+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:23.635773+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:23.637150+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:23","2":"2024-01-10 13:30:23","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:23","2":"2024-01-10 13:30:23","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:23.639300+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:24.640678+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:24.641957+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:24","2":"2024-01-10 13:30:24","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:24","2":"2024-01-10 13:30:24","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:24.643758+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:25.645149+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:25.646843+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:25","2":"2024-01-10 13:30:25","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:25","2":"2024-01-10 13:30:25","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:25.649319+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:26.651040+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:26.651466+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:26","2":"2024-01-10 13:30:26","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:26","2":"2024-01-10 13:30:26","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:26.652065+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:27.652687+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:27.654203+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:27","2":"2024-01-10 13:30:27","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:27","2":"2024-01-10 13:30:27","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:27.656251+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:28.657823+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:28.659157+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:28","2":"2024-01-10 13:30:28","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:28","2":"2024-01-10 13:30:28","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:28.661601+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:29.663133+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:29.663532+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:29","2":"2024-01-10 13:30:29","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:29","2":"2024-01-10 13:30:29","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:29.664122+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:30.664614+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:30.665939+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:30","2":"2024-01-10 13:30:30","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:30","2":"2024-01-10 13:30:30","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:30.667858+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:31.669685+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:31.671254+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:31","2":"2024-01-10 13:30:31","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:31","2":"2024-01-10 13:30:31","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:31.672690+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:32.673794+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:32.675206+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:32","2":"2024-01-10 13:30:32","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:32","2":"2024-01-10 13:30:32","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:32.677256+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:33.678623+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:33.678964+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:33","2":"2024-01-10 13:30:33","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:33","2":"2024-01-10 13:30:33","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:33.679455+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:34.679882+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:34.680352+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:34","2":"2024-01-10 13:30:34","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:34","2":"2024-01-10 13:30:34","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:34.681134+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:35.681819+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:35.682576+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:35","2":"2024-01-10 13:30:35","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:35","2":"2024-01-10 13:30:35","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:35.683523+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:36.684259+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:36.685667+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:36","2":"2024-01-10 13:30:36","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:36","2":"2024-01-10 13:30:36","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:36.687237+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:37.688349+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:37.689381+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:37","2":"2024-01-10 13:30:37","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:37","2":"2024-01-10 13:30:37","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:37.690901+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:38.691870+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:38.693558+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:38","2":"2024-01-10 13:30:38","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:38","2":"2024-01-10 13:30:38","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:38.697031+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:39.699032+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:39.700021+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:39","2":"2024-01-10 13:30:39","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:39","2":"2024-01-10 13:30:39","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:39.701609+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:40.702705+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:40.703998+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:40","2":"2024-01-10 13:30:40","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:40","2":"2024-01-10 13:30:40","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:40.706060+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:41.707551+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:41.708893+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:41","2":"2024-01-10 13:30:41","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:41","2":"2024-01-10 13:30:41","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:41.711464+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:42.713288+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:42.714798+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:42","2":"2024-01-10 13:30:42","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:42","2":"2024-01-10 13:30:42","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:42.717188+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:43.719578+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:43.720885+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:43","2":"2024-01-10 13:30:43","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:43","2":"2024-01-10 13:30:43","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:43.722875+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:44.724390+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:44.724778+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:44","2":"2024-01-10 13:30:44","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:44","2":"2024-01-10 13:30:44","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:44.725341+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:45.726441+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:45.727922+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:45","2":"2024-01-10 13:30:45","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:45","2":"2024-01-10 13:30:45","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:45.730502+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:46.732318+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:46.733281+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:46","2":"2024-01-10 13:30:46","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:46","2":"2024-01-10 13:30:46","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:46.734559+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:47.735468+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:47.736296+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:47","2":"2024-01-10 13:30:47","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:47","2":"2024-01-10 13:30:47","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:47.737614+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:48.738650+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:48.740046+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:48","2":"2024-01-10 13:30:48","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:48","2":"2024-01-10 13:30:48","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:48.742271+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:49.743924+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:49.745085+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:49","2":"2024-01-10 13:30:49","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:49","2":"2024-01-10 13:30:49","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:49.746689+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:50.748037+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:50.749392+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:50","2":"2024-01-10 13:30:50","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:50","2":"2024-01-10 13:30:50","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:50.751336+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:51.752809+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:51.753836+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:51","2":"2024-01-10 13:30:51","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:51","2":"2024-01-10 13:30:51","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:51.755563+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:52.757140+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:52.758306+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:52","2":"2024-01-10 13:30:52","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:52","2":"2024-01-10 13:30:52","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:52.760032+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:53.223232+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:30:53.223875+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:30:53.224124+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:30:53.224332+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:30:53.231072+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Routing\RouteCollection::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Routing\\RouteCollection::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/routing/RouteCollection.php:59)"} []
[2024-01-10T13:30:53.231448+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Routing\RouteCollection::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Routing\\RouteCollection::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/routing/RouteCollection.php:69)"} []
[2024-01-10T13:30:53.252152+00:00] request.INFO: Matched route "newsletters_send". {"route":"newsletters_send","route_parameters":{"_route":"newsletters_send","_controller":"App\\Controller\\NewslettersController::send","id":"1"},"request_uri":"http://localhost:8001/newsletters/send/1","method":"GET"} []
[2024-01-10T13:30:53.258145+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:30:53.259444+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ? (parameters: array{"1":"1"}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ?","params":{"1":"1"},"types":{"1":1}} []
[2024-01-10T13:30:53.261999+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:30:53.262883+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:30:53.264345+00:00] messenger.INFO: Sending message App\Message\SendNewsletterMessage with async sender using Symfony\Component\Messenger\Bridge\Doctrine\Transport\DoctrineTransport {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage","alias":"async","sender":"Symfony\\Component\\Messenger\\Bridge\\Doctrine\\Transport\\DoctrineTransport"} []
[2024-01-10T13:30:53.264624+00:00] doctrine.DEBUG: Executing statement: INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?) (parameters: array{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:1:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"default","4":"2024-01-10 13:30:53","5":"2024-01-10 13:30:53"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?)","params":{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:1:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"default","4":"2024-01-10 13:30:53","5":"2024-01-10 13:30:53"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2024-01-10T13:30:53.271750+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:30:53.271869+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:30:53.271957+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:30:53.272038+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:30:53.272109+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:30:53.272188+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:30:53.273434+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:30:53.273582+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:30:53.273805+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:30:53.273927+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:30:53.274589+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:30:53.275486+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:30:53.275814+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:30:53.277216+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:30:53.277552+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:30:53.279145+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:30:53.279419+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:30:53.280847+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:30:53.281136+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:30:53.282630+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:53.284961+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:30:53.285324+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:30:53.286641+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:30:53.287660+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:30:53.304484+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:30:53.304611+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:30:53.326853+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:30:53.330694+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:30:53.330822+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:30:53.330877+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:30:53.330925+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:30:53.331507+00:00] request.INFO: Matched route "newsletters_list". {"route":"newsletters_list","route_parameters":{"_route":"newsletters_list","_controller":"App\\Controller\\NewslettersController::list"},"request_uri":"http://localhost:8001/newsletters/list","method":"GET"} []
[2024-01-10T13:30:53.334220+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:30:53.334925+00:00] doctrine.DEBUG: Executing query: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0"} []
[2024-01-10T13:30:53.337264+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:30:53.338233+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:30:53.340266+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:30:53.340398+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:30:53.340467+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:30:53.340529+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:30:53.340600+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:30:53.340670+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:30:53.341263+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:30:53.341357+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:30:53.341439+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:30:53.341504+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:30:53.342083+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:30:53.342624+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:30:53.343016+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:30:53.344545+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:30:53.344815+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:30:53.346311+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:30:53.346590+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:30:53.348114+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:30:53.348315+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:30:53.349916+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:53.352016+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:30:53.352257+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:30:53.353284+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:30:53.354033+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:30:53.369204+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:30:53.369308+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:30:53.393033+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:30:53.414814+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:30:53.414998+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:30:53.415067+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:30:53.415124+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:30:53.416132+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"1b6b3d"},"request_uri":"http://localhost:8001/_wdt/1b6b3d","method":"GET"} []
[2024-01-10T13:30:53.417280+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:30:53.417390+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:30:53.417468+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:30:53.417557+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:30:53.417632+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:30:53.417707+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:30:53.418902+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:30:53.418980+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:30:53.419052+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:30:53.419118+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:30:53.761446+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:53.762668+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:53","2":"2024-01-10 13:30:53","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:53","2":"2024-01-10 13:30:53","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:53.765051+00:00] doctrine.DEBUG: Executing statement: UPDATE messenger_messages SET delivered_at = ? WHERE id = ? (parameters: array{"1":"2024-01-10 13:30:53","2":10}, types: array{"1":2,"2":2}) {"sql":"UPDATE messenger_messages SET delivered_at = ? WHERE id = ?","params":{"1":"2024-01-10 13:30:53","2":10},"types":{"1":2,"2":2}} []
[2024-01-10T13:30:53.766502+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:53.774918+00:00] messenger.INFO: Received message App\Message\SendNewsletterMessage {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage"} []
[2024-01-10T13:30:53.776288+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:30:53.779267+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ? (parameters: array{"1":1}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ?","params":{"1":1},"types":{"1":1}} []
[2024-01-10T13:30:56.810082+00:00] messenger.CRITICAL: Error thrown while handling message App\Message\SendNewsletterMessage. Removing from transport after 0 retries. Error: "Expected response code "250" but got code "421", with message "421 Timeout - closing connection"." {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage","retryCount":0,"error":"Expected response code \"250\" but got code \"421\", with message \"421 Timeout - closing connection\".","exception":"[object] (Symfony\\Component\\Messenger\\Exception\\HandlerFailedException(code: 421): Expected response code \"250\" but got code \"421\", with message \"421 Timeout - closing connection\". at /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/HandleMessageMiddleware.php:80)\n[previous exception] [object] (Symfony\\Component\\Messenger\\Exception\\HandlerFailedException(code: 421): Expected response code \"250\" but got code \"421\", with message \"421 Timeout - closing connection\". at /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/HandleMessageMiddleware.php:80)\n[previous exception] [object] (Symfony\\Component\\Mailer\\Exception\\TransportException(code: 421): Expected response code \"250\" but got code \"421\", with message \"421 Timeout - closing connection\". at /home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Transport/Smtp/SmtpTransport.php:306)"} []
[2024-01-10T13:30:56.812769+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:30:56.812967+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:30:56.813156+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:30:56.813328+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:30:56.813532+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:30:56.813699+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:30:56.823420+00:00] app.DEBUG: Email transport "Symfony\Component\Mailer\Transport\Smtp\SmtpTransport" stopping [] []
[2024-01-10T13:30:56.823577+00:00] app.DEBUG: Email transport "Symfony\Component\Mailer\Transport\Smtp\SmtpTransport" stopped [] []
[2024-01-10T13:30:56.823635+00:00] app.DEBUG: Email transport "Symfony\Component\Mailer\Transport\Smtp\SmtpTransport" starting [] []
[2024-01-10T13:30:56.927544+00:00] app.DEBUG: Email transport "Symfony\Component\Mailer\Transport\Smtp\SmtpTransport" started [] []
[2024-01-10T13:30:56.978983+00:00] messenger.INFO: Message Symfony\Component\Mailer\Messenger\SendEmailMessage handled by Symfony\Component\Mailer\Messenger\MessageHandler::__invoke {"message":{"Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage":[]},"class":"Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage","handler":"Symfony\\Component\\Mailer\\Messenger\\MessageHandler::__invoke"} []
[2024-01-10T13:30:56.980702+00:00] messenger.INFO: Rejected message App\Message\SendNewsletterMessage will be sent to the failure transport Symfony\Component\Messenger\Bridge\Doctrine\Transport\DoctrineTransport. {"class":"App\\Message\\SendNewsletterMessage","transport":"Symfony\\Component\\Messenger\\Bridge\\Doctrine\\Transport\\DoctrineTransport"} []
[2024-01-10T13:30:56.984520+00:00] doctrine.DEBUG: Executing statement: INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?) (parameters: array{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:6:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}s:57:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\TransportMessageIdStamp\\\";a:1:{i:0;O:57:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\TransportMessageIdStamp\\\":1:{s:61:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\TransportMessageIdStamp\\0id\\\";i:10;}}s:51:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\ErrorDetailsStamp\\\";a:1:{i:0;O:51:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\ErrorDetailsStamp\\\":4:{s:67:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\ErrorDetailsStamp\\0exceptionClass\\\";s:60:\\\"Symfony\\\\Component\\\\Messenger\\\\Exception\\\\HandlerFailedException\\\";s:66:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\ErrorDetailsStamp\\0exceptionCode\\\";i:421;s:69:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\ErrorDetailsStamp\\0exceptionMessage\\\";s:97:\\\"Expected response code \\\"250\\\" but got code \\\"421\\\", with message \\\"421 Timeout - closing connection\\\".\\\";s:69:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\ErrorDetailsStamp\\0flattenException\\\";O:57:\\\"Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\\":12:{s:66:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0message\\\";s:97:\\\"Expected response code \\\"250\\\" but got code \\\"421\\\", with message \\\"421 Timeout - closing connection\\\".\\\";s:63:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0code\\\";i:421;s:67:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0previous\\\";O:57:\\\"Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\\":12:{s:66:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0message\\\";s:97:\\\"Expected response code \\\"250\\\" but got code \\\"421\\\", with message \\\"421 Timeout - closing connection\\\".\\\";s:63:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0code\\\";i:421;s:67:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0previous\\\";N;s:64:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0trace\\\";a:40:{i:0;a:8:{s:9:\\\"namespace\\\";s:0:\\\"\\\";s:11:\\\"short_class\\\";s:0:\\\"\\\";s:5:\\\"class\\\";s:0:\\\"\\\";s:4:\\\"type\\\";s:0:\\\"\\\";s:8:\\\"function\\\";s:0:\\\"\\\";s:4:\\\"file\\\";s:91:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Transport/Smtp/SmtpTransport.php\\\";s:4:\\\"line\\\";i:306;s:4:\\\"args\\\";a:0:{}}i:1;a:8:{s:9:\\\"namespace\\\";s:39:\\\"Symfony\\\\Component\\\\Mailer\\\\Transport\\\\Smtp\\\";s:11:\\\"short_class\\\";s:13:\\\"SmtpTransport\\\";s:5:\\\"class\\\";s:53:\\\"Symfony\\\\Component\\\\Mailer\\\\Transport\\\\Smtp\\\\SmtpTransport\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:18:\\\"assertResponseCode\\\";s:4:\\\"file\\\";s:91:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Transport/Smtp/SmtpTransport.php\\\";s:4:\\\"line\\\";i:180;s:4:\\\"args\\\";a:0:{}}i:2;a:8:{s:9:\\\"namespace\\\";s:39:\\\"Symfony\\\\Component\\\\Mailer\\\\Transport\\\\Smtp\\\";s:11:\\\"short_class\\\";s:13:\\\"SmtpTransport\\\";s:5:\\\"class\\\";s:53:\\\"Symfony\\\\Component\\\\Mailer\\\\Transport\\\\Smtp\\\\SmtpTransport\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:14:\\\"executeCommand\\\";s:4:\\\"file\\\";s:91:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Transport/Smtp/SmtpTransport.php\\\";s:4:\\\"line\\\";i:233;s:4:\\\"args\\\";a:0:{}}i:3;a:8:{s:9:\\\"namespace\\\";s:39:\\\"Symfony\\\\Component\\\\Mailer\\\\Transport\\\\Smtp\\\";s:11:\\\"short_class\\\";s:13:\\\"SmtpTransport\\\";s:5:\\\"class\\\";s:53:\\\"Symfony\\\\Component\\\\Mailer\\\\Transport\\\\Smtp\\\\SmtpTransport\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:17:\\\"doMailFromCommand\\\";s:4:\\\"file\\\";s:91:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Transport/Smtp/SmtpTransport.php\\\";s:4:\\\"line\\\";i:197;s:4:\\\"args\\\";a:0:{}}i:4;a:8:{s:9:\\\"namespace\\\";s:39:\\\"Symfony\\\\Component\\\\Mailer\\\\Transport\\\\Smtp\\\";s:11:\\\"short_class\\\";s:13:\\\"SmtpTransport\\\";s:5:\\\"class\\\";s:53:\\\"Symfony\\\\Component\\\\Mailer\\\\Transport\\\\Smtp\\\\SmtpTransport\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"doSend\\\";s:4:\\\"file\\\";s:90:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Transport/AbstractTransport.php\\\";s:4:\\\"line\\\";i:68;s:4:\\\"args\\\";a:0:{}}i:5;a:8:{s:9:\\\"namespace\\\";s:34:\\\"Symfony\\\\Component\\\\Mailer\\\\Transport\\\";s:11:\\\"short_class\\\";s:17:\\\"AbstractTransport\\\";s:5:\\\"class\\\";s:52:\\\"Symfony\\\\Component\\\\Mailer\\\\Transport\\\\AbstractTransport\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:4:\\\"send\\\";s:4:\\\"file\\\";s:91:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Transport/Smtp/SmtpTransport.php\\\";s:4:\\\"line\\\";i:132;s:4:\\\"args\\\";a:0:{}}i:6;a:8:{s:9:\\\"namespace\\\";s:39:\\\"Symfony\\\\Component\\\\Mailer\\\\Transport\\\\Smtp\\\";s:11:\\\"short_class\\\";s:13:\\\"SmtpTransport\\\";s:5:\\\"class\\\";s:53:\\\"Symfony\\\\Component\\\\Mailer\\\\Transport\\\\Smtp\\\\SmtpTransport\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:4:\\\"send\\\";s:4:\\\"file\\\";s:83:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Transport/Transports.php\\\";s:4:\\\"line\\\";i:51;s:4:\\\"args\\\";a:0:{}}i:7;a:8:{s:9:\\\"namespace\\\";s:34:\\\"Symfony\\\\Component\\\\Mailer\\\\Transport\\\";s:11:\\\"short_class\\\";s:10:\\\"Transports\\\";s:5:\\\"class\\\";s:45:\\\"Symfony\\\\Component\\\\Mailer\\\\Transport\\\\Transports\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:4:\\\"send\\\";s:4:\\\"file\\\";s:87:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Messenger/MessageHandler.php\\\";s:4:\\\"line\\\";i:31;s:4:\\\"args\\\";a:0:{}}i:8;a:8:{s:9:\\\"namespace\\\";s:34:\\\"Symfony\\\\Component\\\\Mailer\\\\Messenger\\\";s:11:\\\"short_class\\\";s:14:\\\"MessageHandler\\\";s:5:\\\"class\\\";s:49:\\\"Symfony\\\\Component\\\\Mailer\\\\Messenger\\\\MessageHandler\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:8:\\\"__invoke\\\";s:4:\\\"file\\\";s:100:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/HandleMessageMiddleware.php\\\";s:4:\\\"line\\\";i:63;s:4:\\\"args\\\";a:0:{}}i:9;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:23:\\\"HandleMessageMiddleware\\\";s:5:\\\"class\\\";s:62:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\HandleMessageMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:98:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/SendMessageMiddleware.php\\\";s:4:\\\"line\\\";i:74;s:4:\\\"args\\\";a:0:{}}i:10;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:21:\\\"SendMessageMiddleware\\\";s:5:\\\"class\\\";s:60:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\SendMessageMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:110:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/FailedMessageProcessingMiddleware.php\\\";s:4:\\\"line\\\";i:34;s:4:\\\"args\\\";a:0:{}}i:11;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:33:\\\"FailedMessageProcessingMiddleware\\\";s:5:\\\"class\\\";s:72:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\FailedMessageProcessingMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:110:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/DispatchAfterCurrentBusMiddleware.php\\\";s:4:\\\"line\\\";i:61;s:4:\\\"args\\\";a:0:{}}i:12;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:33:\\\"DispatchAfterCurrentBusMiddleware\\\";s:5:\\\"class\\\";s:72:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\DispatchAfterCurrentBusMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:111:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/RejectRedeliveredMessageMiddleware.php\\\";s:4:\\\"line\\\";i:48;s:4:\\\"args\\\";a:0:{}}i:13;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:34:\\\"RejectRedeliveredMessageMiddleware\\\";s:5:\\\"class\\\";s:73:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\RejectRedeliveredMessageMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:102:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/AddBusNameStampMiddleware.php\\\";s:4:\\\"line\\\";i:37;s:4:\\\"args\\\";a:0:{}}i:14;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:25:\\\"AddBusNameStampMiddleware\\\";s:5:\\\"class\\\";s:64:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\AddBusNameStampMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:96:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/TraceableMiddleware.php\\\";s:4:\\\"line\\\";i:43;s:4:\\\"args\\\";a:0:{}}i:15;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:19:\\\"TraceableMiddleware\\\";s:5:\\\"class\\\";s:58:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\TraceableMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:76:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/MessageBus.php\\\";s:4:\\\"line\\\";i:77;s:4:\\\"args\\\";a:0:{}}i:16;a:8:{s:9:\\\"namespace\\\";s:27:\\\"Symfony\\\\Component\\\\Messenger\\\";s:11:\\\"short_class\\\";s:10:\\\"MessageBus\\\";s:5:\\\"class\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\MessageBus\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:8:\\\"dispatch\\\";s:4:\\\"file\\\";s:85:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/TraceableMessageBus.php\\\";s:4:\\\"line\\\";i:41;s:4:\\\"args\\\";a:0:{}}i:17;a:8:{s:9:\\\"namespace\\\";s:27:\\\"Symfony\\\\Component\\\\Messenger\\\";s:11:\\\"short_class\\\";s:19:\\\"TraceableMessageBus\\\";s:5:\\\"class\\\";s:47:\\\"Symfony\\\\Component\\\\Messenger\\\\TraceableMessageBus\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:8:\\\"dispatch\\\";s:4:\\\"file\\\";s:69:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Mailer.php\\\";s:4:\\\"line\\\";i:54;s:4:\\\"args\\\";a:0:{}}i:18;a:8:{s:9:\\\"namespace\\\";s:24:\\\"Symfony\\\\Component\\\\Mailer\\\";s:11:\\\"short_class\\\";s:6:\\\"Mailer\\\";s:5:\\\"class\\\";s:31:\\\"Symfony\\\\Component\\\\Mailer\\\\Mailer\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:4:\\\"send\\\";s:4:\\\"file\\\";s:74:\\\"/home/massoud/www/Symfony/Newsletter/src/Service/SendNewsletterService.php\\\";s:4:\\\"line\\\";i:29;s:4:\\\"args\\\";a:0:{}}i:19;a:8:{s:9:\\\"namespace\\\";s:11:\\\"App\\\\Service\\\";s:11:\\\"short_class\\\";s:21:\\\"SendNewsletterService\\\";s:5:\\\"class\\\";s:33:\\\"App\\\\Service\\\\SendNewsletterService\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:4:\\\"send\\\";s:4:\\\"file\\\";s:88:\\\"/home/massoud/www/Symfony/Newsletter/src/MessageHandler/SendNewsletterMessageHandler.php\\\";s:4:\\\"line\\\";i:31;s:4:\\\"args\\\";a:0:{}}i:20;a:8:{s:9:\\\"namespace\\\";s:18:\\\"App\\\\MessageHandler\\\";s:11:\\\"short_class\\\";s:28:\\\"SendNewsletterMessageHandler\\\";s:5:\\\"class\\\";s:47:\\\"App\\\\MessageHandler\\\\SendNewsletterMessageHandler\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:8:\\\"__invoke\\\";s:4:\\\"file\\\";s:100:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/HandleMessageMiddleware.php\\\";s:4:\\\"line\\\";i:63;s:4:\\\"args\\\";a:0:{}}i:21;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:23:\\\"HandleMessageMiddleware\\\";s:5:\\\"class\\\";s:62:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\HandleMessageMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:98:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/SendMessageMiddleware.php\\\";s:4:\\\"line\\\";i:74;s:4:\\\"args\\\";a:0:{}}i:22;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:21:\\\"SendMessageMiddleware\\\";s:5:\\\"class\\\";s:60:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\SendMessageMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:110:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/FailedMessageProcessingMiddleware.php\\\";s:4:\\\"line\\\";i:34;s:4:\\\"args\\\";a:0:{}}i:23;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:33:\\\"FailedMessageProcessingMiddleware\\\";s:5:\\\"class\\\";s:72:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\FailedMessageProcessingMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:110:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/DispatchAfterCurrentBusMiddleware.php\\\";s:4:\\\"line\\\";i:68;s:4:\\\"args\\\";a:0:{}}i:24;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:33:\\\"DispatchAfterCurrentBusMiddleware\\\";s:5:\\\"class\\\";s:72:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\DispatchAfterCurrentBusMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:111:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/RejectRedeliveredMessageMiddleware.php\\\";s:4:\\\"line\\\";i:48;s:4:\\\"args\\\";a:0:{}}i:25;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:34:\\\"RejectRedeliveredMessageMiddleware\\\";s:5:\\\"class\\\";s:73:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\RejectRedeliveredMessageMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:102:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/AddBusNameStampMiddleware.php\\\";s:4:\\\"line\\\";i:37;s:4:\\\"args\\\";a:0:{}}i:26;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:25:\\\"AddBusNameStampMiddleware\\\";s:5:\\\"class\\\";s:64:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\AddBusNameStampMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:96:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/TraceableMiddleware.php\\\";s:4:\\\"line\\\";i:43;s:4:\\\"args\\\";a:0:{}}i:27;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:19:\\\"TraceableMiddleware\\\";s:5:\\\"class\\\";s:58:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\TraceableMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:76:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/MessageBus.php\\\";s:4:\\\"line\\\";i:77;s:4:\\\"args\\\";a:0:{}}i:28;a:8:{s:9:\\\"namespace\\\";s:27:\\\"Symfony\\\\Component\\\\Messenger\\\";s:11:\\\"short_class\\\";s:10:\\\"MessageBus\\\";s:5:\\\"class\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\MessageBus\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:8:\\\"dispatch\\\";s:4:\\\"file\\\";s:85:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/TraceableMessageBus.php\\\";s:4:\\\"line\\\";i:41;s:4:\\\"args\\\";a:0:{}}i:29;a:8:{s:9:\\\"namespace\\\";s:27:\\\"Symfony\\\\Component\\\\Messenger\\\";s:11:\\\"short_class\\\";s:19:\\\"TraceableMessageBus\\\";s:5:\\\"class\\\";s:47:\\\"Symfony\\\\Component\\\\Messenger\\\\TraceableMessageBus\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:8:\\\"dispatch\\\";s:4:\\\"file\\\";s:84:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/RoutableMessageBus.php\\\";s:4:\\\"line\\\";i:54;s:4:\\\"args\\\";a:0:{}}i:30;a:8:{s:9:\\\"namespace\\\";s:27:\\\"Symfony\\\\Component\\\\Messenger\\\";s:11:\\\"short_class\\\";s:18:\\\"RoutableMessageBus\\\";s:5:\\\"class\\\";s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\RoutableMessageBus\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:8:\\\"dispatch\\\";s:4:\\\"file\\\";s:72:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Worker.php\\\";s:4:\\\"line\\\";i:114;s:4:\\\"args\\\";a:0:{}}i:31;a:8:{s:9:\\\"namespace\\\";s:27:\\\"Symfony\\\\Component\\\\Messenger\\\";s:11:\\\"short_class\\\";s:6:\\\"Worker\\\";s:5:\\\"class\\\";s:34:\\\"Symfony\\\\Component\\\\Messenger\\\\Worker\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:13:\\\"handleMessage\\\";s:4:\\\"file\\\";s:72:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Worker.php\\\";s:4:\\\"line\\\";i:77;s:4:\\\"args\\\";a:0:{}}i:32;a:8:{s:9:\\\"namespace\\\";s:27:\\\"Symfony\\\\Component\\\\Messenger\\\";s:11:\\\"short_class\\\";s:6:\\\"Worker\\\";s:5:\\\"class\\\";s:34:\\\"Symfony\\\\Component\\\\Messenger\\\\Worker\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:3:\\\"run\\\";s:4:\\\"file\\\";s:96:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Command/ConsumeMessagesCommand.php\\\";s:4:\\\"line\\\";i:197;s:4:\\\"args\\\";a:0:{}}i:33;a:8:{s:9:\\\"namespace\\\";s:35:\\\"Symfony\\\\Component\\\\Messenger\\\\Command\\\";s:11:\\\"short_class\\\";s:22:\\\"ConsumeMessagesCommand\\\";s:5:\\\"class\\\";s:58:\\\"Symfony\\\\Component\\\\Messenger\\\\Command\\\\ConsumeMessagesCommand\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:7:\\\"execute\\\";s:4:\\\"file\\\";s:79:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Command/Command.php\\\";s:4:\\\"line\\\";i:256;s:4:\\\"args\\\";a:0:{}}i:34;a:8:{s:9:\\\"namespace\\\";s:33:\\\"Symfony\\\\Component\\\\Console\\\\Command\\\";s:11:\\\"short_class\\\";s:7:\\\"Command\\\";s:5:\\\"class\\\";s:41:\\\"Symfony\\\\Component\\\\Console\\\\Command\\\\Command\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:3:\\\"run\\\";s:4:\\\"file\\\";s:75:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Application.php\\\";s:4:\\\"line\\\";i:989;s:4:\\\"args\\\";a:0:{}}i:35;a:8:{s:9:\\\"namespace\\\";s:25:\\\"Symfony\\\\Component\\\\Console\\\";s:11:\\\"short_class\\\";s:11:\\\"Application\\\";s:5:\\\"class\\\";s:37:\\\"Symfony\\\\Component\\\\Console\\\\Application\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:12:\\\"doRunCommand\\\";s:4:\\\"file\\\";s:92:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/framework-bundle/Console/Application.php\\\";s:4:\\\"line\\\";i:96;s:4:\\\"args\\\";a:0:{}}i:36;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Bundle\\\\FrameworkBundle\\\\Console\\\";s:11:\\\"short_class\\\";s:11:\\\"Application\\\";s:5:\\\"class\\\";s:50:\\\"Symfony\\\\Bundle\\\\FrameworkBundle\\\\Console\\\\Application\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:12:\\\"doRunCommand\\\";s:4:\\\"file\\\";s:75:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Application.php\\\";s:4:\\\"line\\\";i:290;s:4:\\\"args\\\";a:0:{}}i:37;a:8:{s:9:\\\"namespace\\\";s:25:\\\"Symfony\\\\Component\\\\Console\\\";s:11:\\\"short_class\\\";s:11:\\\"Application\\\";s:5:\\\"class\\\";s:37:\\\"Symfony\\\\Component\\\\Console\\\\Application\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:5:\\\"doRun\\\";s:4:\\\"file\\\";s:92:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/framework-bundle/Console/Application.php\\\";s:4:\\\"line\\\";i:82;s:4:\\\"args\\\";a:0:{}}i:38;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Bundle\\\\FrameworkBundle\\\\Console\\\";s:11:\\\"short_class\\\";s:11:\\\"Application\\\";s:5:\\\"class\\\";s:50:\\\"Symfony\\\\Bundle\\\\FrameworkBundle\\\\Console\\\\Application\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:5:\\\"doRun\\\";s:4:\\\"file\\\";s:75:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Application.php\\\";s:4:\\\"line\\\";i:166;s:4:\\\"args\\\";a:0:{}}i:39;a:8:{s:9:\\\"namespace\\\";s:25:\\\"Symfony\\\\Component\\\\Console\\\";s:11:\\\"short_class\\\";s:11:\\\"Application\\\";s:5:\\\"class\\\";s:37:\\\"Symfony\\\\Component\\\\Console\\\\Application\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:3:\\\"run\\\";s:4:\\\"file\\\";s:48:\\\"/home/massoud/www/Symfony/Newsletter/bin/console\\\";s:4:\\\"line\\\";i:43;s:4:\\\"args\\\";a:0:{}}}s:72:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0traceAsString\\\";s:6402:\\\"#0 /home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Transport/Smtp/SmtpTransport.php(180): Symfony\\\\Component\\\\Mailer\\\\Transport\\\\Smtp\\\\SmtpTransport->assertResponseCode()\n#1 /home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Transport/Smtp/SmtpTransport.php(233): Symfony\\\\Component\\\\Mailer\\\\Transport\\\\Smtp\\\\SmtpTransport->executeCommand()\n#2 /home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Transport/Smtp/SmtpTransport.php(197): Symfony\\\\Component\\\\Mailer\\\\Transport\\\\Smtp\\\\SmtpTransport->doMailFromCommand()\n#3 /home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Transport/AbstractTransport.php(68): Symfony\\\\Component\\\\Mailer\\\\Transport\\\\Smtp\\\\SmtpTransport->doSend()\n#4 /home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Transport/Smtp/SmtpTransport.php(132): Symfony\\\\Component\\\\Mailer\\\\Transport\\\\AbstractTransport->send()\n#5 /home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Transport/Transports.php(51): Symfony\\\\Component\\\\Mailer\\\\Transport\\\\Smtp\\\\SmtpTransport->send()\n#6 /home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Messenger/MessageHandler.php(31): Symfony\\\\Component\\\\Mailer\\\\Transport\\\\Transports->send()\n#7 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/HandleMessageMiddleware.php(63): Symfony\\\\Component\\\\Mailer\\\\Messenger\\\\MessageHandler->__invoke()\n#8 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/SendMessageMiddleware.php(74): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\HandleMessageMiddleware->handle()\n#9 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/FailedMessageProcessingMiddleware.php(34): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\SendMessageMiddleware->handle()\n#10 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/DispatchAfterCurrentBusMiddleware.php(61): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\FailedMessageProcessingMiddleware->handle()\n#11 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/RejectRedeliveredMessageMiddleware.php(48): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\DispatchAfterCurrentBusMiddleware->handle()\n#12 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/AddBusNameStampMiddleware.php(37): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\RejectRedeliveredMessageMiddleware->handle()\n#13 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/TraceableMiddleware.php(43): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\AddBusNameStampMiddleware->handle()\n#14 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/MessageBus.php(77): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\TraceableMiddleware->handle()\n#15 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/TraceableMessageBus.php(41): Symfony\\\\Component\\\\Messenger\\\\MessageBus->dispatch()\n#16 /home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Mailer.php(54): Symfony\\\\Component\\\\Messenger\\\\TraceableMessageBus->dispatch()\n#17 /home/massoud/www/Symfony/Newsletter/src/Service/SendNewsletterService.php(29): Symfony\\\\Component\\\\Mailer\\\\Mailer->send()\n#18 /home/massoud/www/Symfony/Newsletter/src/MessageHandler/SendNewsletterMessageHandler.php(31): App\\\\Service\\\\SendNewsletterService->send()\n#19 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/HandleMessageMiddleware.php(63): App\\\\MessageHandler\\\\SendNewsletterMessageHandler->__invoke()\n#20 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/SendMessageMiddleware.php(74): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\HandleMessageMiddleware->handle()\n#21 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/FailedMessageProcessingMiddleware.php(34): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\SendMessageMiddleware->handle()\n#22 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/DispatchAfterCurrentBusMiddleware.php(68): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\FailedMessageProcessingMiddleware->handle()\n#23 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/RejectRedeliveredMessageMiddleware.php(48): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\DispatchAfterCurrentBusMiddleware->handle()\n#24 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/AddBusNameStampMiddleware.php(37): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\RejectRedeliveredMessageMiddleware->handle()\n#25 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/TraceableMiddleware.php(43): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\AddBusNameStampMiddleware->handle()\n#26 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/MessageBus.php(77): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\TraceableMiddleware->handle()\n#27 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/TraceableMessageBus.php(41): Symfony\\\\Component\\\\Messenger\\\\MessageBus->dispatch()\n#28 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/RoutableMessageBus.php(54): Symfony\\\\Component\\\\Messenger\\\\TraceableMessageBus->dispatch()\n#29 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Worker.php(114): Symfony\\\\Component\\\\Messenger\\\\RoutableMessageBus->dispatch()\n#30 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Worker.php(77): Symfony\\\\Component\\\\Messenger\\\\Worker->handleMessage()\n#31 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Command/ConsumeMessagesCommand.php(197): Symfony\\\\Component\\\\Messenger\\\\Worker->run()\n#32 /home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Command/Command.php(256): Symfony\\\\Component\\\\Messenger\\\\Command\\\\ConsumeMessagesCommand->execute()\n#33 /home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Application.php(989): Symfony\\\\Component\\\\Console\\\\Command\\\\Command->run()\n#34 /home/massoud/www/Symfony/Newsletter/vendor/symfony/framework-bundle/Console/Application.php(96): Symfony\\\\Component\\\\Console\\\\Application->doRunCommand()\n#35 /home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Application.php(290): Symfony\\\\Bundle\\\\FrameworkBundle\\\\Console\\\\Application->doRunCommand()\n#36 /home/massoud/www/Symfony/Newsletter/vendor/symfony/framework-bundle/Console/Application.php(82): Symfony\\\\Component\\\\Console\\\\Application->doRun()\n#37 /home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Application.php(166): Symfony\\\\Bundle\\\\FrameworkBundle\\\\Console\\\\Application->doRun()\n#38 /home/massoud/www/Symfony/Newsletter/bin/console(43): Symfony\\\\Component\\\\Console\\\\Application->run()\n#39 {main}\\\";s:64:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0class\\\";s:53:\\\"Symfony\\\\Component\\\\Mailer\\\\Exception\\\\TransportException\\\";s:69:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0statusCode\\\";i:500;s:69:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0statusText\\\";s:21:\\\"Internal Server Error\\\";s:66:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0headers\\\";a:0:{}s:63:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0file\\\";s:91:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Transport/Smtp/SmtpTransport.php\\\";s:63:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0line\\\";i:306;s:67:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0asString\\\";N;}s:64:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0trace\\\";a:32:{i:0;a:8:{s:9:\\\"namespace\\\";s:0:\\\"\\\";s:11:\\\"short_class\\\";s:0:\\\"\\\";s:5:\\\"class\\\";s:0:\\\"\\\";s:4:\\\"type\\\";s:0:\\\"\\\";s:8:\\\"function\\\";s:0:\\\"\\\";s:4:\\\"file\\\";s:100:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/HandleMessageMiddleware.php\\\";s:4:\\\"line\\\";i:80;s:4:\\\"args\\\";a:0:{}}i:1;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:23:\\\"HandleMessageMiddleware\\\";s:5:\\\"class\\\";s:62:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\HandleMessageMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:98:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/SendMessageMiddleware.php\\\";s:4:\\\"line\\\";i:74;s:4:\\\"args\\\";a:0:{}}i:2;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:21:\\\"SendMessageMiddleware\\\";s:5:\\\"class\\\";s:60:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\SendMessageMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:110:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/FailedMessageProcessingMiddleware.php\\\";s:4:\\\"line\\\";i:34;s:4:\\\"args\\\";a:0:{}}i:3;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:33:\\\"FailedMessageProcessingMiddleware\\\";s:5:\\\"class\\\";s:72:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\FailedMessageProcessingMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:110:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/DispatchAfterCurrentBusMiddleware.php\\\";s:4:\\\"line\\\";i:61;s:4:\\\"args\\\";a:0:{}}i:4;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:33:\\\"DispatchAfterCurrentBusMiddleware\\\";s:5:\\\"class\\\";s:72:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\DispatchAfterCurrentBusMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:111:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/RejectRedeliveredMessageMiddleware.php\\\";s:4:\\\"line\\\";i:48;s:4:\\\"args\\\";a:0:{}}i:5;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:34:\\\"RejectRedeliveredMessageMiddleware\\\";s:5:\\\"class\\\";s:73:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\RejectRedeliveredMessageMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:102:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/AddBusNameStampMiddleware.php\\\";s:4:\\\"line\\\";i:37;s:4:\\\"args\\\";a:0:{}}i:6;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:25:\\\"AddBusNameStampMiddleware\\\";s:5:\\\"class\\\";s:64:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\AddBusNameStampMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:96:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/TraceableMiddleware.php\\\";s:4:\\\"line\\\";i:43;s:4:\\\"args\\\";a:0:{}}i:7;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:19:\\\"TraceableMiddleware\\\";s:5:\\\"class\\\";s:58:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\TraceableMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:76:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/MessageBus.php\\\";s:4:\\\"line\\\";i:77;s:4:\\\"args\\\";a:0:{}}i:8;a:8:{s:9:\\\"namespace\\\";s:27:\\\"Symfony\\\\Component\\\\Messenger\\\";s:11:\\\"short_class\\\";s:10:\\\"MessageBus\\\";s:5:\\\"class\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\MessageBus\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:8:\\\"dispatch\\\";s:4:\\\"file\\\";s:85:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/TraceableMessageBus.php\\\";s:4:\\\"line\\\";i:41;s:4:\\\"args\\\";a:0:{}}i:9;a:8:{s:9:\\\"namespace\\\";s:27:\\\"Symfony\\\\Component\\\\Messenger\\\";s:11:\\\"short_class\\\";s:19:\\\"TraceableMessageBus\\\";s:5:\\\"class\\\";s:47:\\\"Symfony\\\\Component\\\\Messenger\\\\TraceableMessageBus\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:8:\\\"dispatch\\\";s:4:\\\"file\\\";s:69:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Mailer.php\\\";s:4:\\\"line\\\";i:54;s:4:\\\"args\\\";a:0:{}}i:10;a:8:{s:9:\\\"namespace\\\";s:24:\\\"Symfony\\\\Component\\\\Mailer\\\";s:11:\\\"short_class\\\";s:6:\\\"Mailer\\\";s:5:\\\"class\\\";s:31:\\\"Symfony\\\\Component\\\\Mailer\\\\Mailer\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:4:\\\"send\\\";s:4:\\\"file\\\";s:74:\\\"/home/massoud/www/Symfony/Newsletter/src/Service/SendNewsletterService.php\\\";s:4:\\\"line\\\";i:29;s:4:\\\"args\\\";a:0:{}}i:11;a:8:{s:9:\\\"namespace\\\";s:11:\\\"App\\\\Service\\\";s:11:\\\"short_class\\\";s:21:\\\"SendNewsletterService\\\";s:5:\\\"class\\\";s:33:\\\"App\\\\Service\\\\SendNewsletterService\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:4:\\\"send\\\";s:4:\\\"file\\\";s:88:\\\"/home/massoud/www/Symfony/Newsletter/src/MessageHandler/SendNewsletterMessageHandler.php\\\";s:4:\\\"line\\\";i:31;s:4:\\\"args\\\";a:0:{}}i:12;a:8:{s:9:\\\"namespace\\\";s:18:\\\"App\\\\MessageHandler\\\";s:11:\\\"short_class\\\";s:28:\\\"SendNewsletterMessageHandler\\\";s:5:\\\"class\\\";s:47:\\\"App\\\\MessageHandler\\\\SendNewsletterMessageHandler\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:8:\\\"__invoke\\\";s:4:\\\"file\\\";s:100:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/HandleMessageMiddleware.php\\\";s:4:\\\"line\\\";i:63;s:4:\\\"args\\\";a:0:{}}i:13;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:23:\\\"HandleMessageMiddleware\\\";s:5:\\\"class\\\";s:62:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\HandleMessageMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:98:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/SendMessageMiddleware.php\\\";s:4:\\\"line\\\";i:74;s:4:\\\"args\\\";a:0:{}}i:14;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:21:\\\"SendMessageMiddleware\\\";s:5:\\\"class\\\";s:60:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\SendMessageMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:110:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/FailedMessageProcessingMiddleware.php\\\";s:4:\\\"line\\\";i:34;s:4:\\\"args\\\";a:0:{}}i:15;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:33:\\\"FailedMessageProcessingMiddleware\\\";s:5:\\\"class\\\";s:72:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\FailedMessageProcessingMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:110:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/DispatchAfterCurrentBusMiddleware.php\\\";s:4:\\\"line\\\";i:68;s:4:\\\"args\\\";a:0:{}}i:16;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:33:\\\"DispatchAfterCurrentBusMiddleware\\\";s:5:\\\"class\\\";s:72:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\DispatchAfterCurrentBusMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:111:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/RejectRedeliveredMessageMiddleware.php\\\";s:4:\\\"line\\\";i:48;s:4:\\\"args\\\";a:0:{}}i:17;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:34:\\\"RejectRedeliveredMessageMiddleware\\\";s:5:\\\"class\\\";s:73:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\RejectRedeliveredMessageMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:102:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/AddBusNameStampMiddleware.php\\\";s:4:\\\"line\\\";i:37;s:4:\\\"args\\\";a:0:{}}i:18;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:25:\\\"AddBusNameStampMiddleware\\\";s:5:\\\"class\\\";s:64:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\AddBusNameStampMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:96:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/TraceableMiddleware.php\\\";s:4:\\\"line\\\";i:43;s:4:\\\"args\\\";a:0:{}}i:19;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:19:\\\"TraceableMiddleware\\\";s:5:\\\"class\\\";s:58:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\TraceableMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:76:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/MessageBus.php\\\";s:4:\\\"line\\\";i:77;s:4:\\\"args\\\";a:0:{}}i:20;a:8:{s:9:\\\"namespace\\\";s:27:\\\"Symfony\\\\Component\\\\Messenger\\\";s:11:\\\"short_class\\\";s:10:\\\"MessageBus\\\";s:5:\\\"class\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\MessageBus\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:8:\\\"dispatch\\\";s:4:\\\"file\\\";s:85:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/TraceableMessageBus.php\\\";s:4:\\\"line\\\";i:41;s:4:\\\"args\\\";a:0:{}}i:21;a:8:{s:9:\\\"namespace\\\";s:27:\\\"Symfony\\\\Component\\\\Messenger\\\";s:11:\\\"short_class\\\";s:19:\\\"TraceableMessageBus\\\";s:5:\\\"class\\\";s:47:\\\"Symfony\\\\Component\\\\Messenger\\\\TraceableMessageBus\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:8:\\\"dispatch\\\";s:4:\\\"file\\\";s:84:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/RoutableMessageBus.php\\\";s:4:\\\"line\\\";i:54;s:4:\\\"args\\\";a:0:{}}i:22;a:8:{s:9:\\\"namespace\\\";s:27:\\\"Symfony\\\\Component\\\\Messenger\\\";s:11:\\\"short_class\\\";s:18:\\\"RoutableMessageBus\\\";s:5:\\\"class\\\";s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\RoutableMessageBus\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:8:\\\"dispatch\\\";s:4:\\\"file\\\";s:72:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Worker.php\\\";s:4:\\\"line\\\";i:114;s:4:\\\"args\\\";a:0:{}}i:23;a:8:{s:9:\\\"namespace\\\";s:27:\\\"Symfony\\\\Component\\\\Messenger\\\";s:11:\\\"short_class\\\";s:6:\\\"Worker\\\";s:5:\\\"class\\\";s:34:\\\"Symfony\\\\Component\\\\Messenger\\\\Worker\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:13:\\\"handleMessage\\\";s:4:\\\"file\\\";s:72:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Worker.php\\\";s:4:\\\"line\\\";i:77;s:4:\\\"args\\\";a:0:{}}i:24;a:8:{s:9:\\\"namespace\\\";s:27:\\\"Symfony\\\\Component\\\\Messenger\\\";s:11:\\\"short_class\\\";s:6:\\\"Worker\\\";s:5:\\\"class\\\";s:34:\\\"Symfony\\\\Component\\\\Messenger\\\\Worker\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:3:\\\"run\\\";s:4:\\\"file\\\";s:96:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Command/ConsumeMessagesCommand.php\\\";s:4:\\\"line\\\";i:197;s:4:\\\"args\\\";a:0:{}}i:25;a:8:{s:9:\\\"namespace\\\";s:35:\\\"Symfony\\\\Component\\\\Messenger\\\\Command\\\";s:11:\\\"short_class\\\";s:22:\\\"ConsumeMessagesCommand\\\";s:5:\\\"class\\\";s:58:\\\"Symfony\\\\Component\\\\Messenger\\\\Command\\\\ConsumeMessagesCommand\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:7:\\\"execute\\\";s:4:\\\"file\\\";s:79:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Command/Command.php\\\";s:4:\\\"line\\\";i:256;s:4:\\\"args\\\";a:0:{}}i:26;a:8:{s:9:\\\"namespace\\\";s:33:\\\"Symfony\\\\Component\\\\Console\\\\Command\\\";s:11:\\\"short_class\\\";s:7:\\\"Command\\\";s:5:\\\"class\\\";s:41:\\\"Symfony\\\\Component\\\\Console\\\\Command\\\\Command\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:3:\\\"run\\\";s:4:\\\"file\\\";s:75:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Application.php\\\";s:4:\\\"line\\\";i:989;s:4:\\\"args\\\";a:0:{}}i:27;a:8:{s:9:\\\"namespace\\\";s:25:\\\"Symfony\\\\Component\\\\Console\\\";s:11:\\\"short_class\\\";s:11:\\\"Application\\\";s:5:\\\"class\\\";s:37:\\\"Symfony\\\\Component\\\\Console\\\\Application\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:12:\\\"doRunCommand\\\";s:4:\\\"file\\\";s:92:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/framework-bundle/Console/Application.php\\\";s:4:\\\"line\\\";i:96;s:4:\\\"args\\\";a:0:{}}i:28;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Bundle\\\\FrameworkBundle\\\\Console\\\";s:11:\\\"short_class\\\";s:11:\\\"Application\\\";s:5:\\\"class\\\";s:50:\\\"Symfony\\\\Bundle\\\\FrameworkBundle\\\\Console\\\\Application\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:12:\\\"doRunCommand\\\";s:4:\\\"file\\\";s:75:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Application.php\\\";s:4:\\\"line\\\";i:290;s:4:\\\"args\\\";a:0:{}}i:29;a:8:{s:9:\\\"namespace\\\";s:25:\\\"Symfony\\\\Component\\\\Console\\\";s:11:\\\"short_class\\\";s:11:\\\"Application\\\";s:5:\\\"class\\\";s:37:\\\"Symfony\\\\Component\\\\Console\\\\Application\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:5:\\\"doRun\\\";s:4:\\\"file\\\";s:92:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/framework-bundle/Console/Application.php\\\";s:4:\\\"line\\\";i:82;s:4:\\\"args\\\";a:0:{}}i:30;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Bundle\\\\FrameworkBundle\\\\Console\\\";s:11:\\\"short_class\\\";s:11:\\\"Application\\\";s:5:\\\"class\\\";s:50:\\\"Symfony\\\\Bundle\\\\FrameworkBundle\\\\Console\\\\Application\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:5:\\\"doRun\\\";s:4:\\\"file\\\";s:75:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Application.php\\\";s:4:\\\"line\\\";i:166;s:4:\\\"args\\\";a:0:{}}i:31;a:8:{s:9:\\\"namespace\\\";s:25:\\\"Symfony\\\\Component\\\\Console\\\";s:11:\\\"short_class\\\";s:11:\\\"Application\\\";s:5:\\\"class\\\";s:37:\\\"Symfony\\\\Component\\\\Console\\\\Application\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:3:\\\"run\\\";s:4:\\\"file\\\";s:48:\\\"/home/massoud/www/Symfony/Newsletter/bin/console\\\";s:4:\\\"line\\\";i:43;s:4:\\\"args\\\";a:0:{}}}s:72:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0traceAsString\\\";s:5068:\\\"#0 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/SendMessageMiddleware.php(74): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\HandleMessageMiddleware->handle()\n#1 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/FailedMessageProcessingMiddleware.php(34): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\SendMessageMiddleware->handle()\n#2 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/DispatchAfterCurrentBusMiddleware.php(61): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\FailedMessageProcessingMiddleware->handle()\n#3 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/RejectRedeliveredMessageMiddleware.php(48): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\DispatchAfterCurrentBusMiddleware->handle()\n#4 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/AddBusNameStampMiddleware.php(37): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\RejectRedeliveredMessageMiddleware->handle()\n#5 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/TraceableMiddleware.php(43): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\AddBusNameStampMiddleware->handle()\n#6 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/MessageBus.php(77): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\TraceableMiddleware->handle()\n#7 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/TraceableMessageBus.php(41): Symfony\\\\Component\\\\Messenger\\\\MessageBus->dispatch()\n#8 /home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Mailer.php(54): Symfony\\\\Component\\\\Messenger\\\\TraceableMessageBus->dispatch()\n#9 /home/massoud/www/Symfony/Newsletter/src/Service/SendNewsletterService.php(29): Symfony\\\\Component\\\\Mailer\\\\Mailer->send()\n#10 /home/massoud/www/Symfony/Newsletter/src/MessageHandler/SendNewsletterMessageHandler.php(31): App\\\\Service\\\\SendNewsletterService->send()\n#11 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/HandleMessageMiddleware.php(63): App\\\\MessageHandler\\\\SendNewsletterMessageHandler->__invoke()\n#12 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/SendMessageMiddleware.php(74): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\HandleMessageMiddleware->handle()\n#13 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/FailedMessageProcessingMiddleware.php(34): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\SendMessageMiddleware->handle()\n#14 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/DispatchAfterCurrentBusMiddleware.php(68): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\FailedMessageProcessingMiddleware->handle()\n#15 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/RejectRedeliveredMessageMiddleware.php(48): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\DispatchAfterCurrentBusMiddleware->handle()\n#16 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/AddBusNameStampMiddleware.php(37): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\RejectRedeliveredMessageMiddleware->handle()\n#17 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/TraceableMiddleware.php(43): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\AddBusNameStampMiddleware->handle()\n#18 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/MessageBus.php(77): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\TraceableMiddleware->handle()\n#19 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/TraceableMessageBus.php(41): Symfony\\\\Component\\\\Messenger\\\\MessageBus->dispatch()\n#20 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/RoutableMessageBus.php(54): Symfony\\\\Component\\\\Messenger\\\\TraceableMessageBus->dispatch()\n#21 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Worker.php(114): Symfony\\\\Component\\\\Messenger\\\\RoutableMessageBus->dispatch()\n#22 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Worker.php(77): Symfony\\\\Component\\\\Messenger\\\\Worker->handleMessage()\n#23 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Command/ConsumeMessagesCommand.php(197): Symfony\\\\Component\\\\Messenger\\\\Worker->run()\n#24 /home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Command/Command.php(256): Symfony\\\\Component\\\\Messenger\\\\Command\\\\ConsumeMessagesCommand->execute()\n#25 /home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Application.php(989): Symfony\\\\Component\\\\Console\\\\Command\\\\Command->run()\n#26 /home/massoud/www/Symfony/Newsletter/vendor/symfony/framework-bundle/Console/Application.php(96): Symfony\\\\Component\\\\Console\\\\Application->doRunCommand()\n#27 /home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Application.php(290): Symfony\\\\Bundle\\\\FrameworkBundle\\\\Console\\\\Application->doRunCommand()\n#28 /home/massoud/www/Symfony/Newsletter/vendor/symfony/framework-bundle/Console/Application.php(82): Symfony\\\\Component\\\\Console\\\\Application->doRun()\n#29 /home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Application.php(166): Symfony\\\\Bundle\\\\FrameworkBundle\\\\Console\\\\Application->doRun()\n#30 /home/massoud/www/Symfony/Newsletter/bin/console(43): Symfony\\\\Component\\\\Console\\\\Application->run()\n#31 {main}\\\";s:64:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0class\\\";s:60:\\\"Symfony\\\\Component\\\\Messenger\\\\Exception\\\\HandlerFailedException\\\";s:69:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0statusCode\\\";i:500;s:69:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0statusText\\\";s:21:\\\"Internal Server Error\\\";s:66:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0headers\\\";a:0:{}s:63:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0file\\\";s:100:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/HandleMessageMiddleware.php\\\";s:63:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0line\\\";i:80;s:67:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0asString\\\";N;}}}s:61:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\SentToFailureTransportStamp\\\";a:1:{i:0;O:61:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\SentToFailureTransportStamp\\\":1:{s:83:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\SentToFailureTransportStamp\\0originalReceiverName\\\";s:5:\\\"async\\\";}}s:44:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\DelayStamp\\\";a:1:{i:0;O:44:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\DelayStamp\\\":1:{s:51:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\DelayStamp\\0delay\\\";i:0;}}s:49:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\RedeliveryStamp\\\";a:1:{i:0;O:49:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\RedeliveryStamp\\\":4:{s:61:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\RedeliveryStamp\\0retryCount\\\";i:0;s:64:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\RedeliveryStamp\\0redeliveredAt\\\";O:17:\\\"DateTimeImmutable\\\":3:{s:4:\\\"date\\\";s:26:\\\"2024-01-10 13:30:56.980648\\\";s:13:\\\"timezone_type\\\";i:3;s:8:\\\"timezone\\\";s:3:\\\"UTC\\\";}s:67:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\RedeliveryStamp\\0exceptionMessage\\\";N;s:67:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\RedeliveryStamp\\0flattenException\\\";N;}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"failed","4":"2024-01-10 13:30:56","5":"2024-01-10 13:30:56"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?)","params":{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:6:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}s:57:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\TransportMessageIdStamp\\\";a:1:{i:0;O:57:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\TransportMessageIdStamp\\\":1:{s:61:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\TransportMessageIdStamp\\0id\\\";i:10;}}s:51:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\ErrorDetailsStamp\\\";a:1:{i:0;O:51:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\ErrorDetailsStamp\\\":4:{s:67:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\ErrorDetailsStamp\\0exceptionClass\\\";s:60:\\\"Symfony\\\\Component\\\\Messenger\\\\Exception\\\\HandlerFailedException\\\";s:66:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\ErrorDetailsStamp\\0exceptionCode\\\";i:421;s:69:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\ErrorDetailsStamp\\0exceptionMessage\\\";s:97:\\\"Expected response code \\\"250\\\" but got code \\\"421\\\", with message \\\"421 Timeout - closing connection\\\".\\\";s:69:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\ErrorDetailsStamp\\0flattenException\\\";O:57:\\\"Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\\":12:{s:66:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0message\\\";s:97:\\\"Expected response code \\\"250\\\" but got code \\\"421\\\", with message \\\"421 Timeout - closing connection\\\".\\\";s:63:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0code\\\";i:421;s:67:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0previous\\\";O:57:\\\"Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\\":12:{s:66:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0message\\\";s:97:\\\"Expected response code \\\"250\\\" but got code \\\"421\\\", with message \\\"421 Timeout - closing connection\\\".\\\";s:63:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0code\\\";i:421;s:67:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0previous\\\";N;s:64:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0trace\\\";a:40:{i:0;a:8:{s:9:\\\"namespace\\\";s:0:\\\"\\\";s:11:\\\"short_class\\\";s:0:\\\"\\\";s:5:\\\"class\\\";s:0:\\\"\\\";s:4:\\\"type\\\";s:0:\\\"\\\";s:8:\\\"function\\\";s:0:\\\"\\\";s:4:\\\"file\\\";s:91:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Transport/Smtp/SmtpTransport.php\\\";s:4:\\\"line\\\";i:306;s:4:\\\"args\\\";a:0:{}}i:1;a:8:{s:9:\\\"namespace\\\";s:39:\\\"Symfony\\\\Component\\\\Mailer\\\\Transport\\\\Smtp\\\";s:11:\\\"short_class\\\";s:13:\\\"SmtpTransport\\\";s:5:\\\"class\\\";s:53:\\\"Symfony\\\\Component\\\\Mailer\\\\Transport\\\\Smtp\\\\SmtpTransport\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:18:\\\"assertResponseCode\\\";s:4:\\\"file\\\";s:91:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Transport/Smtp/SmtpTransport.php\\\";s:4:\\\"line\\\";i:180;s:4:\\\"args\\\";a:0:{}}i:2;a:8:{s:9:\\\"namespace\\\";s:39:\\\"Symfony\\\\Component\\\\Mailer\\\\Transport\\\\Smtp\\\";s:11:\\\"short_class\\\";s:13:\\\"SmtpTransport\\\";s:5:\\\"class\\\";s:53:\\\"Symfony\\\\Component\\\\Mailer\\\\Transport\\\\Smtp\\\\SmtpTransport\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:14:\\\"executeCommand\\\";s:4:\\\"file\\\";s:91:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Transport/Smtp/SmtpTransport.php\\\";s:4:\\\"line\\\";i:233;s:4:\\\"args\\\";a:0:{}}i:3;a:8:{s:9:\\\"namespace\\\";s:39:\\\"Symfony\\\\Component\\\\Mailer\\\\Transport\\\\Smtp\\\";s:11:\\\"short_class\\\";s:13:\\\"SmtpTransport\\\";s:5:\\\"class\\\";s:53:\\\"Symfony\\\\Component\\\\Mailer\\\\Transport\\\\Smtp\\\\SmtpTransport\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:17:\\\"doMailFromCommand\\\";s:4:\\\"file\\\";s:91:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Transport/Smtp/SmtpTransport.php\\\";s:4:\\\"line\\\";i:197;s:4:\\\"args\\\";a:0:{}}i:4;a:8:{s:9:\\\"namespace\\\";s:39:\\\"Symfony\\\\Component\\\\Mailer\\\\Transport\\\\Smtp\\\";s:11:\\\"short_class\\\";s:13:\\\"SmtpTransport\\\";s:5:\\\"class\\\";s:53:\\\"Symfony\\\\Component\\\\Mailer\\\\Transport\\\\Smtp\\\\SmtpTransport\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"doSend\\\";s:4:\\\"file\\\";s:90:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Transport/AbstractTransport.php\\\";s:4:\\\"line\\\";i:68;s:4:\\\"args\\\";a:0:{}}i:5;a:8:{s:9:\\\"namespace\\\";s:34:\\\"Symfony\\\\Component\\\\Mailer\\\\Transport\\\";s:11:\\\"short_class\\\";s:17:\\\"AbstractTransport\\\";s:5:\\\"class\\\";s:52:\\\"Symfony\\\\Component\\\\Mailer\\\\Transport\\\\AbstractTransport\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:4:\\\"send\\\";s:4:\\\"file\\\";s:91:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Transport/Smtp/SmtpTransport.php\\\";s:4:\\\"line\\\";i:132;s:4:\\\"args\\\";a:0:{}}i:6;a:8:{s:9:\\\"namespace\\\";s:39:\\\"Symfony\\\\Component\\\\Mailer\\\\Transport\\\\Smtp\\\";s:11:\\\"short_class\\\";s:13:\\\"SmtpTransport\\\";s:5:\\\"class\\\";s:53:\\\"Symfony\\\\Component\\\\Mailer\\\\Transport\\\\Smtp\\\\SmtpTransport\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:4:\\\"send\\\";s:4:\\\"file\\\";s:83:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Transport/Transports.php\\\";s:4:\\\"line\\\";i:51;s:4:\\\"args\\\";a:0:{}}i:7;a:8:{s:9:\\\"namespace\\\";s:34:\\\"Symfony\\\\Component\\\\Mailer\\\\Transport\\\";s:11:\\\"short_class\\\";s:10:\\\"Transports\\\";s:5:\\\"class\\\";s:45:\\\"Symfony\\\\Component\\\\Mailer\\\\Transport\\\\Transports\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:4:\\\"send\\\";s:4:\\\"file\\\";s:87:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Messenger/MessageHandler.php\\\";s:4:\\\"line\\\";i:31;s:4:\\\"args\\\";a:0:{}}i:8;a:8:{s:9:\\\"namespace\\\";s:34:\\\"Symfony\\\\Component\\\\Mailer\\\\Messenger\\\";s:11:\\\"short_class\\\";s:14:\\\"MessageHandler\\\";s:5:\\\"class\\\";s:49:\\\"Symfony\\\\Component\\\\Mailer\\\\Messenger\\\\MessageHandler\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:8:\\\"__invoke\\\";s:4:\\\"file\\\";s:100:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/HandleMessageMiddleware.php\\\";s:4:\\\"line\\\";i:63;s:4:\\\"args\\\";a:0:{}}i:9;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:23:\\\"HandleMessageMiddleware\\\";s:5:\\\"class\\\";s:62:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\HandleMessageMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:98:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/SendMessageMiddleware.php\\\";s:4:\\\"line\\\";i:74;s:4:\\\"args\\\";a:0:{}}i:10;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:21:\\\"SendMessageMiddleware\\\";s:5:\\\"class\\\";s:60:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\SendMessageMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:110:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/FailedMessageProcessingMiddleware.php\\\";s:4:\\\"line\\\";i:34;s:4:\\\"args\\\";a:0:{}}i:11;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:33:\\\"FailedMessageProcessingMiddleware\\\";s:5:\\\"class\\\";s:72:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\FailedMessageProcessingMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:110:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/DispatchAfterCurrentBusMiddleware.php\\\";s:4:\\\"line\\\";i:61;s:4:\\\"args\\\";a:0:{}}i:12;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:33:\\\"DispatchAfterCurrentBusMiddleware\\\";s:5:\\\"class\\\";s:72:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\DispatchAfterCurrentBusMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:111:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/RejectRedeliveredMessageMiddleware.php\\\";s:4:\\\"line\\\";i:48;s:4:\\\"args\\\";a:0:{}}i:13;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:34:\\\"RejectRedeliveredMessageMiddleware\\\";s:5:\\\"class\\\";s:73:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\RejectRedeliveredMessageMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:102:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/AddBusNameStampMiddleware.php\\\";s:4:\\\"line\\\";i:37;s:4:\\\"args\\\";a:0:{}}i:14;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:25:\\\"AddBusNameStampMiddleware\\\";s:5:\\\"class\\\";s:64:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\AddBusNameStampMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:96:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/TraceableMiddleware.php\\\";s:4:\\\"line\\\";i:43;s:4:\\\"args\\\";a:0:{}}i:15;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:19:\\\"TraceableMiddleware\\\";s:5:\\\"class\\\";s:58:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\TraceableMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:76:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/MessageBus.php\\\";s:4:\\\"line\\\";i:77;s:4:\\\"args\\\";a:0:{}}i:16;a:8:{s:9:\\\"namespace\\\";s:27:\\\"Symfony\\\\Component\\\\Messenger\\\";s:11:\\\"short_class\\\";s:10:\\\"MessageBus\\\";s:5:\\\"class\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\MessageBus\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:8:\\\"dispatch\\\";s:4:\\\"file\\\";s:85:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/TraceableMessageBus.php\\\";s:4:\\\"line\\\";i:41;s:4:\\\"args\\\";a:0:{}}i:17;a:8:{s:9:\\\"namespace\\\";s:27:\\\"Symfony\\\\Component\\\\Messenger\\\";s:11:\\\"short_class\\\";s:19:\\\"TraceableMessageBus\\\";s:5:\\\"class\\\";s:47:\\\"Symfony\\\\Component\\\\Messenger\\\\TraceableMessageBus\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:8:\\\"dispatch\\\";s:4:\\\"file\\\";s:69:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Mailer.php\\\";s:4:\\\"line\\\";i:54;s:4:\\\"args\\\";a:0:{}}i:18;a:8:{s:9:\\\"namespace\\\";s:24:\\\"Symfony\\\\Component\\\\Mailer\\\";s:11:\\\"short_class\\\";s:6:\\\"Mailer\\\";s:5:\\\"class\\\";s:31:\\\"Symfony\\\\Component\\\\Mailer\\\\Mailer\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:4:\\\"send\\\";s:4:\\\"file\\\";s:74:\\\"/home/massoud/www/Symfony/Newsletter/src/Service/SendNewsletterService.php\\\";s:4:\\\"line\\\";i:29;s:4:\\\"args\\\";a:0:{}}i:19;a:8:{s:9:\\\"namespace\\\";s:11:\\\"App\\\\Service\\\";s:11:\\\"short_class\\\";s:21:\\\"SendNewsletterService\\\";s:5:\\\"class\\\";s:33:\\\"App\\\\Service\\\\SendNewsletterService\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:4:\\\"send\\\";s:4:\\\"file\\\";s:88:\\\"/home/massoud/www/Symfony/Newsletter/src/MessageHandler/SendNewsletterMessageHandler.php\\\";s:4:\\\"line\\\";i:31;s:4:\\\"args\\\";a:0:{}}i:20;a:8:{s:9:\\\"namespace\\\";s:18:\\\"App\\\\MessageHandler\\\";s:11:\\\"short_class\\\";s:28:\\\"SendNewsletterMessageHandler\\\";s:5:\\\"class\\\";s:47:\\\"App\\\\MessageHandler\\\\SendNewsletterMessageHandler\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:8:\\\"__invoke\\\";s:4:\\\"file\\\";s:100:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/HandleMessageMiddleware.php\\\";s:4:\\\"line\\\";i:63;s:4:\\\"args\\\";a:0:{}}i:21;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:23:\\\"HandleMessageMiddleware\\\";s:5:\\\"class\\\";s:62:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\HandleMessageMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:98:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/SendMessageMiddleware.php\\\";s:4:\\\"line\\\";i:74;s:4:\\\"args\\\";a:0:{}}i:22;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:21:\\\"SendMessageMiddleware\\\";s:5:\\\"class\\\";s:60:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\SendMessageMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:110:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/FailedMessageProcessingMiddleware.php\\\";s:4:\\\"line\\\";i:34;s:4:\\\"args\\\";a:0:{}}i:23;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:33:\\\"FailedMessageProcessingMiddleware\\\";s:5:\\\"class\\\";s:72:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\FailedMessageProcessingMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:110:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/DispatchAfterCurrentBusMiddleware.php\\\";s:4:\\\"line\\\";i:68;s:4:\\\"args\\\";a:0:{}}i:24;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:33:\\\"DispatchAfterCurrentBusMiddleware\\\";s:5:\\\"class\\\";s:72:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\DispatchAfterCurrentBusMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:111:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/RejectRedeliveredMessageMiddleware.php\\\";s:4:\\\"line\\\";i:48;s:4:\\\"args\\\";a:0:{}}i:25;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:34:\\\"RejectRedeliveredMessageMiddleware\\\";s:5:\\\"class\\\";s:73:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\RejectRedeliveredMessageMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:102:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/AddBusNameStampMiddleware.php\\\";s:4:\\\"line\\\";i:37;s:4:\\\"args\\\";a:0:{}}i:26;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:25:\\\"AddBusNameStampMiddleware\\\";s:5:\\\"class\\\";s:64:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\AddBusNameStampMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:96:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/TraceableMiddleware.php\\\";s:4:\\\"line\\\";i:43;s:4:\\\"args\\\";a:0:{}}i:27;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:19:\\\"TraceableMiddleware\\\";s:5:\\\"class\\\";s:58:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\TraceableMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:76:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/MessageBus.php\\\";s:4:\\\"line\\\";i:77;s:4:\\\"args\\\";a:0:{}}i:28;a:8:{s:9:\\\"namespace\\\";s:27:\\\"Symfony\\\\Component\\\\Messenger\\\";s:11:\\\"short_class\\\";s:10:\\\"MessageBus\\\";s:5:\\\"class\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\MessageBus\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:8:\\\"dispatch\\\";s:4:\\\"file\\\";s:85:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/TraceableMessageBus.php\\\";s:4:\\\"line\\\";i:41;s:4:\\\"args\\\";a:0:{}}i:29;a:8:{s:9:\\\"namespace\\\";s:27:\\\"Symfony\\\\Component\\\\Messenger\\\";s:11:\\\"short_class\\\";s:19:\\\"TraceableMessageBus\\\";s:5:\\\"class\\\";s:47:\\\"Symfony\\\\Component\\\\Messenger\\\\TraceableMessageBus\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:8:\\\"dispatch\\\";s:4:\\\"file\\\";s:84:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/RoutableMessageBus.php\\\";s:4:\\\"line\\\";i:54;s:4:\\\"args\\\";a:0:{}}i:30;a:8:{s:9:\\\"namespace\\\";s:27:\\\"Symfony\\\\Component\\\\Messenger\\\";s:11:\\\"short_class\\\";s:18:\\\"RoutableMessageBus\\\";s:5:\\\"class\\\";s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\RoutableMessageBus\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:8:\\\"dispatch\\\";s:4:\\\"file\\\";s:72:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Worker.php\\\";s:4:\\\"line\\\";i:114;s:4:\\\"args\\\";a:0:{}}i:31;a:8:{s:9:\\\"namespace\\\";s:27:\\\"Symfony\\\\Component\\\\Messenger\\\";s:11:\\\"short_class\\\";s:6:\\\"Worker\\\";s:5:\\\"class\\\";s:34:\\\"Symfony\\\\Component\\\\Messenger\\\\Worker\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:13:\\\"handleMessage\\\";s:4:\\\"file\\\";s:72:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Worker.php\\\";s:4:\\\"line\\\";i:77;s:4:\\\"args\\\";a:0:{}}i:32;a:8:{s:9:\\\"namespace\\\";s:27:\\\"Symfony\\\\Component\\\\Messenger\\\";s:11:\\\"short_class\\\";s:6:\\\"Worker\\\";s:5:\\\"class\\\";s:34:\\\"Symfony\\\\Component\\\\Messenger\\\\Worker\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:3:\\\"run\\\";s:4:\\\"file\\\";s:96:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Command/ConsumeMessagesCommand.php\\\";s:4:\\\"line\\\";i:197;s:4:\\\"args\\\";a:0:{}}i:33;a:8:{s:9:\\\"namespace\\\";s:35:\\\"Symfony\\\\Component\\\\Messenger\\\\Command\\\";s:11:\\\"short_class\\\";s:22:\\\"ConsumeMessagesCommand\\\";s:5:\\\"class\\\";s:58:\\\"Symfony\\\\Component\\\\Messenger\\\\Command\\\\ConsumeMessagesCommand\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:7:\\\"execute\\\";s:4:\\\"file\\\";s:79:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Command/Command.php\\\";s:4:\\\"line\\\";i:256;s:4:\\\"args\\\";a:0:{}}i:34;a:8:{s:9:\\\"namespace\\\";s:33:\\\"Symfony\\\\Component\\\\Console\\\\Command\\\";s:11:\\\"short_class\\\";s:7:\\\"Command\\\";s:5:\\\"class\\\";s:41:\\\"Symfony\\\\Component\\\\Console\\\\Command\\\\Command\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:3:\\\"run\\\";s:4:\\\"file\\\";s:75:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Application.php\\\";s:4:\\\"line\\\";i:989;s:4:\\\"args\\\";a:0:{}}i:35;a:8:{s:9:\\\"namespace\\\";s:25:\\\"Symfony\\\\Component\\\\Console\\\";s:11:\\\"short_class\\\";s:11:\\\"Application\\\";s:5:\\\"class\\\";s:37:\\\"Symfony\\\\Component\\\\Console\\\\Application\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:12:\\\"doRunCommand\\\";s:4:\\\"file\\\";s:92:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/framework-bundle/Console/Application.php\\\";s:4:\\\"line\\\";i:96;s:4:\\\"args\\\";a:0:{}}i:36;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Bundle\\\\FrameworkBundle\\\\Console\\\";s:11:\\\"short_class\\\";s:11:\\\"Application\\\";s:5:\\\"class\\\";s:50:\\\"Symfony\\\\Bundle\\\\FrameworkBundle\\\\Console\\\\Application\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:12:\\\"doRunCommand\\\";s:4:\\\"file\\\";s:75:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Application.php\\\";s:4:\\\"line\\\";i:290;s:4:\\\"args\\\";a:0:{}}i:37;a:8:{s:9:\\\"namespace\\\";s:25:\\\"Symfony\\\\Component\\\\Console\\\";s:11:\\\"short_class\\\";s:11:\\\"Application\\\";s:5:\\\"class\\\";s:37:\\\"Symfony\\\\Component\\\\Console\\\\Application\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:5:\\\"doRun\\\";s:4:\\\"file\\\";s:92:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/framework-bundle/Console/Application.php\\\";s:4:\\\"line\\\";i:82;s:4:\\\"args\\\";a:0:{}}i:38;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Bundle\\\\FrameworkBundle\\\\Console\\\";s:11:\\\"short_class\\\";s:11:\\\"Application\\\";s:5:\\\"class\\\";s:50:\\\"Symfony\\\\Bundle\\\\FrameworkBundle\\\\Console\\\\Application\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:5:\\\"doRun\\\";s:4:\\\"file\\\";s:75:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Application.php\\\";s:4:\\\"line\\\";i:166;s:4:\\\"args\\\";a:0:{}}i:39;a:8:{s:9:\\\"namespace\\\";s:25:\\\"Symfony\\\\Component\\\\Console\\\";s:11:\\\"short_class\\\";s:11:\\\"Application\\\";s:5:\\\"class\\\";s:37:\\\"Symfony\\\\Component\\\\Console\\\\Application\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:3:\\\"run\\\";s:4:\\\"file\\\";s:48:\\\"/home/massoud/www/Symfony/Newsletter/bin/console\\\";s:4:\\\"line\\\";i:43;s:4:\\\"args\\\";a:0:{}}}s:72:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0traceAsString\\\";s:6402:\\\"#0 /home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Transport/Smtp/SmtpTransport.php(180): Symfony\\\\Component\\\\Mailer\\\\Transport\\\\Smtp\\\\SmtpTransport->assertResponseCode()\n#1 /home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Transport/Smtp/SmtpTransport.php(233): Symfony\\\\Component\\\\Mailer\\\\Transport\\\\Smtp\\\\SmtpTransport->executeCommand()\n#2 /home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Transport/Smtp/SmtpTransport.php(197): Symfony\\\\Component\\\\Mailer\\\\Transport\\\\Smtp\\\\SmtpTransport->doMailFromCommand()\n#3 /home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Transport/AbstractTransport.php(68): Symfony\\\\Component\\\\Mailer\\\\Transport\\\\Smtp\\\\SmtpTransport->doSend()\n#4 /home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Transport/Smtp/SmtpTransport.php(132): Symfony\\\\Component\\\\Mailer\\\\Transport\\\\AbstractTransport->send()\n#5 /home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Transport/Transports.php(51): Symfony\\\\Component\\\\Mailer\\\\Transport\\\\Smtp\\\\SmtpTransport->send()\n#6 /home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Messenger/MessageHandler.php(31): Symfony\\\\Component\\\\Mailer\\\\Transport\\\\Transports->send()\n#7 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/HandleMessageMiddleware.php(63): Symfony\\\\Component\\\\Mailer\\\\Messenger\\\\MessageHandler->__invoke()\n#8 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/SendMessageMiddleware.php(74): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\HandleMessageMiddleware->handle()\n#9 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/FailedMessageProcessingMiddleware.php(34): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\SendMessageMiddleware->handle()\n#10 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/DispatchAfterCurrentBusMiddleware.php(61): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\FailedMessageProcessingMiddleware->handle()\n#11 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/RejectRedeliveredMessageMiddleware.php(48): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\DispatchAfterCurrentBusMiddleware->handle()\n#12 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/AddBusNameStampMiddleware.php(37): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\RejectRedeliveredMessageMiddleware->handle()\n#13 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/TraceableMiddleware.php(43): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\AddBusNameStampMiddleware->handle()\n#14 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/MessageBus.php(77): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\TraceableMiddleware->handle()\n#15 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/TraceableMessageBus.php(41): Symfony\\\\Component\\\\Messenger\\\\MessageBus->dispatch()\n#16 /home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Mailer.php(54): Symfony\\\\Component\\\\Messenger\\\\TraceableMessageBus->dispatch()\n#17 /home/massoud/www/Symfony/Newsletter/src/Service/SendNewsletterService.php(29): Symfony\\\\Component\\\\Mailer\\\\Mailer->send()\n#18 /home/massoud/www/Symfony/Newsletter/src/MessageHandler/SendNewsletterMessageHandler.php(31): App\\\\Service\\\\SendNewsletterService->send()\n#19 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/HandleMessageMiddleware.php(63): App\\\\MessageHandler\\\\SendNewsletterMessageHandler->__invoke()\n#20 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/SendMessageMiddleware.php(74): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\HandleMessageMiddleware->handle()\n#21 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/FailedMessageProcessingMiddleware.php(34): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\SendMessageMiddleware->handle()\n#22 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/DispatchAfterCurrentBusMiddleware.php(68): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\FailedMessageProcessingMiddleware->handle()\n#23 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/RejectRedeliveredMessageMiddleware.php(48): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\DispatchAfterCurrentBusMiddleware->handle()\n#24 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/AddBusNameStampMiddleware.php(37): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\RejectRedeliveredMessageMiddleware->handle()\n#25 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/TraceableMiddleware.php(43): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\AddBusNameStampMiddleware->handle()\n#26 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/MessageBus.php(77): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\TraceableMiddleware->handle()\n#27 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/TraceableMessageBus.php(41): Symfony\\\\Component\\\\Messenger\\\\MessageBus->dispatch()\n#28 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/RoutableMessageBus.php(54): Symfony\\\\Component\\\\Messenger\\\\TraceableMessageBus->dispatch()\n#29 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Worker.php(114): Symfony\\\\Component\\\\Messenger\\\\RoutableMessageBus->dispatch()\n#30 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Worker.php(77): Symfony\\\\Component\\\\Messenger\\\\Worker->handleMessage()\n#31 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Command/ConsumeMessagesCommand.php(197): Symfony\\\\Component\\\\Messenger\\\\Worker->run()\n#32 /home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Command/Command.php(256): Symfony\\\\Component\\\\Messenger\\\\Command\\\\ConsumeMessagesCommand->execute()\n#33 /home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Application.php(989): Symfony\\\\Component\\\\Console\\\\Command\\\\Command->run()\n#34 /home/massoud/www/Symfony/Newsletter/vendor/symfony/framework-bundle/Console/Application.php(96): Symfony\\\\Component\\\\Console\\\\Application->doRunCommand()\n#35 /home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Application.php(290): Symfony\\\\Bundle\\\\FrameworkBundle\\\\Console\\\\Application->doRunCommand()\n#36 /home/massoud/www/Symfony/Newsletter/vendor/symfony/framework-bundle/Console/Application.php(82): Symfony\\\\Component\\\\Console\\\\Application->doRun()\n#37 /home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Application.php(166): Symfony\\\\Bundle\\\\FrameworkBundle\\\\Console\\\\Application->doRun()\n#38 /home/massoud/www/Symfony/Newsletter/bin/console(43): Symfony\\\\Component\\\\Console\\\\Application->run()\n#39 {main}\\\";s:64:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0class\\\";s:53:\\\"Symfony\\\\Component\\\\Mailer\\\\Exception\\\\TransportException\\\";s:69:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0statusCode\\\";i:500;s:69:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0statusText\\\";s:21:\\\"Internal Server Error\\\";s:66:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0headers\\\";a:0:{}s:63:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0file\\\";s:91:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Transport/Smtp/SmtpTransport.php\\\";s:63:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0line\\\";i:306;s:67:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0asString\\\";N;}s:64:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0trace\\\";a:32:{i:0;a:8:{s:9:\\\"namespace\\\";s:0:\\\"\\\";s:11:\\\"short_class\\\";s:0:\\\"\\\";s:5:\\\"class\\\";s:0:\\\"\\\";s:4:\\\"type\\\";s:0:\\\"\\\";s:8:\\\"function\\\";s:0:\\\"\\\";s:4:\\\"file\\\";s:100:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/HandleMessageMiddleware.php\\\";s:4:\\\"line\\\";i:80;s:4:\\\"args\\\";a:0:{}}i:1;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:23:\\\"HandleMessageMiddleware\\\";s:5:\\\"class\\\";s:62:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\HandleMessageMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:98:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/SendMessageMiddleware.php\\\";s:4:\\\"line\\\";i:74;s:4:\\\"args\\\";a:0:{}}i:2;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:21:\\\"SendMessageMiddleware\\\";s:5:\\\"class\\\";s:60:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\SendMessageMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:110:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/FailedMessageProcessingMiddleware.php\\\";s:4:\\\"line\\\";i:34;s:4:\\\"args\\\";a:0:{}}i:3;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:33:\\\"FailedMessageProcessingMiddleware\\\";s:5:\\\"class\\\";s:72:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\FailedMessageProcessingMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:110:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/DispatchAfterCurrentBusMiddleware.php\\\";s:4:\\\"line\\\";i:61;s:4:\\\"args\\\";a:0:{}}i:4;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:33:\\\"DispatchAfterCurrentBusMiddleware\\\";s:5:\\\"class\\\";s:72:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\DispatchAfterCurrentBusMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:111:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/RejectRedeliveredMessageMiddleware.php\\\";s:4:\\\"line\\\";i:48;s:4:\\\"args\\\";a:0:{}}i:5;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:34:\\\"RejectRedeliveredMessageMiddleware\\\";s:5:\\\"class\\\";s:73:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\RejectRedeliveredMessageMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:102:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/AddBusNameStampMiddleware.php\\\";s:4:\\\"line\\\";i:37;s:4:\\\"args\\\";a:0:{}}i:6;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:25:\\\"AddBusNameStampMiddleware\\\";s:5:\\\"class\\\";s:64:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\AddBusNameStampMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:96:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/TraceableMiddleware.php\\\";s:4:\\\"line\\\";i:43;s:4:\\\"args\\\";a:0:{}}i:7;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:19:\\\"TraceableMiddleware\\\";s:5:\\\"class\\\";s:58:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\TraceableMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:76:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/MessageBus.php\\\";s:4:\\\"line\\\";i:77;s:4:\\\"args\\\";a:0:{}}i:8;a:8:{s:9:\\\"namespace\\\";s:27:\\\"Symfony\\\\Component\\\\Messenger\\\";s:11:\\\"short_class\\\";s:10:\\\"MessageBus\\\";s:5:\\\"class\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\MessageBus\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:8:\\\"dispatch\\\";s:4:\\\"file\\\";s:85:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/TraceableMessageBus.php\\\";s:4:\\\"line\\\";i:41;s:4:\\\"args\\\";a:0:{}}i:9;a:8:{s:9:\\\"namespace\\\";s:27:\\\"Symfony\\\\Component\\\\Messenger\\\";s:11:\\\"short_class\\\";s:19:\\\"TraceableMessageBus\\\";s:5:\\\"class\\\";s:47:\\\"Symfony\\\\Component\\\\Messenger\\\\TraceableMessageBus\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:8:\\\"dispatch\\\";s:4:\\\"file\\\";s:69:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Mailer.php\\\";s:4:\\\"line\\\";i:54;s:4:\\\"args\\\";a:0:{}}i:10;a:8:{s:9:\\\"namespace\\\";s:24:\\\"Symfony\\\\Component\\\\Mailer\\\";s:11:\\\"short_class\\\";s:6:\\\"Mailer\\\";s:5:\\\"class\\\";s:31:\\\"Symfony\\\\Component\\\\Mailer\\\\Mailer\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:4:\\\"send\\\";s:4:\\\"file\\\";s:74:\\\"/home/massoud/www/Symfony/Newsletter/src/Service/SendNewsletterService.php\\\";s:4:\\\"line\\\";i:29;s:4:\\\"args\\\";a:0:{}}i:11;a:8:{s:9:\\\"namespace\\\";s:11:\\\"App\\\\Service\\\";s:11:\\\"short_class\\\";s:21:\\\"SendNewsletterService\\\";s:5:\\\"class\\\";s:33:\\\"App\\\\Service\\\\SendNewsletterService\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:4:\\\"send\\\";s:4:\\\"file\\\";s:88:\\\"/home/massoud/www/Symfony/Newsletter/src/MessageHandler/SendNewsletterMessageHandler.php\\\";s:4:\\\"line\\\";i:31;s:4:\\\"args\\\";a:0:{}}i:12;a:8:{s:9:\\\"namespace\\\";s:18:\\\"App\\\\MessageHandler\\\";s:11:\\\"short_class\\\";s:28:\\\"SendNewsletterMessageHandler\\\";s:5:\\\"class\\\";s:47:\\\"App\\\\MessageHandler\\\\SendNewsletterMessageHandler\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:8:\\\"__invoke\\\";s:4:\\\"file\\\";s:100:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/HandleMessageMiddleware.php\\\";s:4:\\\"line\\\";i:63;s:4:\\\"args\\\";a:0:{}}i:13;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:23:\\\"HandleMessageMiddleware\\\";s:5:\\\"class\\\";s:62:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\HandleMessageMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:98:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/SendMessageMiddleware.php\\\";s:4:\\\"line\\\";i:74;s:4:\\\"args\\\";a:0:{}}i:14;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:21:\\\"SendMessageMiddleware\\\";s:5:\\\"class\\\";s:60:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\SendMessageMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:110:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/FailedMessageProcessingMiddleware.php\\\";s:4:\\\"line\\\";i:34;s:4:\\\"args\\\";a:0:{}}i:15;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:33:\\\"FailedMessageProcessingMiddleware\\\";s:5:\\\"class\\\";s:72:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\FailedMessageProcessingMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:110:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/DispatchAfterCurrentBusMiddleware.php\\\";s:4:\\\"line\\\";i:68;s:4:\\\"args\\\";a:0:{}}i:16;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:33:\\\"DispatchAfterCurrentBusMiddleware\\\";s:5:\\\"class\\\";s:72:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\DispatchAfterCurrentBusMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:111:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/RejectRedeliveredMessageMiddleware.php\\\";s:4:\\\"line\\\";i:48;s:4:\\\"args\\\";a:0:{}}i:17;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:34:\\\"RejectRedeliveredMessageMiddleware\\\";s:5:\\\"class\\\";s:73:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\RejectRedeliveredMessageMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:102:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/AddBusNameStampMiddleware.php\\\";s:4:\\\"line\\\";i:37;s:4:\\\"args\\\";a:0:{}}i:18;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:25:\\\"AddBusNameStampMiddleware\\\";s:5:\\\"class\\\";s:64:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\AddBusNameStampMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:96:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/TraceableMiddleware.php\\\";s:4:\\\"line\\\";i:43;s:4:\\\"args\\\";a:0:{}}i:19;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\";s:11:\\\"short_class\\\";s:19:\\\"TraceableMiddleware\\\";s:5:\\\"class\\\";s:58:\\\"Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\TraceableMiddleware\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:6:\\\"handle\\\";s:4:\\\"file\\\";s:76:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/MessageBus.php\\\";s:4:\\\"line\\\";i:77;s:4:\\\"args\\\";a:0:{}}i:20;a:8:{s:9:\\\"namespace\\\";s:27:\\\"Symfony\\\\Component\\\\Messenger\\\";s:11:\\\"short_class\\\";s:10:\\\"MessageBus\\\";s:5:\\\"class\\\";s:38:\\\"Symfony\\\\Component\\\\Messenger\\\\MessageBus\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:8:\\\"dispatch\\\";s:4:\\\"file\\\";s:85:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/TraceableMessageBus.php\\\";s:4:\\\"line\\\";i:41;s:4:\\\"args\\\";a:0:{}}i:21;a:8:{s:9:\\\"namespace\\\";s:27:\\\"Symfony\\\\Component\\\\Messenger\\\";s:11:\\\"short_class\\\";s:19:\\\"TraceableMessageBus\\\";s:5:\\\"class\\\";s:47:\\\"Symfony\\\\Component\\\\Messenger\\\\TraceableMessageBus\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:8:\\\"dispatch\\\";s:4:\\\"file\\\";s:84:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/RoutableMessageBus.php\\\";s:4:\\\"line\\\";i:54;s:4:\\\"args\\\";a:0:{}}i:22;a:8:{s:9:\\\"namespace\\\";s:27:\\\"Symfony\\\\Component\\\\Messenger\\\";s:11:\\\"short_class\\\";s:18:\\\"RoutableMessageBus\\\";s:5:\\\"class\\\";s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\RoutableMessageBus\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:8:\\\"dispatch\\\";s:4:\\\"file\\\";s:72:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Worker.php\\\";s:4:\\\"line\\\";i:114;s:4:\\\"args\\\";a:0:{}}i:23;a:8:{s:9:\\\"namespace\\\";s:27:\\\"Symfony\\\\Component\\\\Messenger\\\";s:11:\\\"short_class\\\";s:6:\\\"Worker\\\";s:5:\\\"class\\\";s:34:\\\"Symfony\\\\Component\\\\Messenger\\\\Worker\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:13:\\\"handleMessage\\\";s:4:\\\"file\\\";s:72:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Worker.php\\\";s:4:\\\"line\\\";i:77;s:4:\\\"args\\\";a:0:{}}i:24;a:8:{s:9:\\\"namespace\\\";s:27:\\\"Symfony\\\\Component\\\\Messenger\\\";s:11:\\\"short_class\\\";s:6:\\\"Worker\\\";s:5:\\\"class\\\";s:34:\\\"Symfony\\\\Component\\\\Messenger\\\\Worker\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:3:\\\"run\\\";s:4:\\\"file\\\";s:96:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Command/ConsumeMessagesCommand.php\\\";s:4:\\\"line\\\";i:197;s:4:\\\"args\\\";a:0:{}}i:25;a:8:{s:9:\\\"namespace\\\";s:35:\\\"Symfony\\\\Component\\\\Messenger\\\\Command\\\";s:11:\\\"short_class\\\";s:22:\\\"ConsumeMessagesCommand\\\";s:5:\\\"class\\\";s:58:\\\"Symfony\\\\Component\\\\Messenger\\\\Command\\\\ConsumeMessagesCommand\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:7:\\\"execute\\\";s:4:\\\"file\\\";s:79:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Command/Command.php\\\";s:4:\\\"line\\\";i:256;s:4:\\\"args\\\";a:0:{}}i:26;a:8:{s:9:\\\"namespace\\\";s:33:\\\"Symfony\\\\Component\\\\Console\\\\Command\\\";s:11:\\\"short_class\\\";s:7:\\\"Command\\\";s:5:\\\"class\\\";s:41:\\\"Symfony\\\\Component\\\\Console\\\\Command\\\\Command\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:3:\\\"run\\\";s:4:\\\"file\\\";s:75:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Application.php\\\";s:4:\\\"line\\\";i:989;s:4:\\\"args\\\";a:0:{}}i:27;a:8:{s:9:\\\"namespace\\\";s:25:\\\"Symfony\\\\Component\\\\Console\\\";s:11:\\\"short_class\\\";s:11:\\\"Application\\\";s:5:\\\"class\\\";s:37:\\\"Symfony\\\\Component\\\\Console\\\\Application\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:12:\\\"doRunCommand\\\";s:4:\\\"file\\\";s:92:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/framework-bundle/Console/Application.php\\\";s:4:\\\"line\\\";i:96;s:4:\\\"args\\\";a:0:{}}i:28;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Bundle\\\\FrameworkBundle\\\\Console\\\";s:11:\\\"short_class\\\";s:11:\\\"Application\\\";s:5:\\\"class\\\";s:50:\\\"Symfony\\\\Bundle\\\\FrameworkBundle\\\\Console\\\\Application\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:12:\\\"doRunCommand\\\";s:4:\\\"file\\\";s:75:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Application.php\\\";s:4:\\\"line\\\";i:290;s:4:\\\"args\\\";a:0:{}}i:29;a:8:{s:9:\\\"namespace\\\";s:25:\\\"Symfony\\\\Component\\\\Console\\\";s:11:\\\"short_class\\\";s:11:\\\"Application\\\";s:5:\\\"class\\\";s:37:\\\"Symfony\\\\Component\\\\Console\\\\Application\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:5:\\\"doRun\\\";s:4:\\\"file\\\";s:92:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/framework-bundle/Console/Application.php\\\";s:4:\\\"line\\\";i:82;s:4:\\\"args\\\";a:0:{}}i:30;a:8:{s:9:\\\"namespace\\\";s:38:\\\"Symfony\\\\Bundle\\\\FrameworkBundle\\\\Console\\\";s:11:\\\"short_class\\\";s:11:\\\"Application\\\";s:5:\\\"class\\\";s:50:\\\"Symfony\\\\Bundle\\\\FrameworkBundle\\\\Console\\\\Application\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:5:\\\"doRun\\\";s:4:\\\"file\\\";s:75:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Application.php\\\";s:4:\\\"line\\\";i:166;s:4:\\\"args\\\";a:0:{}}i:31;a:8:{s:9:\\\"namespace\\\";s:25:\\\"Symfony\\\\Component\\\\Console\\\";s:11:\\\"short_class\\\";s:11:\\\"Application\\\";s:5:\\\"class\\\";s:37:\\\"Symfony\\\\Component\\\\Console\\\\Application\\\";s:4:\\\"type\\\";s:2:\\\"->\\\";s:8:\\\"function\\\";s:3:\\\"run\\\";s:4:\\\"file\\\";s:48:\\\"/home/massoud/www/Symfony/Newsletter/bin/console\\\";s:4:\\\"line\\\";i:43;s:4:\\\"args\\\";a:0:{}}}s:72:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0traceAsString\\\";s:5068:\\\"#0 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/SendMessageMiddleware.php(74): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\HandleMessageMiddleware->handle()\n#1 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/FailedMessageProcessingMiddleware.php(34): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\SendMessageMiddleware->handle()\n#2 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/DispatchAfterCurrentBusMiddleware.php(61): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\FailedMessageProcessingMiddleware->handle()\n#3 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/RejectRedeliveredMessageMiddleware.php(48): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\DispatchAfterCurrentBusMiddleware->handle()\n#4 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/AddBusNameStampMiddleware.php(37): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\RejectRedeliveredMessageMiddleware->handle()\n#5 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/TraceableMiddleware.php(43): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\AddBusNameStampMiddleware->handle()\n#6 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/MessageBus.php(77): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\TraceableMiddleware->handle()\n#7 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/TraceableMessageBus.php(41): Symfony\\\\Component\\\\Messenger\\\\MessageBus->dispatch()\n#8 /home/massoud/www/Symfony/Newsletter/vendor/symfony/mailer/Mailer.php(54): Symfony\\\\Component\\\\Messenger\\\\TraceableMessageBus->dispatch()\n#9 /home/massoud/www/Symfony/Newsletter/src/Service/SendNewsletterService.php(29): Symfony\\\\Component\\\\Mailer\\\\Mailer->send()\n#10 /home/massoud/www/Symfony/Newsletter/src/MessageHandler/SendNewsletterMessageHandler.php(31): App\\\\Service\\\\SendNewsletterService->send()\n#11 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/HandleMessageMiddleware.php(63): App\\\\MessageHandler\\\\SendNewsletterMessageHandler->__invoke()\n#12 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/SendMessageMiddleware.php(74): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\HandleMessageMiddleware->handle()\n#13 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/FailedMessageProcessingMiddleware.php(34): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\SendMessageMiddleware->handle()\n#14 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/DispatchAfterCurrentBusMiddleware.php(68): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\FailedMessageProcessingMiddleware->handle()\n#15 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/RejectRedeliveredMessageMiddleware.php(48): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\DispatchAfterCurrentBusMiddleware->handle()\n#16 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/AddBusNameStampMiddleware.php(37): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\RejectRedeliveredMessageMiddleware->handle()\n#17 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/TraceableMiddleware.php(43): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\AddBusNameStampMiddleware->handle()\n#18 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/MessageBus.php(77): Symfony\\\\Component\\\\Messenger\\\\Middleware\\\\TraceableMiddleware->handle()\n#19 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/TraceableMessageBus.php(41): Symfony\\\\Component\\\\Messenger\\\\MessageBus->dispatch()\n#20 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/RoutableMessageBus.php(54): Symfony\\\\Component\\\\Messenger\\\\TraceableMessageBus->dispatch()\n#21 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Worker.php(114): Symfony\\\\Component\\\\Messenger\\\\RoutableMessageBus->dispatch()\n#22 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Worker.php(77): Symfony\\\\Component\\\\Messenger\\\\Worker->handleMessage()\n#23 /home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Command/ConsumeMessagesCommand.php(197): Symfony\\\\Component\\\\Messenger\\\\Worker->run()\n#24 /home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Command/Command.php(256): Symfony\\\\Component\\\\Messenger\\\\Command\\\\ConsumeMessagesCommand->execute()\n#25 /home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Application.php(989): Symfony\\\\Component\\\\Console\\\\Command\\\\Command->run()\n#26 /home/massoud/www/Symfony/Newsletter/vendor/symfony/framework-bundle/Console/Application.php(96): Symfony\\\\Component\\\\Console\\\\Application->doRunCommand()\n#27 /home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Application.php(290): Symfony\\\\Bundle\\\\FrameworkBundle\\\\Console\\\\Application->doRunCommand()\n#28 /home/massoud/www/Symfony/Newsletter/vendor/symfony/framework-bundle/Console/Application.php(82): Symfony\\\\Component\\\\Console\\\\Application->doRun()\n#29 /home/massoud/www/Symfony/Newsletter/vendor/symfony/console/Application.php(166): Symfony\\\\Bundle\\\\FrameworkBundle\\\\Console\\\\Application->doRun()\n#30 /home/massoud/www/Symfony/Newsletter/bin/console(43): Symfony\\\\Component\\\\Console\\\\Application->run()\n#31 {main}\\\";s:64:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0class\\\";s:60:\\\"Symfony\\\\Component\\\\Messenger\\\\Exception\\\\HandlerFailedException\\\";s:69:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0statusCode\\\";i:500;s:69:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0statusText\\\";s:21:\\\"Internal Server Error\\\";s:66:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0headers\\\";a:0:{}s:63:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0file\\\";s:100:\\\"/home/massoud/www/Symfony/Newsletter/vendor/symfony/messenger/Middleware/HandleMessageMiddleware.php\\\";s:63:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0line\\\";i:80;s:67:\\\"\\0Symfony\\\\Component\\\\ErrorHandler\\\\Exception\\\\FlattenException\\0asString\\\";N;}}}s:61:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\SentToFailureTransportStamp\\\";a:1:{i:0;O:61:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\SentToFailureTransportStamp\\\":1:{s:83:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\SentToFailureTransportStamp\\0originalReceiverName\\\";s:5:\\\"async\\\";}}s:44:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\DelayStamp\\\";a:1:{i:0;O:44:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\DelayStamp\\\":1:{s:51:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\DelayStamp\\0delay\\\";i:0;}}s:49:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\RedeliveryStamp\\\";a:1:{i:0;O:49:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\RedeliveryStamp\\\":4:{s:61:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\RedeliveryStamp\\0retryCount\\\";i:0;s:64:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\RedeliveryStamp\\0redeliveredAt\\\";O:17:\\\"DateTimeImmutable\\\":3:{s:4:\\\"date\\\";s:26:\\\"2024-01-10 13:30:56.980648\\\";s:13:\\\"timezone_type\\\";i:3;s:8:\\\"timezone\\\";s:3:\\\"UTC\\\";}s:67:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\RedeliveryStamp\\0exceptionMessage\\\";N;s:67:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\RedeliveryStamp\\0flattenException\\\";N;}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"failed","4":"2024-01-10 13:30:56","5":"2024-01-10 13:30:56"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2024-01-10T13:30:57.021135+00:00] doctrine.DEBUG: Executing statement: DELETE FROM messenger_messages WHERE id = ? (parameters: array{"1":"10"}, types: array{"1":2}) {"sql":"DELETE FROM messenger_messages WHERE id = ?","params":{"1":"10"},"types":{"1":2}} []
[2024-01-10T13:30:57.027088+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:57.028100+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:57","2":"2024-01-10 13:30:57","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:57","2":"2024-01-10 13:30:57","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:57.029849+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:58.031137+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:58.032131+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:58","2":"2024-01-10 13:30:58","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:58","2":"2024-01-10 13:30:58","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:58.033836+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:30:59.035098+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:30:59.035743+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:30:59","2":"2024-01-10 13:30:59","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:30:59","2":"2024-01-10 13:30:59","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:30:59.036442+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:00.037115+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:00.038461+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:00","2":"2024-01-10 13:31:00","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:00","2":"2024-01-10 13:31:00","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:00.040771+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:01.042210+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:01.043595+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:01","2":"2024-01-10 13:31:01","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:01","2":"2024-01-10 13:31:01","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:01.045182+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:02.046674+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:02.047911+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:02","2":"2024-01-10 13:31:02","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:02","2":"2024-01-10 13:31:02","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:02.049617+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:03.050845+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:03.051971+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:03","2":"2024-01-10 13:31:03","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:03","2":"2024-01-10 13:31:03","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:03.053583+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:04.054784+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:04.055896+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:04","2":"2024-01-10 13:31:04","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:04","2":"2024-01-10 13:31:04","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:04.058175+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:05.059527+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:05.060759+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:05","2":"2024-01-10 13:31:05","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:05","2":"2024-01-10 13:31:05","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:05.062641+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:06.063990+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:06.064834+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:06","2":"2024-01-10 13:31:06","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:06","2":"2024-01-10 13:31:06","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:06.066340+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:07.067538+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:07.068590+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:07","2":"2024-01-10 13:31:07","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:07","2":"2024-01-10 13:31:07","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:07.070074+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:08.071457+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:08.072866+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:08","2":"2024-01-10 13:31:08","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:08","2":"2024-01-10 13:31:08","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:08.074446+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:09.075993+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:09.077439+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:09","2":"2024-01-10 13:31:09","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:09","2":"2024-01-10 13:31:09","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:09.079340+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:10.081029+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:10.082010+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:10","2":"2024-01-10 13:31:10","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:10","2":"2024-01-10 13:31:10","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:10.083827+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:11.085338+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:11.086686+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:11","2":"2024-01-10 13:31:11","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:11","2":"2024-01-10 13:31:11","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:11.088768+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:12.090217+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:12.091659+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:12","2":"2024-01-10 13:31:12","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:12","2":"2024-01-10 13:31:12","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:12.093616+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:13.095007+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:13.096257+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:13","2":"2024-01-10 13:31:13","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:13","2":"2024-01-10 13:31:13","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:13.098195+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:14.099508+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:14.100143+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:14","2":"2024-01-10 13:31:14","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:14","2":"2024-01-10 13:31:14","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:14.100878+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:15.101489+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:15.102527+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:15","2":"2024-01-10 13:31:15","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:15","2":"2024-01-10 13:31:15","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:15.104111+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:16.105250+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:16.106526+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:16","2":"2024-01-10 13:31:16","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:16","2":"2024-01-10 13:31:16","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:16.108488+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:17.110183+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:17.111206+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:17","2":"2024-01-10 13:31:17","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:17","2":"2024-01-10 13:31:17","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:17.112755+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:18.114056+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:18.117079+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:18","2":"2024-01-10 13:31:18","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:18","2":"2024-01-10 13:31:18","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:18.119783+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:19.122297+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:19.122930+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:19","2":"2024-01-10 13:31:19","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:19","2":"2024-01-10 13:31:19","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:19.123776+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:20.124495+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:20.125404+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:20","2":"2024-01-10 13:31:20","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:20","2":"2024-01-10 13:31:20","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:20.126631+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:21.127877+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:21.129654+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:21","2":"2024-01-10 13:31:21","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:21","2":"2024-01-10 13:31:21","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:21.131366+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:22.132655+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:22.134189+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:22","2":"2024-01-10 13:31:22","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:22","2":"2024-01-10 13:31:22","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:22.136897+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:23.139139+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:23.140430+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:23","2":"2024-01-10 13:31:23","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:23","2":"2024-01-10 13:31:23","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:23.142249+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:24.143678+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:24.144721+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:24","2":"2024-01-10 13:31:24","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:24","2":"2024-01-10 13:31:24","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:24.146248+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:25.147429+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:25.148481+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:25","2":"2024-01-10 13:31:25","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:25","2":"2024-01-10 13:31:25","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:25.149973+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:26.150977+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:26.151694+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:26","2":"2024-01-10 13:31:26","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:26","2":"2024-01-10 13:31:26","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:26.152465+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:27.153163+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:27.154501+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:27","2":"2024-01-10 13:31:27","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:27","2":"2024-01-10 13:31:27","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:27.157593+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:28.159466+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:28.160565+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:28","2":"2024-01-10 13:31:28","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:28","2":"2024-01-10 13:31:28","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:28.161993+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:29.163194+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:29.164442+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:29","2":"2024-01-10 13:31:29","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:29","2":"2024-01-10 13:31:29","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:29.166104+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:30.167393+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:30.169745+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:30","2":"2024-01-10 13:31:30","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:30","2":"2024-01-10 13:31:30","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:30.171931+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:31.173358+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:31.174594+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:31","2":"2024-01-10 13:31:31","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:31","2":"2024-01-10 13:31:31","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:31.176575+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:32.177969+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:32.179030+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:32","2":"2024-01-10 13:31:32","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:32","2":"2024-01-10 13:31:32","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:32.180806+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:33.182219+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:33.183854+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:33","2":"2024-01-10 13:31:33","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:33","2":"2024-01-10 13:31:33","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:33.186514+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:34.188334+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:34.188741+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:34","2":"2024-01-10 13:31:34","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:34","2":"2024-01-10 13:31:34","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:34.189200+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:35.189678+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:35.190608+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:35","2":"2024-01-10 13:31:35","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:35","2":"2024-01-10 13:31:35","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:35.191913+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:36.192826+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:36.194104+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:36","2":"2024-01-10 13:31:36","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:36","2":"2024-01-10 13:31:36","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:36.195965+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:37.197473+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:37.198734+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:37","2":"2024-01-10 13:31:37","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:37","2":"2024-01-10 13:31:37","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:37.200689+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:38.202185+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:38.203762+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:38","2":"2024-01-10 13:31:38","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:38","2":"2024-01-10 13:31:38","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:38.206600+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:39.208258+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:39.209633+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:39","2":"2024-01-10 13:31:39","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:39","2":"2024-01-10 13:31:39","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:39.211526+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:40.212898+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:40.214062+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:40","2":"2024-01-10 13:31:40","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:40","2":"2024-01-10 13:31:40","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:40.215733+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:41.216750+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:41.217293+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:41","2":"2024-01-10 13:31:41","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:41","2":"2024-01-10 13:31:41","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:41.218117+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:42.218865+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:42.220533+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:42","2":"2024-01-10 13:31:42","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:42","2":"2024-01-10 13:31:42","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:42.222581+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:43.223936+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:43.225223+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:43","2":"2024-01-10 13:31:43","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:43","2":"2024-01-10 13:31:43","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:43.227949+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:44.229335+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:44.230537+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:44","2":"2024-01-10 13:31:44","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:44","2":"2024-01-10 13:31:44","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:44.232312+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:45.233758+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:45.234971+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:45","2":"2024-01-10 13:31:45","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:45","2":"2024-01-10 13:31:45","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:45.236702+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:46.237852+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:46.238930+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:46","2":"2024-01-10 13:31:46","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:46","2":"2024-01-10 13:31:46","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:46.240834+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:47.242390+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:47.243108+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:47","2":"2024-01-10 13:31:47","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:47","2":"2024-01-10 13:31:47","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:47.244263+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:48.245091+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:48.245423+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:48","2":"2024-01-10 13:31:48","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:48","2":"2024-01-10 13:31:48","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:48.245867+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:49.246454+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:49.247664+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:49","2":"2024-01-10 13:31:49","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:49","2":"2024-01-10 13:31:49","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:49.249484+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:49.818000+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:31:49.818883+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:31:49.819197+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:31:49.819527+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:31:49.823265+00:00] request.INFO: Matched route "newsletters_send". {"route":"newsletters_send","route_parameters":{"_route":"newsletters_send","_controller":"App\\Controller\\NewslettersController::send","id":"1"},"request_uri":"http://localhost:8001/newsletters/send/1","method":"GET"} []
[2024-01-10T13:31:49.834038+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:31:49.835557+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ? (parameters: array{"1":"1"}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ?","params":{"1":"1"},"types":{"1":1}} []
[2024-01-10T13:31:49.839718+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:31:49.841062+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:31:49.843256+00:00] messenger.INFO: Sending message App\Message\SendNewsletterMessage with async sender using Symfony\Component\Messenger\Bridge\Doctrine\Transport\DoctrineTransport {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage","alias":"async","sender":"Symfony\\Component\\Messenger\\Bridge\\Doctrine\\Transport\\DoctrineTransport"} []
[2024-01-10T13:31:49.843613+00:00] doctrine.DEBUG: Executing statement: INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?) (parameters: array{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:1:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"default","4":"2024-01-10 13:31:49","5":"2024-01-10 13:31:49"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?)","params":{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:1:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"default","4":"2024-01-10 13:31:49","5":"2024-01-10 13:31:49"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2024-01-10T13:31:49.850326+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:31:49.850491+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:31:49.850617+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:31:49.850783+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:31:49.850915+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:31:49.851040+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:31:49.852266+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:31:49.852403+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:31:49.852614+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:31:49.852714+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:31:49.853256+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:31:49.854121+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:31:49.854486+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:31:49.856844+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:31:49.857130+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:31:49.858778+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:31:49.859101+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:31:49.860672+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:31:49.860987+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:31:49.862518+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:49.864731+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:31:49.864997+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:31:49.866341+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:31:49.867364+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:31:49.881789+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:31:49.881920+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:31:49.895413+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:31:49.898870+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:31:49.898979+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:31:49.899016+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:31:49.899045+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:31:49.899425+00:00] request.INFO: Matched route "newsletters_list". {"route":"newsletters_list","route_parameters":{"_route":"newsletters_list","_controller":"App\\Controller\\NewslettersController::list"},"request_uri":"http://localhost:8001/newsletters/list","method":"GET"} []
[2024-01-10T13:31:49.901583+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:31:49.902228+00:00] doctrine.DEBUG: Executing query: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0"} []
[2024-01-10T13:31:49.904559+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:31:49.905538+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:31:49.906749+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:31:49.906820+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:31:49.906872+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:31:49.906922+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:31:49.906976+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:31:49.907013+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:31:49.907394+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:31:49.907451+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:31:49.907502+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:31:49.907541+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:31:49.907798+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:31:49.908140+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:31:49.908409+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:31:49.909684+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:31:49.909927+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:31:49.911319+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:31:49.911536+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:31:49.912457+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:31:49.912652+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:31:49.913835+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:49.916127+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:31:49.916407+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:31:49.917864+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:31:49.918534+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:31:49.934108+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:31:49.934335+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:31:49.955089+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:31:49.980048+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:31:49.980234+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:31:49.980292+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:31:49.980338+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:31:49.981068+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"a5d4b0"},"request_uri":"http://localhost:8001/_wdt/a5d4b0","method":"GET"} []
[2024-01-10T13:31:49.982356+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:31:49.982490+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:31:49.982593+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:31:49.982687+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:31:49.982770+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:31:49.982842+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:31:49.984291+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:31:49.984451+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:31:49.984553+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:31:49.984644+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:31:50.250704+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:50.251653+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:50","2":"2024-01-10 13:31:50","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:50","2":"2024-01-10 13:31:50","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:50.253433+00:00] doctrine.DEBUG: Executing statement: UPDATE messenger_messages SET delivered_at = ? WHERE id = ? (parameters: array{"1":"2024-01-10 13:31:50","2":12}, types: array{"1":2,"2":2}) {"sql":"UPDATE messenger_messages SET delivered_at = ? WHERE id = ?","params":{"1":"2024-01-10 13:31:50","2":12},"types":{"1":2,"2":2}} []
[2024-01-10T13:31:50.255064+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:50.264088+00:00] messenger.INFO: Received message App\Message\SendNewsletterMessage {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage"} []
[2024-01-10T13:31:50.265002+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:31:50.267308+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ? (parameters: array{"1":1}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ?","params":{"1":1},"types":{"1":1}} []
[2024-01-10T13:31:53.322502+00:00] messenger.INFO: Message Symfony\Component\Mailer\Messenger\SendEmailMessage handled by Symfony\Component\Mailer\Messenger\MessageHandler::__invoke {"message":{"Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage":[]},"class":"Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage","handler":"Symfony\\Component\\Mailer\\Messenger\\MessageHandler::__invoke"} []
[2024-01-10T13:31:53.323037+00:00] messenger.INFO: Message App\Message\SendNewsletterMessage handled by App\MessageHandler\SendNewsletterMessageHandler::__invoke {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage","handler":"App\\MessageHandler\\SendNewsletterMessageHandler::__invoke"} []
[2024-01-10T13:31:53.324952+00:00] messenger.INFO: App\Message\SendNewsletterMessage was handled successfully (acknowledging to transport). {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage"} []
[2024-01-10T13:31:53.325356+00:00] doctrine.DEBUG: Executing statement: DELETE FROM messenger_messages WHERE id = ? (parameters: array{"1":"12"}, types: array{"1":2}) {"sql":"DELETE FROM messenger_messages WHERE id = ?","params":{"1":"12"},"types":{"1":2}} []
[2024-01-10T13:31:53.349371+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:53.350887+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:53","2":"2024-01-10 13:31:53","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:53","2":"2024-01-10 13:31:53","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:53.354006+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:54.355025+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:54.355796+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:54","2":"2024-01-10 13:31:54","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:54","2":"2024-01-10 13:31:54","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:54.357181+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:55.358390+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:55.359394+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:55","2":"2024-01-10 13:31:55","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:55","2":"2024-01-10 13:31:55","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:55.361128+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:56.362338+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:56.362726+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:56","2":"2024-01-10 13:31:56","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:56","2":"2024-01-10 13:31:56","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:56.363288+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:57.363826+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:57.364625+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:57","2":"2024-01-10 13:31:57","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:57","2":"2024-01-10 13:31:57","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:57.365821+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:58.366895+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:58.367709+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:58","2":"2024-01-10 13:31:58","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:58","2":"2024-01-10 13:31:58","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:58.369205+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:31:59.370371+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:31:59.371656+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:31:59","2":"2024-01-10 13:31:59","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:31:59","2":"2024-01-10 13:31:59","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:31:59.373506+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:00.374843+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:00.375978+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:00","2":"2024-01-10 13:32:00","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:00","2":"2024-01-10 13:32:00","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:00.377930+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:01.379477+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:01.381119+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:01","2":"2024-01-10 13:32:01","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:01","2":"2024-01-10 13:32:01","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:01.382760+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:02.384013+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:02.385453+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:02","2":"2024-01-10 13:32:02","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:02","2":"2024-01-10 13:32:02","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:02.387598+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:03.389081+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:03.390203+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:03","2":"2024-01-10 13:32:03","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:03","2":"2024-01-10 13:32:03","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:03.391842+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:04.393239+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:04.394287+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:04","2":"2024-01-10 13:32:04","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:04","2":"2024-01-10 13:32:04","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:04.395884+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:05.397087+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:05.398129+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:05","2":"2024-01-10 13:32:05","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:05","2":"2024-01-10 13:32:05","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:05.399687+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:06.400782+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:06.401194+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:06","2":"2024-01-10 13:32:06","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:06","2":"2024-01-10 13:32:06","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:06.401762+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:07.402365+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:07.403448+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:07","2":"2024-01-10 13:32:07","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:07","2":"2024-01-10 13:32:07","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:07.405139+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:08.406285+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:08.407247+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:08","2":"2024-01-10 13:32:08","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:08","2":"2024-01-10 13:32:08","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:08.408000+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:09.408567+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:09.409099+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:09","2":"2024-01-10 13:32:09","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:09","2":"2024-01-10 13:32:09","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:09.409977+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:10.410872+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:10.412651+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:10","2":"2024-01-10 13:32:10","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:10","2":"2024-01-10 13:32:10","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:10.415414+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:11.417188+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:11.418655+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:11","2":"2024-01-10 13:32:11","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:11","2":"2024-01-10 13:32:11","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:11.420324+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:12.421677+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:12.422922+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:12","2":"2024-01-10 13:32:12","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:12","2":"2024-01-10 13:32:12","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:12.424905+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:13.426497+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:13.427813+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:13","2":"2024-01-10 13:32:13","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:13","2":"2024-01-10 13:32:13","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:13.430559+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:14.432585+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:14.433733+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:14","2":"2024-01-10 13:32:14","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:14","2":"2024-01-10 13:32:14","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:14.435464+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:15.436861+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:15.438160+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:15","2":"2024-01-10 13:32:15","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:15","2":"2024-01-10 13:32:15","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:15.440069+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:16.441659+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:16.443409+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:16","2":"2024-01-10 13:32:16","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:16","2":"2024-01-10 13:32:16","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:16.445906+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:17.448345+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:17.449044+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:17","2":"2024-01-10 13:32:17","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:17","2":"2024-01-10 13:32:17","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:17.449876+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:18.450552+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:18.452185+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:18","2":"2024-01-10 13:32:18","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:18","2":"2024-01-10 13:32:18","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:18.457260+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:19.459776+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:19.461291+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:19","2":"2024-01-10 13:32:19","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:19","2":"2024-01-10 13:32:19","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:19.463448+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:20.464944+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:20.466063+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:20","2":"2024-01-10 13:32:20","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:20","2":"2024-01-10 13:32:20","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:20.468053+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:21.469712+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:21.470825+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:21","2":"2024-01-10 13:32:21","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:21","2":"2024-01-10 13:32:21","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:21.472484+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:22.473741+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:22.474779+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:22","2":"2024-01-10 13:32:22","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:22","2":"2024-01-10 13:32:22","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:22.476478+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:23.478088+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:23.480038+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:23","2":"2024-01-10 13:32:23","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:23","2":"2024-01-10 13:32:23","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:23.482115+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:24.483530+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:24.484068+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:24","2":"2024-01-10 13:32:24","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:24","2":"2024-01-10 13:32:24","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:24.484910+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:25.485688+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:25.487068+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:25","2":"2024-01-10 13:32:25","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:25","2":"2024-01-10 13:32:25","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:25.489997+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:26.491973+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:26.493309+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:26","2":"2024-01-10 13:32:26","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:26","2":"2024-01-10 13:32:26","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:26.495100+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:27.496931+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:27.498151+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:27","2":"2024-01-10 13:32:27","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:27","2":"2024-01-10 13:32:27","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:27.499745+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:28.501039+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:28.501995+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:28","2":"2024-01-10 13:32:28","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:28","2":"2024-01-10 13:32:28","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:28.503344+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:29.504204+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:29.504980+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:29","2":"2024-01-10 13:32:29","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:29","2":"2024-01-10 13:32:29","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:29.505935+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:30.506563+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:30.506974+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:30","2":"2024-01-10 13:32:30","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:30","2":"2024-01-10 13:32:30","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:30.507412+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:31.507899+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:31.509755+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:31","2":"2024-01-10 13:32:31","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:31","2":"2024-01-10 13:32:31","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:31.512321+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:32.514921+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:32.515351+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:32","2":"2024-01-10 13:32:32","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:32","2":"2024-01-10 13:32:32","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:32.515889+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:33.516625+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:33.518360+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:33","2":"2024-01-10 13:32:33","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:33","2":"2024-01-10 13:32:33","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:33.520956+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:34.522806+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:34.523950+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:34","2":"2024-01-10 13:32:34","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:34","2":"2024-01-10 13:32:34","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:34.525600+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:35.526822+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:35.528269+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:35","2":"2024-01-10 13:32:35","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:35","2":"2024-01-10 13:32:35","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:35.533683+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:36.535525+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:36.537201+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:36","2":"2024-01-10 13:32:36","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:36","2":"2024-01-10 13:32:36","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:36.539294+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:37.540656+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:37.542009+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:37","2":"2024-01-10 13:32:37","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:37","2":"2024-01-10 13:32:37","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:37.544253+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:38.545783+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:38.547508+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:38","2":"2024-01-10 13:32:38","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:38","2":"2024-01-10 13:32:38","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:38.549218+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:39.550682+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:39.552165+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:39","2":"2024-01-10 13:32:39","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:39","2":"2024-01-10 13:32:39","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:39.554293+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:40.555725+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:40.556183+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:40","2":"2024-01-10 13:32:40","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:40","2":"2024-01-10 13:32:40","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:40.557004+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:41.557530+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:41.558240+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:41","2":"2024-01-10 13:32:41","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:41","2":"2024-01-10 13:32:41","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:41.559050+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:42.559781+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:42.561027+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:42","2":"2024-01-10 13:32:42","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:42","2":"2024-01-10 13:32:42","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:42.563027+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:43.564486+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:43.565653+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:43","2":"2024-01-10 13:32:43","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:43","2":"2024-01-10 13:32:43","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:43.566970+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:44.568138+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:44.569713+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:44","2":"2024-01-10 13:32:44","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:44","2":"2024-01-10 13:32:44","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:44.571687+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:45.573180+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:45.573839+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:45","2":"2024-01-10 13:32:45","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:45","2":"2024-01-10 13:32:45","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:45.574895+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:46.575901+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:46.578073+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:46","2":"2024-01-10 13:32:46","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:46","2":"2024-01-10 13:32:46","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:46.579831+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:47.580885+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:47.581348+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:47","2":"2024-01-10 13:32:47","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:47","2":"2024-01-10 13:32:47","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:47.582040+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:48.582712+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:48.583608+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:48","2":"2024-01-10 13:32:48","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:48","2":"2024-01-10 13:32:48","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:48.585635+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:49.586764+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:49.588488+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:49","2":"2024-01-10 13:32:49","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:49","2":"2024-01-10 13:32:49","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:49.591398+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:50.593182+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:50.593654+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:50","2":"2024-01-10 13:32:50","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:50","2":"2024-01-10 13:32:50","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:50.594473+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:51.595158+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:51.596176+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:51","2":"2024-01-10 13:32:51","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:51","2":"2024-01-10 13:32:51","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:51.597630+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:52.598655+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:52.599131+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:52","2":"2024-01-10 13:32:52","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:52","2":"2024-01-10 13:32:52","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:52.599670+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:53.600182+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:53.601578+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:53","2":"2024-01-10 13:32:53","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:53","2":"2024-01-10 13:32:53","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:53.603504+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:54.605257+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:54.607629+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:54","2":"2024-01-10 13:32:54","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:54","2":"2024-01-10 13:32:54","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:54.610362+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:55.611891+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:55.612978+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:55","2":"2024-01-10 13:32:55","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:55","2":"2024-01-10 13:32:55","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:55.614794+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:56.616153+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:56.616967+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:56","2":"2024-01-10 13:32:56","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:56","2":"2024-01-10 13:32:56","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:56.618414+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:57.619679+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:57.621983+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:57","2":"2024-01-10 13:32:57","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:57","2":"2024-01-10 13:32:57","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:57.624557+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:58.626192+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:58.626744+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:58","2":"2024-01-10 13:32:58","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:58","2":"2024-01-10 13:32:58","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:58.627478+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:32:59.628105+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:32:59.629217+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:32:59","2":"2024-01-10 13:32:59","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:32:59","2":"2024-01-10 13:32:59","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:32:59.630738+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:00.631928+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:00.633481+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:00","2":"2024-01-10 13:33:00","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:00","2":"2024-01-10 13:33:00","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:00.635976+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:01.637471+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:01.639051+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:01","2":"2024-01-10 13:33:01","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:01","2":"2024-01-10 13:33:01","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:01.641549+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:02.643107+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:02.645294+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:02","2":"2024-01-10 13:33:02","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:02","2":"2024-01-10 13:33:02","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:02.647521+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:03.648785+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:03.650792+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:03","2":"2024-01-10 13:33:03","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:03","2":"2024-01-10 13:33:03","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:03.652633+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:04.653966+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:04.654299+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:04","2":"2024-01-10 13:33:04","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:04","2":"2024-01-10 13:33:04","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:04.654786+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:05.655381+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:05.655690+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:05","2":"2024-01-10 13:33:05","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:05","2":"2024-01-10 13:33:05","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:05.656103+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:06.656492+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:06.657460+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:06","2":"2024-01-10 13:33:06","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:06","2":"2024-01-10 13:33:06","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:06.658692+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:07.659711+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:07.660635+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:07","2":"2024-01-10 13:33:07","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:07","2":"2024-01-10 13:33:07","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:07.662016+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:08.663057+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:08.663954+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:08","2":"2024-01-10 13:33:08","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:08","2":"2024-01-10 13:33:08","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:08.664823+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:09.665627+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:09.667055+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:09","2":"2024-01-10 13:33:09","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:09","2":"2024-01-10 13:33:09","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:09.669536+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:10.671190+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:10.672709+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:10","2":"2024-01-10 13:33:10","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:10","2":"2024-01-10 13:33:10","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:10.675682+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:11.678332+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:11.679592+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:11","2":"2024-01-10 13:33:11","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:11","2":"2024-01-10 13:33:11","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:11.681411+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:12.682611+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:12.683421+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:12","2":"2024-01-10 13:33:12","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:12","2":"2024-01-10 13:33:12","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:12.684728+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:13.685833+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:13.687091+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:13","2":"2024-01-10 13:33:13","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:13","2":"2024-01-10 13:33:13","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:13.689103+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:14.690769+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:14.692266+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:14","2":"2024-01-10 13:33:14","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:14","2":"2024-01-10 13:33:14","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:14.694509+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:15.695821+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:15.697107+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:15","2":"2024-01-10 13:33:15","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:15","2":"2024-01-10 13:33:15","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:15.698997+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:16.700426+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:16.701689+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:16","2":"2024-01-10 13:33:16","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:16","2":"2024-01-10 13:33:16","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:16.703539+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:17.705641+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:17.706527+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:17","2":"2024-01-10 13:33:17","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:17","2":"2024-01-10 13:33:17","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:17.707908+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:18.709345+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:18.710257+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:18","2":"2024-01-10 13:33:18","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:18","2":"2024-01-10 13:33:18","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:18.711962+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:19.713223+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:19.714663+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:19","2":"2024-01-10 13:33:19","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:19","2":"2024-01-10 13:33:19","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:19.716664+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:20.718276+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:20.719561+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:20","2":"2024-01-10 13:33:20","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:20","2":"2024-01-10 13:33:20","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:20.721783+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:21.724178+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:21.725967+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:21","2":"2024-01-10 13:33:21","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:21","2":"2024-01-10 13:33:21","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:21.727852+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:22.729268+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:22.730793+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:22","2":"2024-01-10 13:33:22","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:22","2":"2024-01-10 13:33:22","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:22.733125+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:23.734670+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:23.735462+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:23","2":"2024-01-10 13:33:23","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:23","2":"2024-01-10 13:33:23","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:23.736799+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:24.738489+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:24.739821+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:24","2":"2024-01-10 13:33:24","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:24","2":"2024-01-10 13:33:24","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:24.742001+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:25.743394+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:25.744205+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:25","2":"2024-01-10 13:33:25","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:25","2":"2024-01-10 13:33:25","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:25.745524+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:26.746561+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:26.748138+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:26","2":"2024-01-10 13:33:26","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:26","2":"2024-01-10 13:33:26","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:26.750651+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:27.752257+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:27.753733+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:27","2":"2024-01-10 13:33:27","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:27","2":"2024-01-10 13:33:27","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:27.755921+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:28.757440+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:28.757744+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:28","2":"2024-01-10 13:33:28","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:28","2":"2024-01-10 13:33:28","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:28.758218+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:29.758734+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:29.760867+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:29","2":"2024-01-10 13:33:29","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:29","2":"2024-01-10 13:33:29","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:29.763680+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:30.765894+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:30.767173+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:30","2":"2024-01-10 13:33:30","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:30","2":"2024-01-10 13:33:30","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:30.769400+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:31.771780+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:31.773045+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:31","2":"2024-01-10 13:33:31","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:31","2":"2024-01-10 13:33:31","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:31.774980+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:32.777311+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:32.779008+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:32","2":"2024-01-10 13:33:32","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:32","2":"2024-01-10 13:33:32","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:32.781735+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:33.783376+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:33.785013+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:33","2":"2024-01-10 13:33:33","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:33","2":"2024-01-10 13:33:33","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:33.788459+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:33.813233+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:33:33.813613+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:33:33.813734+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:33:33.813821+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:33:33.816716+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Routing\RouteCollection::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Routing\\RouteCollection::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/routing/RouteCollection.php:59)"} []
[2024-01-10T13:33:33.817040+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Routing\RouteCollection::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Routing\\RouteCollection::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/routing/RouteCollection.php:69)"} []
[2024-01-10T13:33:33.840952+00:00] request.INFO: Matched route "newsletters_send". {"route":"newsletters_send","route_parameters":{"_route":"newsletters_send","_controller":"App\\Controller\\NewslettersController::send","id":"1"},"request_uri":"http://localhost:8001/newsletters/send/1","method":"GET"} []
[2024-01-10T13:33:33.847007+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:33:33.848120+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ? (parameters: array{"1":"1"}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ?","params":{"1":"1"},"types":{"1":1}} []
[2024-01-10T13:33:33.851514+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:33:33.852806+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:33:33.854605+00:00] messenger.INFO: Sending message App\Message\SendNewsletterMessage with async sender using Symfony\Component\Messenger\Bridge\Doctrine\Transport\DoctrineTransport {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage","alias":"async","sender":"Symfony\\Component\\Messenger\\Bridge\\Doctrine\\Transport\\DoctrineTransport"} []
[2024-01-10T13:33:33.854883+00:00] doctrine.DEBUG: Executing statement: INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?) (parameters: array{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:1:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"default","4":"2024-01-10 13:33:33","5":"2024-01-10 13:33:33"}, types: array{"1":2,"2":2,"3":2,"4":2,"5":2}) {"sql":"INSERT INTO messenger_messages (body, headers, queue_name, created_at, available_at) VALUES(?, ?, ?, ?, ?)","params":{"1":"O:36:\\\"Symfony\\\\Component\\\\Messenger\\\\Envelope\\\":2:{s:44:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0stamps\\\";a:1:{s:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\";a:1:{i:0;O:46:\\\"Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\\":1:{s:55:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Stamp\\\\BusNameStamp\\0busName\\\";s:21:\\\"messenger.bus.default\\\";}}}s:45:\\\"\\0Symfony\\\\Component\\\\Messenger\\\\Envelope\\0message\\\";O:33:\\\"App\\\\Message\\\\SendNewsletterMessage\\\":2:{s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0userId\\\";i:2;s:41:\\\"\\0App\\\\Message\\\\SendNewsletterMessage\\0newsId\\\";i:1;}}","2":"[]","3":"default","4":"2024-01-10 13:33:33","5":"2024-01-10 13:33:33"},"types":{"1":2,"2":2,"3":2,"4":2,"5":2}} []
[2024-01-10T13:33:33.862833+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:33:33.862972+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:33:33.863066+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:33:33.863153+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:33:33.863257+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:33:33.863349+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:33:33.864504+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:33:33.864592+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:33:33.864733+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:33:33.864798+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:33:33.865354+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:33:33.866440+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:33:33.866803+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:33:33.868455+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:33:33.868714+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:33:33.870341+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:33:33.870605+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:33:33.871589+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:33:33.871810+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:33:33.873182+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:33.875116+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:33:33.875490+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:33:33.877347+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:33:33.878726+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:33:33.897846+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:33:33.898001+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:33:33.917938+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:33:33.922036+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:33:33.922161+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:33:33.922218+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:33:33.922269+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:33:33.922874+00:00] request.INFO: Matched route "newsletters_list". {"route":"newsletters_list","route_parameters":{"_route":"newsletters_list","_controller":"App\\Controller\\NewslettersController::list"},"request_uri":"http://localhost:8001/newsletters/list","method":"GET"} []
[2024-01-10T13:33:33.925652+00:00] doctrine.INFO: Connecting with parameters array{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"} {"params":{"url":"<redacted>","driver":"pdo_mysql","host":"127.0.0.1","port":3306,"user":"root","password":"<redacted>","driverOptions":[],"defaultTableOptions":{"collation":"utf8mb4_unicode_ci"},"dbname":"newsletter_symfony","serverVersion":"5.7","charset":"utf8mb4"}} []
[2024-01-10T13:33:33.926280+00:00] doctrine.DEBUG: Executing query: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0"} []
[2024-01-10T13:33:33.928487+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2 FROM categories t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:33:33.929369+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 INNER JOIN users_categories ON t0.id = users_categories.users_id WHERE users_categories.categories_id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:33:33.930941+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:33:33.931023+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:33:33.931093+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:33:33.931193+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:33:33.931293+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:33:33.931356+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:33:33.931783+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:33:33.931853+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:33:33.931936+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:33:33.932007+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:33:33.932372+00:00] security.INFO: Populated the TokenStorage with an anonymous Token. [] []
[2024-01-10T13:33:33.932824+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:33:33.933139+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:33:33.934747+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:33:33.934965+00:00] doctrine.DEBUG: Executing statement: SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = ?   AND TABLE_TYPE = 'BASE TABLE' ORDER BY TABLE_NAME (parameters: array{"1":"newsletter_symfony"}, types: array{"1":2}) {"sql":"SELECT TABLE_NAME\nFROM information_schema.TABLES\nWHERE TABLE_SCHEMA = ?\n  AND TABLE_TYPE = 'BASE TABLE'\nORDER BY TABLE_NAME","params":{"1":"newsletter_symfony"},"types":{"1":2}} []
[2024-01-10T13:33:33.936239+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:33:33.936531+00:00] doctrine.DEBUG: Executing statement:     SELECT t.TABLE_NAME,            t.ENGINE,            t.AUTO_INCREMENT,            t.TABLE_COMMENT,            t.CREATE_OPTIONS,            t.TABLE_COLLATION,            ccsa.CHARACTER_SET_NAME       FROM information_schema.TABLES t         INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa             ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE' (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"    SELECT t.TABLE_NAME,\n           t.ENGINE,\n           t.AUTO_INCREMENT,\n           t.TABLE_COMMENT,\n           t.CREATE_OPTIONS,\n           t.TABLE_COLLATION,\n           ccsa.CHARACTER_SET_NAME\n      FROM information_schema.TABLES t\n        INNER JOIN information_schema.COLLATION_CHARACTER_SET_APPLICABILITY ccsa\n            ON ccsa.COLLATION_NAME = t.TABLE_COLLATION WHERE t.TABLE_SCHEMA = ? AND t.TABLE_NAME = ? AND t.TABLE_TYPE = 'BASE TABLE'","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:33:33.938666+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:33:33.938922+00:00] doctrine.DEBUG: Executing statement: SELECT DISTINCT            k.CONSTRAINT_NAME,             k.COLUMN_NAME,             k.REFERENCED_TABLE_NAME,             k.REFERENCED_COLUMN_NAME,             k.ORDINAL_POSITION /*!50116,             c.UPDATE_RULE,             c.DELETE_RULE */ FROM information_schema.key_column_usage k /*!50116 INNER JOIN information_schema.referential_constraints c ON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME AND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT DISTINCT            k.CONSTRAINT_NAME,\n            k.COLUMN_NAME,\n            k.REFERENCED_TABLE_NAME,\n            k.REFERENCED_COLUMN_NAME,\n            k.ORDINAL_POSITION /*!50116,\n            c.UPDATE_RULE,\n            c.DELETE_RULE */\nFROM information_schema.key_column_usage k /*!50116\nINNER JOIN information_schema.referential_constraints c\nON c.CONSTRAINT_NAME = k.CONSTRAINT_NAME\nAND c.TABLE_NAME = k.TABLE_NAME */ WHERE k.TABLE_SCHEMA = ? AND k.TABLE_NAME = ? AND k.REFERENCED_COLUMN_NAME IS NOT NULL /*!50116 AND c.CONSTRAINT_SCHEMA = 'newsletter_symfony' */ ORDER BY k.ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:33:33.940301+00:00] doctrine.DEBUG: Executing statement: SELECT       c.COLUMN_NAME        AS field,        c.COLUMN_TYPE       AS type,        c.IS_NULLABLE        AS `null`,        c.COLUMN_KEY         AS `key`,        c.COLUMN_DEFAULT     AS `default`,        c.EXTRA,        c.COLUMN_COMMENT     AS comment,        c.CHARACTER_SET_NAME AS characterset,        c.COLLATION_NAME     AS collation FROM information_schema.COLUMNS c     INNER JOIN information_schema.TABLES t         ON t.TABLE_NAME = c.TABLE_NAME      WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION (parameters: array{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT       c.COLUMN_NAME        AS field,\n       c.COLUMN_TYPE       AS type,\n       c.IS_NULLABLE        AS `null`,\n       c.COLUMN_KEY         AS `key`,\n       c.COLUMN_DEFAULT     AS `default`,\n       c.EXTRA,\n       c.COLUMN_COMMENT     AS comment,\n       c.CHARACTER_SET_NAME AS characterset,\n       c.COLLATION_NAME     AS collation\nFROM information_schema.COLUMNS c\n    INNER JOIN information_schema.TABLES t\n        ON t.TABLE_NAME = c.TABLE_NAME\n     WHERE c.TABLE_SCHEMA = ? AND t.TABLE_SCHEMA = ? AND t.TABLE_TYPE = 'BASE TABLE' AND t.TABLE_NAME = ? ORDER BY ORDINAL_POSITION","params":{"1":"newsletter_symfony","2":"newsletter_symfony","3":"doctrine_migration_versions"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:33.942038+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:33:33.942258+00:00] doctrine.DEBUG: Executing statement: SELECT        NON_UNIQUE  AS Non_Unique,         INDEX_NAME  AS Key_name,         COLUMN_NAME AS Column_Name,         SUB_PART    AS Sub_Part,         INDEX_TYPE  AS Index_Type FROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX (parameters: array{"1":"newsletter_symfony","2":"doctrine_migration_versions"}, types: array{"1":2,"2":2}) {"sql":"SELECT        NON_UNIQUE  AS Non_Unique,\n        INDEX_NAME  AS Key_name,\n        COLUMN_NAME AS Column_Name,\n        SUB_PART    AS Sub_Part,\n        INDEX_TYPE  AS Index_Type\nFROM information_schema.STATISTICS WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ? ORDER BY SEQ_IN_INDEX","params":{"1":"newsletter_symfony","2":"doctrine_migration_versions"},"types":{"1":2,"2":2}} []
[2024-01-10T13:33:33.943622+00:00] doctrine.DEBUG: Executing query: SELECT * FROM doctrine_migration_versions {"sql":"SELECT * FROM doctrine_migration_versions"} []
[2024-01-10T13:33:33.944599+00:00] doctrine.DEBUG: Executing query: SELECT DATABASE() {"sql":"SELECT DATABASE()"} []
[2024-01-10T13:33:33.961747+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:608)"} []
[2024-01-10T13:33:33.961875+00:00] php.INFO: Deprecated: Return type of Symfony\Component\Finder\Finder::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\Finder\\Finder::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/finder/Finder.php:690)"} []
[2024-01-10T13:33:33.986800+00:00] doctrine.INFO: Disconnecting [] []
[2024-01-10T13:33:34.003313+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:210)"} []
[2024-01-10T13:33:34.003623+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\ParameterBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/ParameterBag.php:220)"} []
[2024-01-10T13:33:34.003803+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:255)"} []
[2024-01-10T13:33:34.003905+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\HeaderBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/HeaderBag.php:265)"} []
[2024-01-10T13:33:34.004827+00:00] request.INFO: Matched route "_wdt". {"route":"_wdt","route_parameters":{"_route":"_wdt","_controller":"web_profiler.controller.profiler::toolbarAction","token":"26c2d3"},"request_uri":"http://localhost:8001/_wdt/26c2d3","method":"GET"} []
[2024-01-10T13:33:34.005868+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetExists($key) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:153)"} []
[2024-01-10T13:33:34.006006+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetGet($key) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:161)"} []
[2024-01-10T13:33:34.006107+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetSet($key, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:169)"} []
[2024-01-10T13:33:34.006195+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::offsetUnset($key) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:177)"} []
[2024-01-10T13:33:34.006272+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:114)"} []
[2024-01-10T13:33:34.006362+00:00] php.INFO: Deprecated: Return type of Symfony\Component\VarDumper\Cloner\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\VarDumper\\Cloner\\Data::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/var-dumper/Cloner/Data.php:122)"} []
[2024-01-10T13:33:34.007731+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:134)"} []
[2024-01-10T13:33:34.007858+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBag::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Attribute/AttributeBag.php:144)"} []
[2024-01-10T13:33:34.007950+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:131)"} []
[2024-01-10T13:33:34.008034+00:00] php.INFO: Deprecated: Return type of Symfony\Component\HttpFoundation\Session\Session::count() should either be compatible with Countable::count(): int, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice {"exception":"[object] (ErrorException(code: 0): Deprecated: Return type of Symfony\\Component\\HttpFoundation\\Session\\Session::count() should either be compatible with Countable::count(): int, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice at /home/massoud/www/Symfony/Newsletter/vendor/symfony/http-foundation/Session/Session.php:141)"} []
[2024-01-10T13:33:34.790799+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:34.791907+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:34","2":"2024-01-10 13:33:34","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:34","2":"2024-01-10 13:33:34","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:34.793705+00:00] doctrine.DEBUG: Executing statement: UPDATE messenger_messages SET delivered_at = ? WHERE id = ? (parameters: array{"1":"2024-01-10 13:33:34","2":13}, types: array{"1":2,"2":2}) {"sql":"UPDATE messenger_messages SET delivered_at = ? WHERE id = ?","params":{"1":"2024-01-10 13:33:34","2":13},"types":{"1":2,"2":2}} []
[2024-01-10T13:33:34.795051+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:34.803257+00:00] messenger.INFO: Received message App\Message\SendNewsletterMessage {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage"} []
[2024-01-10T13:33:34.803883+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 WHERE t0.id = ? (parameters: array{"1":2}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.email AS email_2, t0.created_at AS created_at_3, t0.is_rgpd AS is_rgpd_4, t0.validation_token AS validation_token_5, t0.is_valid AS is_valid_6 FROM users t0 WHERE t0.id = ?","params":{"1":2},"types":{"1":1}} []
[2024-01-10T13:33:34.805593+00:00] doctrine.DEBUG: Executing statement: SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ? (parameters: array{"1":1}, types: array{"1":1}) {"sql":"SELECT t0.id AS id_1, t0.name AS name_2, t0.content AS content_3, t0.created_at AS created_at_4, t0.is_sent AS is_sent_5, t0.categories_id AS categories_id_6 FROM newsletters t0 WHERE t0.id = ?","params":{"1":1},"types":{"1":1}} []
[2024-01-10T13:33:37.810461+00:00] app.DEBUG: Email transport "Symfony\Component\Mailer\Transport\Smtp\SmtpTransport" stopping [] []
[2024-01-10T13:33:37.811091+00:00] app.DEBUG: Email transport "Symfony\Component\Mailer\Transport\Smtp\SmtpTransport" stopped [] []
[2024-01-10T13:33:37.811332+00:00] app.DEBUG: Email transport "Symfony\Component\Mailer\Transport\Smtp\SmtpTransport" starting [] []
[2024-01-10T13:33:37.915642+00:00] app.DEBUG: Email transport "Symfony\Component\Mailer\Transport\Smtp\SmtpTransport" started [] []
[2024-01-10T13:33:37.965541+00:00] messenger.INFO: Message Symfony\Component\Mailer\Messenger\SendEmailMessage handled by Symfony\Component\Mailer\Messenger\MessageHandler::__invoke {"message":{"Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage":[]},"class":"Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage","handler":"Symfony\\Component\\Mailer\\Messenger\\MessageHandler::__invoke"} []
[2024-01-10T13:33:37.966329+00:00] messenger.INFO: Message App\Message\SendNewsletterMessage handled by App\MessageHandler\SendNewsletterMessageHandler::__invoke {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage","handler":"App\\MessageHandler\\SendNewsletterMessageHandler::__invoke"} []
[2024-01-10T13:33:37.967025+00:00] messenger.INFO: App\Message\SendNewsletterMessage was handled successfully (acknowledging to transport). {"message":{"App\\Message\\SendNewsletterMessage":[]},"class":"App\\Message\\SendNewsletterMessage"} []
[2024-01-10T13:33:37.967318+00:00] doctrine.DEBUG: Executing statement: DELETE FROM messenger_messages WHERE id = ? (parameters: array{"1":"13"}, types: array{"1":2}) {"sql":"DELETE FROM messenger_messages WHERE id = ?","params":{"1":"13"},"types":{"1":2}} []
[2024-01-10T13:33:37.973208+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:37.974140+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:37","2":"2024-01-10 13:33:37","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:37","2":"2024-01-10 13:33:37","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:37.975980+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:38.977229+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:38.978245+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:38","2":"2024-01-10 13:33:38","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:38","2":"2024-01-10 13:33:38","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:38.979783+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:39.981025+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:39.982153+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:39","2":"2024-01-10 13:33:39","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:39","2":"2024-01-10 13:33:39","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:39.983732+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:40.984945+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:40.985700+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:40","2":"2024-01-10 13:33:40","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:40","2":"2024-01-10 13:33:40","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:40.986991+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:41.988015+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:41.989230+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:41","2":"2024-01-10 13:33:41","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:41","2":"2024-01-10 13:33:41","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:41.990475+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:42.991587+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:42.992456+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:42","2":"2024-01-10 13:33:42","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:42","2":"2024-01-10 13:33:42","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:42.993589+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:43.994405+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:43.994924+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:43","2":"2024-01-10 13:33:43","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:43","2":"2024-01-10 13:33:43","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:43.995527+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:44.995982+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:44.996483+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:44","2":"2024-01-10 13:33:44","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:44","2":"2024-01-10 13:33:44","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:44.997206+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:45.997791+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:45.999346+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:45","2":"2024-01-10 13:33:45","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:45","2":"2024-01-10 13:33:45","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:46.001359+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:47.003003+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:47.004107+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:47","2":"2024-01-10 13:33:47","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:47","2":"2024-01-10 13:33:47","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:47.005910+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:48.007450+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:48.008323+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:48","2":"2024-01-10 13:33:48","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:48","2":"2024-01-10 13:33:48","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:48.009706+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:49.010461+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:49.011493+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:49","2":"2024-01-10 13:33:49","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:49","2":"2024-01-10 13:33:49","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:49.013580+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:50.015245+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:50.016734+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:50","2":"2024-01-10 13:33:50","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:50","2":"2024-01-10 13:33:50","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:50.019254+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:51.021253+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:51.022302+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:51","2":"2024-01-10 13:33:51","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:51","2":"2024-01-10 13:33:51","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:51.023605+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:52.024608+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:52.025709+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:52","2":"2024-01-10 13:33:52","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:52","2":"2024-01-10 13:33:52","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:52.027940+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:53.029311+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:53.030506+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:53","2":"2024-01-10 13:33:53","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:53","2":"2024-01-10 13:33:53","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:53.032446+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:54.033870+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:54.034516+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:54","2":"2024-01-10 13:33:54","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:54","2":"2024-01-10 13:33:54","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:54.035555+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:55.036404+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:55.037378+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:55","2":"2024-01-10 13:33:55","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:55","2":"2024-01-10 13:33:55","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:55.038843+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:56.039959+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:56.040557+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:56","2":"2024-01-10 13:33:56","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:56","2":"2024-01-10 13:33:56","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:56.041347+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:57.041916+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:57.042357+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:57","2":"2024-01-10 13:33:57","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:57","2":"2024-01-10 13:33:57","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:57.042977+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:58.043562+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:58.044570+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:58","2":"2024-01-10 13:33:58","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:58","2":"2024-01-10 13:33:58","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:58.046059+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:33:59.047711+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:33:59.048932+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:33:59","2":"2024-01-10 13:33:59","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:33:59","2":"2024-01-10 13:33:59","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:33:59.050647+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:00.051735+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:00.052920+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:00","2":"2024-01-10 13:34:00","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:00","2":"2024-01-10 13:34:00","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:00.054435+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:01.055526+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:01.055852+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:01","2":"2024-01-10 13:34:01","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:01","2":"2024-01-10 13:34:01","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:01.056291+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:02.056733+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:02.057701+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:02","2":"2024-01-10 13:34:02","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:02","2":"2024-01-10 13:34:02","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:02.059429+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:03.060831+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:03.061458+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:03","2":"2024-01-10 13:34:03","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:03","2":"2024-01-10 13:34:03","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:03.062329+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:04.063090+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:04.064395+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:04","2":"2024-01-10 13:34:04","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:04","2":"2024-01-10 13:34:04","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:04.066362+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:05.068301+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:05.069456+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:05","2":"2024-01-10 13:34:05","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:05","2":"2024-01-10 13:34:05","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:05.071553+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:06.072791+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:06.073091+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:06","2":"2024-01-10 13:34:06","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:06","2":"2024-01-10 13:34:06","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:06.073620+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:07.074159+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:07.075233+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:07","2":"2024-01-10 13:34:07","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:07","2":"2024-01-10 13:34:07","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:07.077160+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:08.078454+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:08.079032+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:08","2":"2024-01-10 13:34:08","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:08","2":"2024-01-10 13:34:08","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:08.079806+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:09.080559+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:09.081467+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:09","2":"2024-01-10 13:34:09","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:09","2":"2024-01-10 13:34:09","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:09.082965+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:10.084135+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:10.085056+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:10","2":"2024-01-10 13:34:10","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:10","2":"2024-01-10 13:34:10","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:10.086714+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:11.088638+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:11.090570+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:11","2":"2024-01-10 13:34:11","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:11","2":"2024-01-10 13:34:11","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:11.093032+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:12.094773+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:12.096331+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:12","2":"2024-01-10 13:34:12","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:12","2":"2024-01-10 13:34:12","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:12.098386+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:13.099894+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:13.101029+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:13","2":"2024-01-10 13:34:13","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:13","2":"2024-01-10 13:34:13","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:13.102666+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:14.103822+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:14.104699+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:14","2":"2024-01-10 13:34:14","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:14","2":"2024-01-10 13:34:14","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:14.106186+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:15.107195+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:15.108263+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:15","2":"2024-01-10 13:34:15","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:15","2":"2024-01-10 13:34:15","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:15.109943+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:16.111067+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:16.112088+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:16","2":"2024-01-10 13:34:16","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:16","2":"2024-01-10 13:34:16","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:16.113732+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:17.114977+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:17.116060+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:17","2":"2024-01-10 13:34:17","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:17","2":"2024-01-10 13:34:17","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:17.117853+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:18.120152+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:18.121424+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:18","2":"2024-01-10 13:34:18","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:18","2":"2024-01-10 13:34:18","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:18.123081+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:19.124398+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:19.125479+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:19","2":"2024-01-10 13:34:19","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:19","2":"2024-01-10 13:34:19","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:19.127467+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:20.128692+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:20.129553+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:20","2":"2024-01-10 13:34:20","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:20","2":"2024-01-10 13:34:20","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:20.130818+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:21.131841+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:21.132719+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:21","2":"2024-01-10 13:34:21","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:21","2":"2024-01-10 13:34:21","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:21.134266+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:22.135422+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:22.136311+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:22","2":"2024-01-10 13:34:22","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:22","2":"2024-01-10 13:34:22","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:22.137933+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:23.139777+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:23.141530+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:23","2":"2024-01-10 13:34:23","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:23","2":"2024-01-10 13:34:23","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:23.143487+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:24.145036+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:24.145972+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:24","2":"2024-01-10 13:34:24","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:24","2":"2024-01-10 13:34:24","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:24.147600+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:25.148946+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:25.150451+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:25","2":"2024-01-10 13:34:25","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:25","2":"2024-01-10 13:34:25","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:25.152127+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:26.153684+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:26.155023+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:26","2":"2024-01-10 13:34:26","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:26","2":"2024-01-10 13:34:26","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:26.157562+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:27.159215+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:27.160094+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:27","2":"2024-01-10 13:34:27","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:27","2":"2024-01-10 13:34:27","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:27.161462+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:28.162462+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:28.163303+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:28","2":"2024-01-10 13:34:28","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:28","2":"2024-01-10 13:34:28","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:28.164726+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:29.165807+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:29.166665+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:29","2":"2024-01-10 13:34:29","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:29","2":"2024-01-10 13:34:29","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:29.167944+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:30.169118+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:30.170317+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:30","2":"2024-01-10 13:34:30","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:30","2":"2024-01-10 13:34:30","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:30.172037+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:31.173447+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:31.175325+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:31","2":"2024-01-10 13:34:31","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:31","2":"2024-01-10 13:34:31","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:31.178373+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:32.180202+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:32.183886+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:32","2":"2024-01-10 13:34:32","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:32","2":"2024-01-10 13:34:32","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:32.187037+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:33.189640+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:33.190403+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:33","2":"2024-01-10 13:34:33","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:33","2":"2024-01-10 13:34:33","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:33.191648+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:34.192573+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:34.193689+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:34","2":"2024-01-10 13:34:34","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:34","2":"2024-01-10 13:34:34","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:34.195322+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:35.196732+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:35.197681+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:35","2":"2024-01-10 13:34:35","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:35","2":"2024-01-10 13:34:35","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:35.199218+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:36.200674+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:36.203120+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:36","2":"2024-01-10 13:34:36","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:36","2":"2024-01-10 13:34:36","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:36.205809+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:37.209574+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:37.212112+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:37","2":"2024-01-10 13:34:37","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:37","2":"2024-01-10 13:34:37","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:37.214742+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:38.216639+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:38.218413+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:38","2":"2024-01-10 13:34:38","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:38","2":"2024-01-10 13:34:38","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:38.221075+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:39.222883+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:39.225198+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:39","2":"2024-01-10 13:34:39","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:39","2":"2024-01-10 13:34:39","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:39.228133+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:40.230017+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:40.231626+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:40","2":"2024-01-10 13:34:40","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:40","2":"2024-01-10 13:34:40","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:40.234296+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:41.236213+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:41.237418+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:41","2":"2024-01-10 13:34:41","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:41","2":"2024-01-10 13:34:41","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:41.239295+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:42.240464+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:42.241875+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:42","2":"2024-01-10 13:34:42","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:42","2":"2024-01-10 13:34:42","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:42.244804+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:43.246363+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:43.247946+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:43","2":"2024-01-10 13:34:43","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:43","2":"2024-01-10 13:34:43","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:43.250283+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:44.251975+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:44.253470+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:44","2":"2024-01-10 13:34:44","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:44","2":"2024-01-10 13:34:44","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:44.255648+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:45.257160+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:45.258470+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:45","2":"2024-01-10 13:34:45","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:45","2":"2024-01-10 13:34:45","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:45.261022+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:46.262864+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:46.263795+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:46","2":"2024-01-10 13:34:46","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:46","2":"2024-01-10 13:34:46","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:46.265456+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:47.266956+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:47.268152+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:47","2":"2024-01-10 13:34:47","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:47","2":"2024-01-10 13:34:47","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:47.270463+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:48.271877+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:48.272221+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:48","2":"2024-01-10 13:34:48","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:48","2":"2024-01-10 13:34:48","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:48.272780+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:49.273446+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:49.274699+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:49","2":"2024-01-10 13:34:49","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:49","2":"2024-01-10 13:34:49","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:49.278518+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:50.280172+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:50.281331+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:50","2":"2024-01-10 13:34:50","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:50","2":"2024-01-10 13:34:50","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:50.283325+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:51.285062+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:51.285996+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:51","2":"2024-01-10 13:34:51","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:51","2":"2024-01-10 13:34:51","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:51.287599+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:52.289087+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:52.290721+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:52","2":"2024-01-10 13:34:52","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:52","2":"2024-01-10 13:34:52","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:52.292231+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:53.293497+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:53.295105+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:53","2":"2024-01-10 13:34:53","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:53","2":"2024-01-10 13:34:53","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:53.297619+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:54.299588+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:54.299958+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:54","2":"2024-01-10 13:34:54","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:54","2":"2024-01-10 13:34:54","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:54.300533+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:55.301093+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:55.302190+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:55","2":"2024-01-10 13:34:55","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:55","2":"2024-01-10 13:34:55","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:55.304081+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:56.305586+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:56.305966+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:56","2":"2024-01-10 13:34:56","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:56","2":"2024-01-10 13:34:56","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:56.306517+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:57.307156+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:57.308964+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:57","2":"2024-01-10 13:34:57","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:57","2":"2024-01-10 13:34:57","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:57.310957+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:58.312587+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:58.313617+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:58","2":"2024-01-10 13:34:58","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:58","2":"2024-01-10 13:34:58","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:58.315142+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:34:59.316302+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:34:59.317543+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:34:59","2":"2024-01-10 13:34:59","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:34:59","2":"2024-01-10 13:34:59","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:34:59.319542+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:00.321685+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:00.322136+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:00","2":"2024-01-10 13:35:00","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:00","2":"2024-01-10 13:35:00","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:00.322694+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:01.323197+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:01.323702+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:01","2":"2024-01-10 13:35:01","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:01","2":"2024-01-10 13:35:01","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:01.324466+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:02.325209+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:02.326709+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:02","2":"2024-01-10 13:35:02","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:02","2":"2024-01-10 13:35:02","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:02.328611+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:03.329939+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:03.331686+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:03","2":"2024-01-10 13:35:03","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:03","2":"2024-01-10 13:35:03","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:03.342874+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:04.344103+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:04.345672+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:04","2":"2024-01-10 13:35:04","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:04","2":"2024-01-10 13:35:04","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:04.347876+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:05.349680+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:05.350805+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:05","2":"2024-01-10 13:35:05","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:05","2":"2024-01-10 13:35:05","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:05.352463+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:06.353522+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:06.354571+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:06","2":"2024-01-10 13:35:06","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:06","2":"2024-01-10 13:35:06","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:06.356426+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:07.357624+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:07.359161+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:07","2":"2024-01-10 13:35:07","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:07","2":"2024-01-10 13:35:07","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:07.361433+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:08.362780+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:08.363617+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:08","2":"2024-01-10 13:35:08","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:08","2":"2024-01-10 13:35:08","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:08.365107+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:09.366259+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:09.367400+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:09","2":"2024-01-10 13:35:09","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:09","2":"2024-01-10 13:35:09","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:09.369315+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:10.370711+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:10.371601+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:10","2":"2024-01-10 13:35:10","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:10","2":"2024-01-10 13:35:10","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:10.372986+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:11.374127+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:11.375153+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:11","2":"2024-01-10 13:35:11","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:11","2":"2024-01-10 13:35:11","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:11.377183+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:12.378525+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:12.379545+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:12","2":"2024-01-10 13:35:12","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:12","2":"2024-01-10 13:35:12","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:12.381708+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:13.383425+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:13.383743+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:13","2":"2024-01-10 13:35:13","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:13","2":"2024-01-10 13:35:13","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:13.384199+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:14.384692+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:14.386116+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:14","2":"2024-01-10 13:35:14","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:14","2":"2024-01-10 13:35:14","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:14.388337+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:15.390680+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:15.391887+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:15","2":"2024-01-10 13:35:15","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:15","2":"2024-01-10 13:35:15","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:15.393687+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:16.395063+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:16.396354+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:16","2":"2024-01-10 13:35:16","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:16","2":"2024-01-10 13:35:16","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:16.398656+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:17.400660+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:17.402112+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:17","2":"2024-01-10 13:35:17","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:17","2":"2024-01-10 13:35:17","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:17.404791+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:18.406610+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:18.408168+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:18","2":"2024-01-10 13:35:18","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:18","2":"2024-01-10 13:35:18","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:18.410417+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:19.412181+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:19.413651+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:19","2":"2024-01-10 13:35:19","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:19","2":"2024-01-10 13:35:19","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:19.416244+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:20.418374+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:20.420953+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:20","2":"2024-01-10 13:35:20","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:20","2":"2024-01-10 13:35:20","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:20.423287+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:21.424767+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:21.426027+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:21","2":"2024-01-10 13:35:21","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:21","2":"2024-01-10 13:35:21","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:21.427967+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:22.429262+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:22.429789+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:22","2":"2024-01-10 13:35:22","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:22","2":"2024-01-10 13:35:22","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:22.430416+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:23.431047+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:23.432348+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:23","2":"2024-01-10 13:35:23","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:23","2":"2024-01-10 13:35:23","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:23.434153+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:24.435681+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:24.436850+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:24","2":"2024-01-10 13:35:24","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:24","2":"2024-01-10 13:35:24","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:24.438817+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:25.440163+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:25.441148+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:25","2":"2024-01-10 13:35:25","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:25","2":"2024-01-10 13:35:25","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:25.442671+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:26.443944+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:26.444828+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:26","2":"2024-01-10 13:35:26","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:26","2":"2024-01-10 13:35:26","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:26.446258+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:27.447560+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:27.449251+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:27","2":"2024-01-10 13:35:27","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:27","2":"2024-01-10 13:35:27","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:27.451395+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:28.453824+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:28.455201+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:28","2":"2024-01-10 13:35:28","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:28","2":"2024-01-10 13:35:28","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:28.457967+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:29.460307+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:29.460637+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:29","2":"2024-01-10 13:35:29","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:29","2":"2024-01-10 13:35:29","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:29.461146+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:30.461692+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:30.462744+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:30","2":"2024-01-10 13:35:30","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:30","2":"2024-01-10 13:35:30","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:30.464963+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:31.466881+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:31.468215+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:31","2":"2024-01-10 13:35:31","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:31","2":"2024-01-10 13:35:31","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:31.470157+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:32.471763+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:32.473428+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:32","2":"2024-01-10 13:35:32","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:32","2":"2024-01-10 13:35:32","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:32.476279+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:33.478617+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:33.479971+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:33","2":"2024-01-10 13:35:33","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:33","2":"2024-01-10 13:35:33","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:33.483533+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:34.485085+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:34.485405+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:34","2":"2024-01-10 13:35:34","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:34","2":"2024-01-10 13:35:34","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:34.485835+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:35.486438+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:35.487725+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:35","2":"2024-01-10 13:35:35","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:35","2":"2024-01-10 13:35:35","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:35.489994+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:36.491832+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:36.493260+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:36","2":"2024-01-10 13:35:36","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:36","2":"2024-01-10 13:35:36","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:36.495627+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:37.497206+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:37.498560+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:37","2":"2024-01-10 13:35:37","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:37","2":"2024-01-10 13:35:37","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:37.501110+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:38.502855+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:38.504471+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:38","2":"2024-01-10 13:35:38","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:38","2":"2024-01-10 13:35:38","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:38.506961+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:39.508790+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:39.509738+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:39","2":"2024-01-10 13:35:39","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:39","2":"2024-01-10 13:35:39","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:39.511237+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:40.512255+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:40.513231+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:40","2":"2024-01-10 13:35:40","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:40","2":"2024-01-10 13:35:40","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:40.514509+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:41.515601+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:41.515994+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:41","2":"2024-01-10 13:35:41","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:41","2":"2024-01-10 13:35:41","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:41.516684+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:42.517297+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:42.518236+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:42","2":"2024-01-10 13:35:42","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:42","2":"2024-01-10 13:35:42","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:42.519794+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:43.520737+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:43.521148+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:43","2":"2024-01-10 13:35:43","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:43","2":"2024-01-10 13:35:43","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:43.521669+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:44.522083+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:44.522491+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:44","2":"2024-01-10 13:35:44","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:44","2":"2024-01-10 13:35:44","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:44.523153+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:45.523775+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:45.524983+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:45","2":"2024-01-10 13:35:45","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:45","2":"2024-01-10 13:35:45","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:45.526909+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:46.528019+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:46.528851+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:46","2":"2024-01-10 13:35:46","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:46","2":"2024-01-10 13:35:46","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:46.529982+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:47.530830+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:47.531585+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:47","2":"2024-01-10 13:35:47","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:47","2":"2024-01-10 13:35:47","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:47.532796+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:48.533775+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:48.534535+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:48","2":"2024-01-10 13:35:48","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:48","2":"2024-01-10 13:35:48","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:48.535697+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:49.536746+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:49.537818+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:49","2":"2024-01-10 13:35:49","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:49","2":"2024-01-10 13:35:49","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:49.539501+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:50.541337+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:50.542269+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:50","2":"2024-01-10 13:35:50","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:50","2":"2024-01-10 13:35:50","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:50.543582+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:51.544843+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:51.545995+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:51","2":"2024-01-10 13:35:51","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:51","2":"2024-01-10 13:35:51","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:51.547680+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:52.549184+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:52.550604+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:52","2":"2024-01-10 13:35:52","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:52","2":"2024-01-10 13:35:52","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:52.552606+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:53.554264+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:53.555555+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:53","2":"2024-01-10 13:35:53","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:53","2":"2024-01-10 13:35:53","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:53.558003+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:54.559205+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:54.560717+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:54","2":"2024-01-10 13:35:54","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:54","2":"2024-01-10 13:35:54","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:54.562602+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:55.564065+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:55.564980+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:55","2":"2024-01-10 13:35:55","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:55","2":"2024-01-10 13:35:55","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:55.566496+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:56.567810+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:56.568470+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:56","2":"2024-01-10 13:35:56","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:56","2":"2024-01-10 13:35:56","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:56.569463+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:57.570356+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:57.571423+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:57","2":"2024-01-10 13:35:57","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:57","2":"2024-01-10 13:35:57","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:57.573742+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:58.574918+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:58.575445+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:58","2":"2024-01-10 13:35:58","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:58","2":"2024-01-10 13:35:58","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:58.576120+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:35:59.576855+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:35:59.578203+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:35:59","2":"2024-01-10 13:35:59","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:35:59","2":"2024-01-10 13:35:59","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:35:59.580345+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:00.581595+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:00.582394+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:00","2":"2024-01-10 13:36:00","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:00","2":"2024-01-10 13:36:00","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:00.583812+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:01.584783+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:01.585322+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:01","2":"2024-01-10 13:36:01","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:01","2":"2024-01-10 13:36:01","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:01.585957+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:02.586602+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:02.588123+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:02","2":"2024-01-10 13:36:02","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:02","2":"2024-01-10 13:36:02","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:02.590650+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:03.592525+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:03.594177+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:03","2":"2024-01-10 13:36:03","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:03","2":"2024-01-10 13:36:03","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:03.596478+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:04.598383+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:04.599382+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:04","2":"2024-01-10 13:36:04","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:04","2":"2024-01-10 13:36:04","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:04.600983+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:05.602174+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:05.602504+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:05","2":"2024-01-10 13:36:05","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:05","2":"2024-01-10 13:36:05","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:05.602926+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:06.603263+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:06.603641+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:06","2":"2024-01-10 13:36:06","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:06","2":"2024-01-10 13:36:06","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:06.604281+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:07.604758+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:07.605342+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:07","2":"2024-01-10 13:36:07","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:07","2":"2024-01-10 13:36:07","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:07.606301+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:08.606901+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:08.607312+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:08","2":"2024-01-10 13:36:08","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:08","2":"2024-01-10 13:36:08","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:08.608016+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:09.608521+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:09.608880+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:09","2":"2024-01-10 13:36:09","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:09","2":"2024-01-10 13:36:09","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:09.609403+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:10.609892+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:10.611279+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:10","2":"2024-01-10 13:36:10","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:10","2":"2024-01-10 13:36:10","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:10.611776+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:11.612197+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:11.612554+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:11","2":"2024-01-10 13:36:11","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:11","2":"2024-01-10 13:36:11","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:11.613100+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:12.614432+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:12.615852+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:12","2":"2024-01-10 13:36:12","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:12","2":"2024-01-10 13:36:12","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:12.617562+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:13.618979+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:13.619781+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:13","2":"2024-01-10 13:36:13","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:13","2":"2024-01-10 13:36:13","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:13.621023+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:14.622085+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:14.622924+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:14","2":"2024-01-10 13:36:14","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:14","2":"2024-01-10 13:36:14","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:14.624049+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:15.625002+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:15.625975+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:15","2":"2024-01-10 13:36:15","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:15","2":"2024-01-10 13:36:15","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:15.627524+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:16.628689+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:16.629537+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:16","2":"2024-01-10 13:36:16","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:16","2":"2024-01-10 13:36:16","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:16.630805+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:17.631850+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:17.632763+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:17","2":"2024-01-10 13:36:17","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:17","2":"2024-01-10 13:36:17","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:17.634022+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:18.635030+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:18.635875+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:18","2":"2024-01-10 13:36:18","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:18","2":"2024-01-10 13:36:18","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:18.637258+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:19.638147+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:19.638713+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:19","2":"2024-01-10 13:36:19","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:19","2":"2024-01-10 13:36:19","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:19.639581+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:20.640343+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:20.641374+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:20","2":"2024-01-10 13:36:20","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:20","2":"2024-01-10 13:36:20","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:20.643171+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:21.644249+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:21.644869+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:21","2":"2024-01-10 13:36:21","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:21","2":"2024-01-10 13:36:21","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:21.645841+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:22.646956+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:22.650069+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:22","2":"2024-01-10 13:36:22","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:22","2":"2024-01-10 13:36:22","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:22.654647+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:23.656427+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:23.657554+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:23","2":"2024-01-10 13:36:23","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:23","2":"2024-01-10 13:36:23","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:23.659355+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:24.660910+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:24.662364+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:24","2":"2024-01-10 13:36:24","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:24","2":"2024-01-10 13:36:24","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:24.664663+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:25.666363+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:25.667548+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:25","2":"2024-01-10 13:36:25","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:25","2":"2024-01-10 13:36:25","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:25.669630+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:26.671087+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:26.672741+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:26","2":"2024-01-10 13:36:26","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:26","2":"2024-01-10 13:36:26","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:26.675167+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:27.677500+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:27.680656+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:27","2":"2024-01-10 13:36:27","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:27","2":"2024-01-10 13:36:27","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:27.683205+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:28.684830+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:28.686142+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:28","2":"2024-01-10 13:36:28","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:28","2":"2024-01-10 13:36:28","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:28.689882+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:29.691899+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:29.693195+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:29","2":"2024-01-10 13:36:29","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:29","2":"2024-01-10 13:36:29","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:29.694916+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:30.696471+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:30.697566+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:30","2":"2024-01-10 13:36:30","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:30","2":"2024-01-10 13:36:30","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:30.699182+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:31.700453+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:31.702068+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:31","2":"2024-01-10 13:36:31","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:31","2":"2024-01-10 13:36:31","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:31.704207+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:32.705954+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:32.707737+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:32","2":"2024-01-10 13:36:32","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:32","2":"2024-01-10 13:36:32","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:32.709411+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:33.710793+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:33.712210+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:33","2":"2024-01-10 13:36:33","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:33","2":"2024-01-10 13:36:33","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:33.714157+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:34.715692+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:34.717303+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:34","2":"2024-01-10 13:36:34","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:34","2":"2024-01-10 13:36:34","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:34.720087+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:35.722797+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:35.724061+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:35","2":"2024-01-10 13:36:35","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:35","2":"2024-01-10 13:36:35","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:35.726030+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:36.727557+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:36.728621+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:36","2":"2024-01-10 13:36:36","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:36","2":"2024-01-10 13:36:36","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:36.730173+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:37.731403+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:37.731752+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:37","2":"2024-01-10 13:36:37","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:37","2":"2024-01-10 13:36:37","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:37.732265+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:38.732798+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:38.733912+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:38","2":"2024-01-10 13:36:38","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:38","2":"2024-01-10 13:36:38","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:38.735544+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:39.736768+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:39.737225+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:39","2":"2024-01-10 13:36:39","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:39","2":"2024-01-10 13:36:39","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:39.737808+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:40.738450+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:40.740018+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:40","2":"2024-01-10 13:36:40","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:40","2":"2024-01-10 13:36:40","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:40.741978+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:41.743260+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:41.744555+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:41","2":"2024-01-10 13:36:41","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:41","2":"2024-01-10 13:36:41","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:41.745835+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:42.746939+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:42.748039+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:42","2":"2024-01-10 13:36:42","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:42","2":"2024-01-10 13:36:42","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:42.749654+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:43.751047+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:43.752249+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:43","2":"2024-01-10 13:36:43","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:43","2":"2024-01-10 13:36:43","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:43.754150+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:44.755493+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:44.757136+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:44","2":"2024-01-10 13:36:44","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:44","2":"2024-01-10 13:36:44","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:44.760015+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:45.761482+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:45.763337+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:45","2":"2024-01-10 13:36:45","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:45","2":"2024-01-10 13:36:45","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:45.765446+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:46.767224+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:46.768610+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:46","2":"2024-01-10 13:36:46","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:46","2":"2024-01-10 13:36:46","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:46.770641+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:47.772524+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:47.774084+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:47","2":"2024-01-10 13:36:47","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:47","2":"2024-01-10 13:36:47","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:47.776949+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:48.778358+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:48.779836+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:48","2":"2024-01-10 13:36:48","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:48","2":"2024-01-10 13:36:48","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:48.783272+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:49.785047+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:49.785452+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:49","2":"2024-01-10 13:36:49","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:49","2":"2024-01-10 13:36:49","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:49.786152+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:50.786655+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:50.787924+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:50","2":"2024-01-10 13:36:50","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:50","2":"2024-01-10 13:36:50","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:50.789130+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:51.790567+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:51.791610+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:51","2":"2024-01-10 13:36:51","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:51","2":"2024-01-10 13:36:51","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:51.793264+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:52.794511+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:52.795377+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:52","2":"2024-01-10 13:36:52","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:52","2":"2024-01-10 13:36:52","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:52.796789+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:53.797900+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:53.799021+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:53","2":"2024-01-10 13:36:53","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:53","2":"2024-01-10 13:36:53","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:53.801005+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:54.802158+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:54.803142+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:54","2":"2024-01-10 13:36:54","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:54","2":"2024-01-10 13:36:54","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:54.804704+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:55.805759+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:55.807071+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:55","2":"2024-01-10 13:36:55","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:55","2":"2024-01-10 13:36:55","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:55.808949+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:56.810382+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:56.811608+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:56","2":"2024-01-10 13:36:56","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:56","2":"2024-01-10 13:36:56","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:56.813314+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:57.814654+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:57.815931+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:57","2":"2024-01-10 13:36:57","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:57","2":"2024-01-10 13:36:57","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:57.817892+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:58.819361+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:58.819903+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:58","2":"2024-01-10 13:36:58","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:58","2":"2024-01-10 13:36:58","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:58.820891+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:36:59.821825+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:36:59.823102+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:36:59","2":"2024-01-10 13:36:59","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:36:59","2":"2024-01-10 13:36:59","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:36:59.825209+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:37:00.826737+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:37:00.829814+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:37:00","2":"2024-01-10 13:37:00","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:37:00","2":"2024-01-10 13:37:00","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:37:00.833273+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:37:01.836203+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:37:01.838582+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:37:01","2":"2024-01-10 13:37:01","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:37:01","2":"2024-01-10 13:37:01","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:37:01.842646+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:37:02.845880+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:37:02.848127+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:37:02","2":"2024-01-10 13:37:02","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:37:02","2":"2024-01-10 13:37:02","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:37:02.851717+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:37:03.854519+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:37:03.856099+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:37:03","2":"2024-01-10 13:37:03","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:37:03","2":"2024-01-10 13:37:03","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:37:03.858343+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:37:04.859721+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:37:04.861053+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:37:04","2":"2024-01-10 13:37:04","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:37:04","2":"2024-01-10 13:37:04","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:37:04.863114+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:37:05.864908+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:37:05.866652+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:37:05","2":"2024-01-10 13:37:05","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:37:05","2":"2024-01-10 13:37:05","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:37:05.869454+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:37:06.872259+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:37:06.872800+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:37:06","2":"2024-01-10 13:37:06","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:37:06","2":"2024-01-10 13:37:06","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:37:06.874987+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:37:07.875650+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:37:07.876284+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:37:07","2":"2024-01-10 13:37:07","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:37:07","2":"2024-01-10 13:37:07","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:37:07.877223+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:37:08.878218+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:37:08.879054+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:37:08","2":"2024-01-10 13:37:08","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:37:08","2":"2024-01-10 13:37:08","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:37:08.880396+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:37:09.881385+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:37:09.882273+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:37:09","2":"2024-01-10 13:37:09","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:37:09","2":"2024-01-10 13:37:09","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:37:09.883587+00:00] doctrine.DEBUG: Committing transaction [] []
[2024-01-10T13:37:10.884812+00:00] doctrine.DEBUG: Beginning transaction [] []
[2024-01-10T13:37:10.885703+00:00] doctrine.DEBUG: Executing statement: SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE (parameters: array{"1":"2024-01-10 12:37:10","2":"2024-01-10 13:37:10","3":"default"}, types: array{"1":2,"2":2,"3":2}) {"sql":"SELECT m.* FROM messenger_messages m WHERE (m.delivered_at is null OR m.delivered_at < ?) AND (m.available_at <= ?) AND (m.queue_name = ?) ORDER BY available_at ASC LIMIT 1 FOR UPDATE","params":{"1":"2024-01-10 12:37:10","2":"2024-01-10 13:37:10","3":"default"},"types":{"1":2,"2":2,"3":2}} []
[2024-01-10T13:37:10.887031+00:00] doctrine.DEBUG: Committing transaction [] []
